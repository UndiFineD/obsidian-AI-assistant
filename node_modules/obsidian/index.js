// Minimal Obsidian API mocks for plugin unit testing in Node.js
// This is NOT the real Obsidian API. It only provides what our plugin touches.

class Modal {
  constructor(app) { this.app = app; this.contentEl = createContainer('div'); }
  open() { /* no-op */ }
  close() { /* no-op */ }
  onOpen() {}
  onClose() {}
}

class Notice {
  constructor(msg) { if (process.env.DEBUG_PLUGIN_TESTS) console.log('[Notice]', msg); }
}

class PluginSettingTab {
  constructor(app, plugin) { this.app = app; this.plugin = plugin; this.containerEl = createContainer('div'); }
  display() {}
}

class Setting {
  constructor(containerEl) { this.containerEl = containerEl; }
  setName() { return this; }
  setDesc() { return this; }
  addText(fn) { fn({ setValue: () => ({ onChange: () => {} }) }); return this; }
  addToggle(fn) { fn({ setValue: () => ({ onChange: () => {} }) }); return this; }
}

function createContainer(tag) {
  // Tiny DOM-like shim for createEl usage in plugin code
  return {
    children: [],
    empty() { this.children = []; },
    createEl: function(tagName, opts = {}) {
      const el = createContainer(tagName);
      if (opts.text) el.textContent = opts.text;
      if (opts.cls) el.className = opts.cls;
      if (opts.attr) el.attr = opts.attr;
      if (opts.type) el.type = opts.type;
      if (opts.placeholder) el.placeholder = opts.placeholder;
      if (opts.value !== undefined) el.value = opts.value;
      this.children.push(el);
      return el;
    },
    addClass(cls) { this.className = cls; },
    querySelector() { return null; },
  };
}

class Plugin {
  constructor(app) { this.app = app; this._data = {}; }
  async onload() {}
  async onunload() {}
  async loadData() { return this._data; }
  async saveData(d) { this._data = d; }
  addRibbonIcon(_icon, _title, _cb) { /* no-op */ }
  addSettingTab(_tab) { /* no-op */ }
}

class Workspace {
  constructor() { this._leaves = {}; }
  getLeavesOfType(_type) { return []; }
  getRightPaneContainer() { return createContainer('div'); }
}

class App { constructor() { this.vault = { adapter: { basePath: '' } }; this.workspace = new Workspace(); } }

module.exports = {
  App,
  Modal,
  Notice,
  Plugin,
  PluginSettingTab,
  Setting,
};
