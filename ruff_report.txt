invalid-syntax: Expected an indented block after `try` statement
  --> backend\advanced_security.py:85:9
   |
83 |         """Log a security event"""
84 |         try:
85 |         pass
   |         ^^^^
86 |             # Add to recent events
87 |             self.recent_events.append(event)
   |

invalid-syntax: Unexpected indentation
  --> backend\advanced_security.py:87:1
   |
85 |         pass
86 |             # Add to recent events
87 |             self.recent_events.append(event)
   | ^^^^^^^^^^^^
88 |             if len(self.recent_events) > self.max_recent_events:
89 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\advanced_security.py:89:13
   |
87 |             self.recent_events.append(event)
88 |             if len(self.recent_events) > self.max_recent_events:
89 |             pass
   |             ^^^^
90 |                 self.recent_events.pop(0)
   |

invalid-syntax: Unexpected indentation
  --> backend\advanced_security.py:90:1
   |
88 |             if len(self.recent_events) > self.max_recent_events:
89 |             pass
90 |                 self.recent_events.pop(0)
   | ^^^^^^^^^^^^^^^^
91 |
92 |             # Update statistics
   |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:100:13
    |
 99 |             if event.severity in [ThreatLevel.HIGH, ThreatLevel.CRITICAL]:
100 |             pass
    |             ^^^^
101 |                 self.event_stats["blocked_attempts"] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:101:1
    |
 99 |             if event.severity in [ThreatLevel.HIGH, ThreatLevel.CRITICAL]:
100 |             pass
101 |                 self.event_stats["blocked_attempts"] += 1
    | ^^^^^^^^^^^^^^^^
102 |
103 |             # Write to log file
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\advanced_security.py:105:13
    |
103 |             # Write to log file
104 |             with open(self.security_log_file, 'a', encoding='utf-8') as f:
105 |             pass
    |             ^^^^
106 |                 f.write(json.dumps(event.to_dict()) + '\n')
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:106:1
    |
104 |             with open(self.security_log_file, 'a', encoding='utf-8') as f:
105 |             pass
106 |                 f.write(json.dumps(event.to_dict()) + '\n')
    | ^^^^^^^^^^^^^^^^
107 |
108 |             # Log to system logger based on severity
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:109:13
    |
108 |             # Log to system logger based on severity
109 |             if event.severity == ThreatLevel.CRITICAL:
    |             ^
110 |             pass
111 |                 logger.critical(f"SECURITY CRITICAL: {event.description}")
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:110:13
    |
108 |             # Log to system logger based on severity
109 |             if event.severity == ThreatLevel.CRITICAL:
110 |             pass
    |             ^^^^
111 |                 logger.critical(f"SECURITY CRITICAL: {event.description}")
112 |             elif event.severity == ThreatLevel.HIGH:
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:111:1
    |
109 |             if event.severity == ThreatLevel.CRITICAL:
110 |             pass
111 |                 logger.critical(f"SECURITY CRITICAL: {event.description}")
    | ^^^^^^^^^^^^^^^^
112 |             elif event.severity == ThreatLevel.HIGH:
113 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:112:13
    |
110 |             pass
111 |                 logger.critical(f"SECURITY CRITICAL: {event.description}")
112 |             elif event.severity == ThreatLevel.HIGH:
    |             ^
113 |             pass
114 |                 logger.error(f"SECURITY HIGH: {event.description}")
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\advanced_security.py:112:18
    |
110 |             pass
111 |                 logger.critical(f"SECURITY CRITICAL: {event.description}")
112 |             elif event.severity == ThreatLevel.HIGH:
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
113 |             pass
114 |                 logger.error(f"SECURITY HIGH: {event.description}")
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:112:53
    |
110 |             pass
111 |                 logger.critical(f"SECURITY CRITICAL: {event.description}")
112 |             elif event.severity == ThreatLevel.HIGH:
    |                                                     ^
113 |             pass
114 |                 logger.error(f"SECURITY HIGH: {event.description}")
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:114:1
    |
112 |             elif event.severity == ThreatLevel.HIGH:
113 |             pass
114 |                 logger.error(f"SECURITY HIGH: {event.description}")
    | ^^^^^^^^^^^^^^^^
115 |             elif event.severity == ThreatLevel.MEDIUM:
116 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:115:13
    |
113 |             pass
114 |                 logger.error(f"SECURITY HIGH: {event.description}")
115 |             elif event.severity == ThreatLevel.MEDIUM:
    |             ^
116 |             pass
117 |                 logger.warning(f"SECURITY MEDIUM: {event.description}")
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\advanced_security.py:115:18
    |
113 |             pass
114 |                 logger.error(f"SECURITY HIGH: {event.description}")
115 |             elif event.severity == ThreatLevel.MEDIUM:
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
116 |             pass
117 |                 logger.warning(f"SECURITY MEDIUM: {event.description}")
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:115:55
    |
113 |             pass
114 |                 logger.error(f"SECURITY HIGH: {event.description}")
115 |             elif event.severity == ThreatLevel.MEDIUM:
    |                                                       ^
116 |             pass
117 |                 logger.warning(f"SECURITY MEDIUM: {event.description}")
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:117:1
    |
115 |             elif event.severity == ThreatLevel.MEDIUM:
116 |             pass
117 |                 logger.warning(f"SECURITY MEDIUM: {event.description}")
    | ^^^^^^^^^^^^^^^^
118 |             else:
119 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:118:13
    |
116 |             pass
117 |                 logger.warning(f"SECURITY MEDIUM: {event.description}")
118 |             else:
    |             ^
119 |             pass
120 |                 logger.info(f"SECURITY LOW: {event.description}")
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:118:17
    |
116 |             pass
117 |                 logger.warning(f"SECURITY MEDIUM: {event.description}")
118 |             else:
    |                 ^
119 |             pass
120 |                 logger.info(f"SECURITY LOW: {event.description}")
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:118:18
    |
116 |             pass
117 |                 logger.warning(f"SECURITY MEDIUM: {event.description}")
118 |             else:
    |                  ^
119 |             pass
120 |                 logger.info(f"SECURITY LOW: {event.description}")
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:120:1
    |
118 |             else:
119 |             pass
120 |                 logger.info(f"SECURITY LOW: {event.description}")
    | ^^^^^^^^^^^^^^^^
121 |
122 |         except Exception as e:
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:122:9
    |
120 |                 logger.info(f"SECURITY LOW: {event.description}")
121 |
122 |         except Exception as e:
    |         ^
123 |         pass
124 |             logger.error(f"Failed to log security event: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:122:26
    |
120 |                 logger.info(f"SECURITY LOW: {event.description}")
121 |
122 |         except Exception as e:
    |                          ^^
123 |         pass
124 |             logger.error(f"Failed to log security event: {e}")
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:122:31
    |
120 |                 logger.info(f"SECURITY LOW: {event.description}")
121 |
122 |         except Exception as e:
    |                               ^
123 |         pass
124 |             logger.error(f"Failed to log security event: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:124:1
    |
122 |         except Exception as e:
123 |         pass
124 |             logger.error(f"Failed to log security event: {e}")
    | ^^^^^^^^^^^^
125 |
126 |     def log_access_event(self, client_id: str, endpoint: str, method: str,
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:126:5
    |
124 |             logger.error(f"Failed to log security event: {e}")
125 |
126 |     def log_access_event(self, client_id: str, endpoint: str, method: str,
    |     ^
127 |                         status: int, user_agent: str = "", details: Dict = None):
128 |         """Log access event for audit trail"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\advanced_security.py:130:9
    |
128 |         """Log access event for audit trail"""
129 |         try:
130 |         pass
    |         ^^^^
131 |             access_event = {
132 |                 "timestamp": datetime.now().isoformat(),
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:131:1
    |
129 |         try:
130 |         pass
131 |             access_event = {
    | ^^^^^^^^^^^^
132 |                 "timestamp": datetime.now().isoformat(),
133 |                 "client_id": client_id,
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\advanced_security.py:142:13
    |
141 |             with open(self.access_log_file, 'a', encoding='utf-8') as f:
142 |             pass
    |             ^^^^
143 |                 f.write(json.dumps(access_event) + '\n')
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:143:1
    |
141 |             with open(self.access_log_file, 'a', encoding='utf-8') as f:
142 |             pass
143 |                 f.write(json.dumps(access_event) + '\n')
    | ^^^^^^^^^^^^^^^^
144 |
145 |         except Exception as e:
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:145:9
    |
143 |                 f.write(json.dumps(access_event) + '\n')
144 |
145 |         except Exception as e:
    |         ^
146 |         pass
147 |             logger.error(f"Failed to log access event: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:145:26
    |
143 |                 f.write(json.dumps(access_event) + '\n')
144 |
145 |         except Exception as e:
    |                          ^^
146 |         pass
147 |             logger.error(f"Failed to log access event: {e}")
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:145:31
    |
143 |                 f.write(json.dumps(access_event) + '\n')
144 |
145 |         except Exception as e:
    |                               ^
146 |         pass
147 |             logger.error(f"Failed to log access event: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:147:1
    |
145 |         except Exception as e:
146 |         pass
147 |             logger.error(f"Failed to log access event: {e}")
    | ^^^^^^^^^^^^
148 |
149 |     def get_recent_events(self, severity: Optional[ThreatLevel] = None,
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:149:5
    |
147 |             logger.error(f"Failed to log access event: {e}")
148 |
149 |     def get_recent_events(self, severity: Optional[ThreatLevel] = None,
    |     ^
150 |                         event_type: Optional[str] = None,
151 |                         limit: int = 100) -> List[Dict]:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:156:9
    |
155 |         if severity:
156 |         pass
    |         ^^^^
157 |             events = [e for e in events if e.severity == severity]
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:157:1
    |
155 |         if severity:
156 |         pass
157 |             events = [e for e in events if e.severity == severity]
    | ^^^^^^^^^^^^
158 |
159 |         if event_type:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:160:9
    |
159 |         if event_type:
160 |         pass
    |         ^^^^
161 |             events = [e for e in events if e.event_type == event_type]
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:161:1
    |
159 |         if event_type:
160 |         pass
161 |             events = [e for e in events if e.event_type == event_type]
    | ^^^^^^^^^^^^
162 |
163 |         # Sort by timestamp (most recent first)
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:164:9
    |
163 |         # Sort by timestamp (most recent first)
164 |         events = sorted(events, key=lambda x: x.timestamp, reverse=True)
    |         ^
165 |
166 |         return [e.to_dict() for e in events[:limit]]
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:168:5
    |
166 |         return [e.to_dict() for e in events[:limit]]
167 |
168 |     def get_security_summary(self) -> Dict[str, Any]:
    |     ^
169 |         """Get security monitoring summary"""
170 |         recent_events = [e for e in self.recent_events
    |

E501 Line too long (89 > 88)
   --> backend\advanced_security.py:180:89
    |
178 |             "high_severity_events_24h": len(high_severity_events),
179 |             "event_statistics": self.event_stats.copy(),
180 |             "recent_threat_types": list(set(e.event_type for e in high_severity_events)),
    |                                                                                         ^
181 |             "monitoring_active": True
182 |         }
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:184:1
    |
182 |         }
183 |
184 | class AdvancedInputValidator:
    | ^
185 |     """Advanced input validation and sanitization"""
    |

E501 Line too long (98 > 88)
   --> backend\advanced_security.py:231:89
    |
229 |             "xss": [re.compile(p, re.IGNORECASE) for p in self.xss_patterns],
230 |             "command": [re.compile(p, re.IGNORECASE) for p in self.command_patterns],
231 |             "path_traversal": [re.compile(p, re.IGNORECASE) for p in self.path_traversal_patterns]
    |                                                                                         ^^^^^^^^^^
232 |         }
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:237:9
    |
235 |         """Detect security threats in input text"""
236 |         if not input_text:
237 |         pass
    |         ^^^^
238 |             return []
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:238:1
    |
236 |         if not input_text:
237 |         pass
238 |             return []
    | ^^^^^^^^^^^^
239 |
240 |         threats = []
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\advanced_security.py:243:9
    |
242 |         for threat_type, patterns in self.compiled_patterns.items():
243 |         pass
    |         ^^^^
244 |             for pattern in patterns:
245 |                 if pattern.search(input_text):
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:244:1
    |
242 |         for threat_type, patterns in self.compiled_patterns.items():
243 |         pass
244 |             for pattern in patterns:
    | ^^^^^^^^^^^^
245 |                 if pattern.search(input_text):
246 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:245:47
    |
243 |         pass
244 |             for pattern in patterns:
245 |                 if pattern.search(input_text):
    |                                               ^
246 |             pass
247 |                     threats.append((threat_type, pattern.pattern))
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:247:1
    |
245 |                 if pattern.search(input_text):
246 |             pass
247 |                     threats.append((threat_type, pattern.pattern))
    | ^^^^^^^^^^^^^^^^^^^^
248 |
249 |         return threats
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:249:9
    |
247 |                     threats.append((threat_type, pattern.pattern))
248 |
249 |         return threats
    |         ^
250 |
251 |     def sanitize_input(self, input_str: str, max_length: int = 10000,
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:251:5
    |
249 |         return threats
250 |
251 |     def sanitize_input(self, input_str: str, max_length: int = 10000,
    |     ^
252 |                     html_escape: bool = True) -> str:
253 |         """Advanced input sanitization"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:255:9
    |
253 |         """Advanced input sanitization"""
254 |         if not isinstance(input_str, str):
255 |         pass
    |         ^^^^
256 |             return ""
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:256:1
    |
254 |         if not isinstance(input_str, str):
255 |         pass
256 |             return ""
    | ^^^^^^^^^^^^
257 |
258 |         # Truncate to max length
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:267:9
    |
265 |         # HTML escape if requested
266 |         if html_escape:
267 |         pass
    |         ^^^^
268 |             sanitized = html.escape(sanitized)
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:268:1
    |
266 |         if html_escape:
267 |         pass
268 |             sanitized = html.escape(sanitized)
    | ^^^^^^^^^^^^
269 |
270 |         # URL decode to prevent double encoding attacks
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:271:9
    |
270 |         # URL decode to prevent double encoding attacks
271 |         try:
    |         ^
272 |         pass
273 |             sanitized = urllib.parse.unquote(sanitized)
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\advanced_security.py:272:9
    |
270 |         # URL decode to prevent double encoding attacks
271 |         try:
272 |         pass
    |         ^^^^
273 |             sanitized = urllib.parse.unquote(sanitized)
274 |         except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:273:1
    |
271 |         try:
272 |         pass
273 |             sanitized = urllib.parse.unquote(sanitized)
    | ^^^^^^^^^^^^
274 |         except Exception:
275 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:274:9
    |
272 |         pass
273 |             sanitized = urllib.parse.unquote(sanitized)
274 |         except Exception:
    |         ^
275 |         pass
276 |             pass  # Keep original if decoding fails
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:274:26
    |
272 |         pass
273 |             sanitized = urllib.parse.unquote(sanitized)
274 |         except Exception:
    |                          ^
275 |         pass
276 |             pass  # Keep original if decoding fails
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:276:1
    |
274 |         except Exception:
275 |         pass
276 |             pass  # Keep original if decoding fails
    | ^^^^^^^^^^^^
277 |
278 |         return sanitized.strip()
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:278:9
    |
276 |             pass  # Keep original if decoding fails
277 |
278 |         return sanitized.strip()
    |         ^
279 |
280 |     def validate_json_input(self, json_str: str, max_depth: int = 10,
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:280:5
    |
278 |         return sanitized.strip()
279 |
280 |     def validate_json_input(self, json_str: str, max_depth: int = 10,
    |     ^
281 |                         max_keys: int = 100) -> tuple[bool, Optional[Dict]]:
282 |         """Validate JSON input with security checks"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\advanced_security.py:284:9
    |
282 |         """Validate JSON input with security checks"""
283 |         try:
284 |         pass
    |         ^^^^
285 |             # Parse JSON
286 |             data = json.loads(json_str)
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:286:1
    |
284 |         pass
285 |             # Parse JSON
286 |             data = json.loads(json_str)
    | ^^^^^^^^^^^^
287 |
288 |             # Check structure depth and complexity
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:290:13
    |
288 |             # Check structure depth and complexity
289 |             if not self._check_json_complexity(data, max_depth, max_keys):
290 |             pass
    |             ^^^^
291 |                 return False, None
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:291:1
    |
289 |             if not self._check_json_complexity(data, max_depth, max_keys):
290 |             pass
291 |                 return False, None
    | ^^^^^^^^^^^^^^^^
292 |
293 |             # Check for threats in string values
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:295:13
    |
293 |             # Check for threats in string values
294 |             if not self._validate_json_content(data):
295 |             pass
    |             ^^^^
296 |                 return False, None
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:296:1
    |
294 |             if not self._validate_json_content(data):
295 |             pass
296 |                 return False, None
    | ^^^^^^^^^^^^^^^^
297 |
298 |             return True, data
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:298:13
    |
296 |                 return False, None
297 |
298 |             return True, data
    |             ^
299 |
300 |         except json.JSONDecodeError:
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:300:9
    |
298 |             return True, data
299 |
300 |         except json.JSONDecodeError:
    |         ^
301 |         pass
302 |             return False, None
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:300:37
    |
298 |             return True, data
299 |
300 |         except json.JSONDecodeError:
    |                                     ^
301 |         pass
302 |             return False, None
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:302:1
    |
300 |         except json.JSONDecodeError:
301 |         pass
302 |             return False, None
    | ^^^^^^^^^^^^
303 |
304 |     def _check_json_complexity(self, obj: Any, max_depth: int, max_keys: int,
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:304:5
    |
302 |             return False, None
303 |
304 |     def _check_json_complexity(self, obj: Any, max_depth: int, max_keys: int,
    |     ^
305 |                             current_depth: int = 0) -> bool:
306 |         """Check JSON structure complexity"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:308:9
    |
306 |         """Check JSON structure complexity"""
307 |         if current_depth > max_depth:
308 |         pass
    |         ^^^^
309 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:309:1
    |
307 |         if current_depth > max_depth:
308 |         pass
309 |             return False
    | ^^^^^^^^^^^^
310 |
311 |         if isinstance(obj, dict):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:312:9
    |
311 |         if isinstance(obj, dict):
312 |         pass
    |         ^^^^
313 |             if len(obj) > max_keys:
314 |                 return False
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:313:1
    |
311 |         if isinstance(obj, dict):
312 |         pass
313 |             if len(obj) > max_keys:
    | ^^^^^^^^^^^^
314 |                 return False
315 |             return all(self._check_json_complexity(v, max_depth, max_keys, current_depth + 1)
    |

E501 Line too long (93 > 88)
   --> backend\advanced_security.py:315:89
    |
313 |             if len(obj) > max_keys:
314 |                 return False
315 |             return all(self._check_json_complexity(v, max_depth, max_keys, current_depth + 1)
    |                                                                                         ^^^^^
316 |                     for v in obj.values())
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:318:9
    |
316 |                     for v in obj.values())
317 |
318 |         elif isinstance(obj, list):
    |         ^
319 |         pass
320 |             if len(obj) > max_keys:
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\advanced_security.py:318:14
    |
316 |                     for v in obj.values())
317 |
318 |         elif isinstance(obj, list):
    |              ^^^^^^^^^^^^^^^^^^^^^
319 |         pass
320 |             if len(obj) > max_keys:
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:318:36
    |
316 |                     for v in obj.values())
317 |
318 |         elif isinstance(obj, list):
    |                                    ^
319 |         pass
320 |             if len(obj) > max_keys:
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:320:1
    |
318 |         elif isinstance(obj, list):
319 |         pass
320 |             if len(obj) > max_keys:
    | ^^^^^^^^^^^^
321 |                 return False
322 |             return all(self._check_json_complexity(item, max_depth, max_keys, current_depth + 1)
    |

E501 Line too long (96 > 88)
   --> backend\advanced_security.py:322:89
    |
320 |             if len(obj) > max_keys:
321 |                 return False
322 |             return all(self._check_json_complexity(item, max_depth, max_keys, current_depth + 1)
    |                                                                                         ^^^^^^^^
323 |                     for item in obj)
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:325:9
    |
323 |                     for item in obj)
324 |
325 |         return True
    |         ^
326 |
327 |     def _validate_json_content(self, obj: Any) -> bool:
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:327:5
    |
325 |         return True
326 |
327 |     def _validate_json_content(self, obj: Any) -> bool:
    |     ^
328 |         """Validate JSON content for security threats"""
329 |         if isinstance(obj, str):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:330:9
    |
328 |         """Validate JSON content for security threats"""
329 |         if isinstance(obj, str):
330 |         pass
    |         ^^^^
331 |             threats = self.detect_threats(obj)
332 |             return len(threats) == 0
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:331:1
    |
329 |         if isinstance(obj, str):
330 |         pass
331 |             threats = self.detect_threats(obj)
    | ^^^^^^^^^^^^
332 |             return len(threats) == 0
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:334:9
    |
332 |             return len(threats) == 0
333 |
334 |         elif isinstance(obj, dict):
    |         ^^^^
335 |         pass
336 |             return all(self._validate_json_content(v) for v in obj.values())
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\advanced_security.py:334:14
    |
332 |             return len(threats) == 0
333 |
334 |         elif isinstance(obj, dict):
    |              ^^^^^^^^^^^^^^^^^^^^^
335 |         pass
336 |             return all(self._validate_json_content(v) for v in obj.values())
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:334:36
    |
332 |             return len(threats) == 0
333 |
334 |         elif isinstance(obj, dict):
    |                                    ^
335 |         pass
336 |             return all(self._validate_json_content(v) for v in obj.values())
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:336:1
    |
334 |         elif isinstance(obj, dict):
335 |         pass
336 |             return all(self._validate_json_content(v) for v in obj.values())
    | ^^^^^^^^^^^^
337 |
338 |         elif isinstance(obj, list):
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:338:9
    |
336 |             return all(self._validate_json_content(v) for v in obj.values())
337 |
338 |         elif isinstance(obj, list):
    |         ^
339 |         pass
340 |             return all(self._validate_json_content(item) for item in obj)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\advanced_security.py:338:14
    |
336 |             return all(self._validate_json_content(v) for v in obj.values())
337 |
338 |         elif isinstance(obj, list):
    |              ^^^^^^^^^^^^^^^^^^^^^
339 |         pass
340 |             return all(self._validate_json_content(item) for item in obj)
    |

invalid-syntax: Expected an expression
   --> backend\advanced_security.py:338:36
    |
336 |             return all(self._validate_json_content(v) for v in obj.values())
337 |
338 |         elif isinstance(obj, list):
    |                                    ^
339 |         pass
340 |             return all(self._validate_json_content(item) for item in obj)
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:340:1
    |
338 |         elif isinstance(obj, list):
339 |         pass
340 |             return all(self._validate_json_content(item) for item in obj)
    | ^^^^^^^^^^^^
341 |
342 |         return True
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:342:9
    |
340 |             return all(self._validate_json_content(item) for item in obj)
341 |
342 |         return True
    |         ^
343 |
344 | class ComplianceManager:
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:344:1
    |
342 |         return True
343 |
344 | class ComplianceManager:
    | ^
345 |     pass
346 |     """GDPR and SOC2 compliance management"""
    |

E501 Line too long (91 > 88)
   --> backend\advanced_security.py:350:89
    |
348 |     def __init__(self, audit_logger: AuditLogger):
349 |         self.audit_logger = audit_logger
350 |         self.data_retention_days = int(os.getenv("DATA_RETENTION_DAYS", "2555"))  # 7 years
    |                                                                                         ^^^
351 |         self.gdpr_enabled = os.getenv("GDPR_COMPLIANCE", "true").lower() == "true"
352 |         self.soc2_enabled = os.getenv("SOC2_COMPLIANCE", "true").lower() == "true"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:358:9
    |
356 |         """Log data access for GDPR compliance"""
357 |         if self.gdpr_enabled:
358 |         pass
    |         ^^^^
359 |             event = SecurityEvent(
360 |                 event_type="data_access",
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:359:1
    |
357 |         if self.gdpr_enabled:
358 |         pass
359 |             event = SecurityEvent(
    | ^^^^^^^^^^^^
360 |                 event_type="data_access",
361 |                 severity=ThreatLevel.LOW,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:378:9
    |
376 |         """Handle GDPR right to be forgotten request"""
377 |         if not self.gdpr_enabled:
378 |         pass
    |         ^^^^
379 |             return {"status": "gdpr_not_enabled"}
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:379:1
    |
377 |         if not self.gdpr_enabled:
378 |         pass
379 |             return {"status": "gdpr_not_enabled"}
    | ^^^^^^^^^^^^
380 |
381 |         # Log the deletion request
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:402:5
    |
400 |         }
401 |
402 |     def generate_compliance_report(self) -> Dict[str, Any]:
    |     ^
403 |         """Generate compliance status report"""
404 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:422:1
    |
420 |         }
421 |
422 | class SecurityConfig:
    | ^
423 |     pass
424 |     """Enhanced security configuration settings"""
    |

E501 Line too long (95 > 88)
   --> backend\advanced_security.py:444:89
    |
443 |         # Security monitoring settings
444 |         self.enable_audit_logging = os.getenv("ENABLE_AUDIT_LOGGING", "true").lower() == "true"
    |                                                                                         ^^^^^^^
445 |         self.enable_threat_detection = os.getenv("ENABLE_THREAT_DETECTION", "true").lower() == "true"
446 |         self.log_retention_days = int(os.getenv("LOG_RETENTION_DAYS", "90"))
    |

E501 Line too long (101 > 88)
   --> backend\advanced_security.py:445:89
    |
443 |         # Security monitoring settings
444 |         self.enable_audit_logging = os.getenv("ENABLE_AUDIT_LOGGING", "true").lower() == "true"
445 |         self.enable_threat_detection = os.getenv("ENABLE_THREAT_DETECTION", "true").lower() == "true"
    |                                                                                         ^^^^^^^^^^^^^
446 |         self.log_retention_days = int(os.getenv("LOG_RETENTION_DAYS", "90"))
    |

E501 Line too long (97 > 88)
   --> backend\advanced_security.py:450:89
    |
448 |         # Initialize components
449 |         self.audit_logger = AuditLogger() if self.enable_audit_logging else None
450 |         self.input_validator = AdvancedInputValidator() if self.enable_threat_detection else None
    |                                                                                         ^^^^^^^^^
451 |         self.compliance_manager = ComplianceManager(self.audit_logger) if self.audit_logger else None
    |

E501 Line too long (101 > 88)
   --> backend\advanced_security.py:451:89
    |
449 |         self.audit_logger = AuditLogger() if self.enable_audit_logging else None
450 |         self.input_validator = AdvancedInputValidator() if self.enable_threat_detection else None
451 |         self.compliance_manager = ComplianceManager(self.audit_logger) if self.audit_logger else None
    |                                                                                         ^^^^^^^^^^^^^
452 |
453 |     def is_allowed_file_type(self, filename: str) -> bool:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:456:9
    |
454 |         """Check if file type is allowed."""
455 |         if not filename or '.' not in filename:
456 |         pass
    |         ^^^^
457 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:457:1
    |
455 |         if not filename or '.' not in filename:
456 |         pass
457 |             return False
    | ^^^^^^^^^^^^
458 |
459 |         ext = '.' + filename.split('.')[-1].lower()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:463:9
    |
461 |         # Check blocked extensions first
462 |         if ext in self.blocked_extensions:
463 |         pass
    |         ^^^^
464 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:464:1
    |
462 |         if ext in self.blocked_extensions:
463 |         pass
464 |             return False
    | ^^^^^^^^^^^^
465 |
466 |         # Check allowed extensions
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:469:5
    |
467 |         return ext in self.allowed_file_extensions
468 |
469 |     def validate_and_sanitize_input(self, input_data: str, source: str = "unknown") -> tuple[bool, str]:
    |     ^
470 |         """Validate and sanitize input with threat detection"""
471 |         if not self.input_validator:
    |

E501 Line too long (104 > 88)
   --> backend\advanced_security.py:469:89
    |
467 |         return ext in self.allowed_file_extensions
468 |
469 |     def validate_and_sanitize_input(self, input_data: str, source: str = "unknown") -> tuple[bool, str]:
    |                                                                                         ^^^^^^^^^^^^^^^^
470 |         """Validate and sanitize input with threat detection"""
471 |         if not self.input_validator:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:472:9
    |
470 |         """Validate and sanitize input with threat detection"""
471 |         if not self.input_validator:
472 |         pass
    |         ^^^^
473 |             return True, input_data
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:473:1
    |
471 |         if not self.input_validator:
472 |         pass
473 |             return True, input_data
    | ^^^^^^^^^^^^
474 |
475 |         # Detect threats
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:479:9
    |
478 |         if threats and self.audit_logger:
479 |         pass
    |         ^^^^
480 |             # Log security event
481 |             event = SecurityEvent(
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:481:1
    |
479 |         pass
480 |             # Log security event
481 |             event = SecurityEvent(
    | ^^^^^^^^^^^^
482 |                 event_type="input_threat_detected",
483 |                 severity=ThreatLevel.HIGH,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:493:13
    |
491 |             high_risk_threats = [t for t in threats if t[0] in ["sql", "command"]]
492 |             if high_risk_threats:
493 |             pass
    |             ^^^^
494 |                 return False, ""
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:494:1
    |
492 |             if high_risk_threats:
493 |             pass
494 |                 return False, ""
    | ^^^^^^^^^^^^^^^^
495 |
496 |         # Sanitize input
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:497:9
    |
496 |         # Sanitize input
497 |         sanitized = self.input_validator.sanitize_input(input_data)
    |         ^
498 |         return True, sanitized
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:500:5
    |
498 |         return True, sanitized
499 |
500 |     def log_security_event(self, event_type: str, severity: ThreatLevel,
    |     ^
501 |                         source: str, description: str, details: Dict = None):
502 |         """Log a security event"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:504:9
    |
502 |         """Log a security event"""
503 |         if self.audit_logger:
504 |         pass
    |         ^^^^
505 |             event = SecurityEvent(event_type, severity, source, description, details)
506 |             self.audit_logger.log_security_event(event)
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:505:1
    |
503 |         if self.audit_logger:
504 |         pass
505 |             event = SecurityEvent(event_type, severity, source, description, details)
    | ^^^^^^^^^^^^
506 |             self.audit_logger.log_security_event(event)
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:508:5
    |
506 |             self.audit_logger.log_security_event(event)
507 |
508 |     def log_access_event(self, client_id: str, endpoint: str, method: str,
    |     ^
509 |                         status: int, user_agent: str = "", details: Dict = None):
510 |         """Log access event"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:512:9
    |
510 |         """Log access event"""
511 |         if self.audit_logger:
512 |         pass
    |         ^^^^
513 |             self.audit_logger.log_access_event(client_id, endpoint, method, status, user_agent, details)
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:513:1
    |
511 |         if self.audit_logger:
512 |         pass
513 |             self.audit_logger.log_access_event(client_id, endpoint, method, status, user_agent, details)
    | ^^^^^^^^^^^^
514 |
515 |     def get_security_status(self) -> Dict[str, Any]:
    |

E501 Line too long (104 > 88)
   --> backend\advanced_security.py:513:89
    |
511 |         if self.audit_logger:
512 |         pass
513 |             self.audit_logger.log_access_event(client_id, endpoint, method, status, user_agent, details)
    |                                                                                         ^^^^^^^^^^^^^^^^
514 |
515 |     def get_security_status(self) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:515:5
    |
513 |             self.audit_logger.log_access_event(client_id, endpoint, method, status, user_agent, details)
514 |
515 |     def get_security_status(self) -> Dict[str, Any]:
    |     ^
516 |         """Get comprehensive security status"""
517 |         status = {
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:527:9
    |
526 |         if self.audit_logger:
527 |         pass
    |         ^^^^
528 |             status["security_summary"] = self.audit_logger.get_security_summary()
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:528:1
    |
526 |         if self.audit_logger:
527 |         pass
528 |             status["security_summary"] = self.audit_logger.get_security_summary()
    | ^^^^^^^^^^^^
529 |
530 |         if self.compliance_manager:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\advanced_security.py:531:9
    |
530 |         if self.compliance_manager:
531 |         pass
    |         ^^^^
532 |             status["compliance"] = self.compliance_manager.generate_compliance_report()
    |

invalid-syntax: Unexpected indentation
   --> backend\advanced_security.py:532:1
    |
530 |         if self.compliance_manager:
531 |         pass
532 |             status["compliance"] = self.compliance_manager.generate_compliance_report()
    | ^^^^^^^^^^^^
533 |
534 |         return status
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:534:9
    |
532 |             status["compliance"] = self.compliance_manager.generate_compliance_report()
533 |
534 |         return status
    |         ^
535 |
536 | # Global security config instance
    |

invalid-syntax: Expected a statement
   --> backend\advanced_security.py:537:1
    |
536 | # Global security config instance
537 | advanced_security_config = SecurityConfig()
    | ^
538 |
539 | def get_advanced_security_config() -> SecurityConfig:
    |

E501 Line too long (93 > 88)
   --> backend\advanced_security.py:548:89
    |
546 |     if advanced_security_config.input_validator:
547 |         pass
548 |         return advanced_security_config.input_validator.sanitize_input(input_str, max_length)
    |                                                                                         ^^^^^
549 |
550 |     # Fallback basic sanitization
    |

E501 Line too long (99 > 88)
   --> backend\advanced_security.py:563:89
    |
561 |                     source: str, description: str, details: Dict = None):
562 |     """Log security event using global config"""
563 |     advanced_security_config.log_security_event(event_type, severity, source, description, details)
    |                                                                                         ^^^^^^^^^^^
564 |
565 | def validate_input_security(input_data: str, source: str = "api") -> tuple[bool, str]:
    |

E501 Line too long (104 > 88)
   --> backend\advanced_security.py:573:89
    |
571 |     if advanced_security_config.compliance_manager:
572 |         pass
573 |         advanced_security_config.compliance_manager.log_data_access(user_id, data_type, action, purpose)
    |                                                                                         ^^^^^^^^^^^^^^^^
    |

E501 Line too long (90 > 88)
  --> backend\backend.py:22:89
   |
20 | from .deps import ensure_minimal_dependencies, optional_ml_hint
21 | from .embeddings import EmbeddingsManager
22 | from .file_validation import validate_base64_audio, validate_pdf_path, FileValidationError
   |                                                                                         ^^
23 | from .indexing import IndexingService, VaultIndexer
24 | from .modelmanager import ModelManager
   |

invalid-syntax: Expected one or more symbol names after import
  --> backend\backend.py:25:27
   |
23 | from .indexing import IndexingService, VaultIndexer
24 | from .modelmanager import ModelManager
25 | from .performance import (
   |                           ^
26 | from .settings import get_settings, reload_settings, update_settings
27 | from .utils import redact_data
   |

E501 Line too long (92 > 88)
  --> backend\backend.py:30:89
   |
28 | from .openspec_governance import get_openspec_governance
29 | from .csrf_middleware import CSRFMiddleware
30 | from .advanced_security import get_advanced_security_config, log_security_event, ThreatLevel
   |                                                                                         ^^^^
31 |
32 |     PerformanceMonitor,
   |

invalid-syntax: Unexpected indentation
  --> backend\backend.py:32:1
   |
30 | from .advanced_security import get_advanced_security_config, log_security_event, ThreatLevel
31 |
32 |     PerformanceMonitor,
   | ^^^^
33 |     cached,
34 |     get_cache_manager,
   |

invalid-syntax: Expected a statement
  --> backend\backend.py:37:1
   |
35 |     get_connection_pool,
36 |     get_task_queue
37 | )
   | ^
38 |
39 | # backend/backend.py
   |

invalid-syntax: Expected a statement
  --> backend\backend.py:37:2
   |
35 |     get_connection_pool,
36 |     get_task_queue
37 | )
   |  ^
38 |
39 | # backend/backend.py
   |

E501 Line too long (94 > 88)
  --> backend\backend.py:66:89
   |
64 | _security_dependency = Depends(security)
65 |
66 | def get_current_user(credentials: HTTPAuthorizationCredentials | None = _security_dependency):
   |                                                                                         ^^^^^^
67 |     # Example: decode JWT and extract user info
68 |     # In production, validate token, check expiry, etc.
   |

E501 Line too long (93 > 88)
  --> backend\backend.py:76:89
   |
74 |     if credentials is None:
75 |         pass
76 |         raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Missing token")
   |                                                                                         ^^^^^
77 |
78 |     token = credentials.credentials
   |

E501 Line too long (93 > 88)
  --> backend\backend.py:82:89
   |
80 |     if not token:
81 |         pass
82 |         raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Missing token")
   |                                                                                         ^^^^^
83 |     # TODO: Replace with real JWT decoding and role extraction
84 |     user = {"username": "demo", "roles": ["user"]}
   |

E501 Line too long (91 > 88)
  --> backend\backend.py:90:89
   |
88 |     user_dep = Depends(get_current_user)
89 |     def role_checker(user: dict = user_dep):
90 |             # In test mode, bypass role checks entirely to keep integration tests unblocked
   |                                                                                         ^^^
91 |         if _is_test_mode():
92 |         pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\backend.py:92:9
   |
90 |             # In test mode, bypass role checks entirely to keep integration tests unblocked
91 |         if _is_test_mode():
92 |         pass
   |         ^^^^
93 |             return user
94 |         if role not in user["roles"]:
   |

invalid-syntax: Unexpected indentation
  --> backend\backend.py:93:1
   |
91 |         if _is_test_mode():
92 |         pass
93 |             return user
   | ^^^^^^^^^^^^
94 |         if role not in user["roles"]:
95 |         pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\backend.py:95:9
   |
93 |             return user
94 |         if role not in user["roles"]:
95 |         pass
   |         ^^^^
96 |             raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f"Requires role: {role}")
97 |         return user
   |

invalid-syntax: Unexpected indentation
  --> backend\backend.py:96:1
   |
94 |         if role not in user["roles"]:
95 |         pass
96 |             raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f"Requires role: {role}")
   | ^^^^^^^^^^^^
97 |         return user
98 |     return role_checker
   |

E501 Line too long (103 > 88)
  --> backend\backend.py:96:89
   |
94 |         if role not in user["roles"]:
95 |         pass
96 |             raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f"Requires role: {role}")
   |                                                                                         ^^^^^^^^^^^^^^^
97 |         return user
98 |     return role_checker
   |

invalid-syntax: Expected a statement
   --> backend\backend.py:98:5
    |
 96 |             raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail=f"Requires role: {role}")
 97 |         return user
 98 |     return role_checker
    |     ^
 99 |
100 | # Rate limiting middleware
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:101:1
    |
100 | # Rate limiting middleware
101 | try:
    | ^
102 |     pass
103 |     from .rate_limiting import create_rate_limit_middleware
    |

E501 Line too long (98 > 88)
   --> backend\backend.py:116:89
    |
114 |     Priority:
115 |     1) EXTERNAL_ENV_FILE environment variable points to a file
116 |     2) Default path under the user's DEV folder: %USERPROFILE%/DEV/obsidian-llm-assistant/venv.txt
    |                                                                                         ^^^^^^^^^^
117 |
118 |     Supported formats inside the file:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:131:9
    |
129 |         path = os.environ.get("EXTERNAL_ENV_FILE")
130 |         if not path:
131 |         pass
    |         ^^^^
132 |             user_root = os.path.expanduser("~")
133 |             default_path = (
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:132:1
    |
130 |         if not path:
131 |         pass
132 |             user_root = os.path.expanduser("~")
    | ^^^^^^^^^^^^
133 |             default_path = (
134 |                 Path(user_root) / "DEV" / "obsidian-llm-assistant" / "venv.txt"
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:138:9
    |
136 |             path = str(default_path)
137 |
138 |         p = Path(path)
    |         ^
139 |         if not p.exists():
140 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:140:9
    |
138 |         p = Path(path)
139 |         if not p.exists():
140 |         pass
    |         ^^^^
141 |             return
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:141:1
    |
139 |         if not p.exists():
140 |         pass
141 |             return
    | ^^^^^^^^^^^^
142 |
143 |         # Read lines and apply
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:146:9
    |
144 |         content = p.read_text(encoding="utf-8").strip()
145 |         if not content:
146 |         pass
    |         ^^^^
147 |             return
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:147:1
    |
145 |         if not content:
146 |         pass
147 |             return
    | ^^^^^^^^^^^^
148 |
149 |         if "\n" not in content and "=" not in content:
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:149:9
    |
147 |             return
148 |
149 |         if "\n" not in content and "=" not in content:
    |         ^
150 |         pass
151 |             # Single token � set both names if not already set
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:150:9
    |
149 |         if "\n" not in content and "=" not in content:
150 |         pass
    |         ^^^^
151 |             # Single token � set both names if not already set
152 |             if not os.environ.get("HF_TOKEN"):
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:152:1
    |
150 |         pass
151 |             # Single token � set both names if not already set
152 |             if not os.environ.get("HF_TOKEN"):
    | ^^^^^^^^^^^^
153 |             pass
154 |                 os.environ["HF_TOKEN"] = content
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:153:13
    |
151 |             # Single token � set both names if not already set
152 |             if not os.environ.get("HF_TOKEN"):
153 |             pass
    |             ^^^^
154 |                 os.environ["HF_TOKEN"] = content
155 |             if not os.environ.get("HUGGINGFACE_TOKEN"):
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:154:1
    |
152 |             if not os.environ.get("HF_TOKEN"):
153 |             pass
154 |                 os.environ["HF_TOKEN"] = content
    | ^^^^^^^^^^^^^^^^
155 |             if not os.environ.get("HUGGINGFACE_TOKEN"):
156 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:155:13
    |
153 |             pass
154 |                 os.environ["HF_TOKEN"] = content
155 |             if not os.environ.get("HUGGINGFACE_TOKEN"):
    |             ^
156 |             pass
157 |                 os.environ["HUGGINGFACE_TOKEN"] = content
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:156:13
    |
154 |                 os.environ["HF_TOKEN"] = content
155 |             if not os.environ.get("HUGGINGFACE_TOKEN"):
156 |             pass
    |             ^^^^
157 |                 os.environ["HUGGINGFACE_TOKEN"] = content
158 |             return
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:157:1
    |
155 |             if not os.environ.get("HUGGINGFACE_TOKEN"):
156 |             pass
157 |                 os.environ["HUGGINGFACE_TOKEN"] = content
    | ^^^^^^^^^^^^^^^^
158 |             return
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:158:13
    |
156 |             pass
157 |                 os.environ["HUGGINGFACE_TOKEN"] = content
158 |             return
    |             ^
159 |
160 |         # Parse KEY=VALUE lines
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:161:9
    |
160 |         # Parse KEY=VALUE lines
161 |         for line in content.splitlines():
    |         ^
162 |         pass
163 |             line = line.strip()
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\backend.py:162:9
    |
160 |         # Parse KEY=VALUE lines
161 |         for line in content.splitlines():
162 |         pass
    |         ^^^^
163 |             line = line.strip()
164 |             if not line or line.startswith("#"):
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:163:1
    |
161 |         for line in content.splitlines():
162 |         pass
163 |             line = line.strip()
    | ^^^^^^^^^^^^
164 |             if not line or line.startswith("#"):
165 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:165:13
    |
163 |             line = line.strip()
164 |             if not line or line.startswith("#"):
165 |             pass
    |             ^^^^
166 |                 continue
167 |             if "=" in line:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:166:1
    |
164 |             if not line or line.startswith("#"):
165 |             pass
166 |                 continue
    | ^^^^^^^^^^^^^^^^
167 |             if "=" in line:
168 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:167:13
    |
165 |             pass
166 |                 continue
167 |             if "=" in line:
    |             ^
168 |             pass
169 |                 k, v = line.split("=", 1)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:168:13
    |
166 |                 continue
167 |             if "=" in line:
168 |             pass
    |             ^^^^
169 |                 k, v = line.split("=", 1)
170 |                 k = k.strip()
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:169:1
    |
167 |             if "=" in line:
168 |             pass
169 |                 k, v = line.split("=", 1)
    | ^^^^^^^^^^^^^^^^
170 |                 k = k.strip()
171 |                 v = v.strip().strip('"').strip("'")
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:173:54
    |
171 |                 v = v.strip().strip('"').strip("'")
172 |                 # Only set if not already present in process env
173 |                 if k and v and not os.environ.get(k):
    |                                                      ^
174 |             pass
175 |                     os.environ[k] = v
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:174:13
    |
172 |                 # Only set if not already present in process env
173 |                 if k and v and not os.environ.get(k):
174 |             pass
    |             ^
175 |                     os.environ[k] = v
176 |         # Ensure aliasing
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:175:1
    |
173 |                 if k and v and not os.environ.get(k):
174 |             pass
175 |                     os.environ[k] = v
    | ^^^^^^^^^^^^^^^^^^^^
176 |         # Ensure aliasing
177 |         tok = os.environ.get("HF_TOKEN") or os.environ.get("HUGGINGFACE_TOKEN")
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:177:9
    |
175 |                     os.environ[k] = v
176 |         # Ensure aliasing
177 |         tok = os.environ.get("HF_TOKEN") or os.environ.get("HUGGINGFACE_TOKEN")
    |         ^
178 |         if tok:
179 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:179:9
    |
177 |         tok = os.environ.get("HF_TOKEN") or os.environ.get("HUGGINGFACE_TOKEN")
178 |         if tok:
179 |         pass
    |         ^^^^
180 |             os.environ.setdefault("HF_TOKEN", tok)
181 |             os.environ.setdefault("HUGGINGFACE_TOKEN", tok)
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:180:1
    |
178 |         if tok:
179 |         pass
180 |             os.environ.setdefault("HF_TOKEN", tok)
    | ^^^^^^^^^^^^
181 |             os.environ.setdefault("HUGGINGFACE_TOKEN", tok)
182 |     except Exception as e:
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:182:5
    |
180 |             os.environ.setdefault("HF_TOKEN", tok)
181 |             os.environ.setdefault("HUGGINGFACE_TOKEN", tok)
182 |     except Exception as e:
    |     ^
183 |         pass
184 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:182:22
    |
180 |             os.environ.setdefault("HF_TOKEN", tok)
181 |             os.environ.setdefault("HUGGINGFACE_TOKEN", tok)
182 |     except Exception as e:
    |                      ^^
183 |         pass
184 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:182:27
    |
180 |             os.environ.setdefault("HF_TOKEN", tok)
181 |             os.environ.setdefault("HUGGINGFACE_TOKEN", tok)
182 |     except Exception as e:
    |                           ^
183 |         pass
184 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:183:1
    |
181 |             os.environ.setdefault("HUGGINGFACE_TOKEN", tok)
182 |     except Exception as e:
183 |         pass
    | ^^^^^^^^
184 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:187:1
    |
186 | # Global flag to track background queue initialization
187 | _background_queue_started = False
    | ^
188 |
189 | # Enterprise imports
    |

E501 Line too long (90 > 88)
   --> backend\backend.py:205:89
    |
203 |     if not ensure_minimal_dependencies():
204 |         print(
205 |             "[deps] Warning: minimal dependencies could not be fully ensured. Proceeding�"
    |                                                                                         ^^
206 |         )
207 | except Exception as e:
    |

invalid-syntax: Expected 'else', found 'pass'
   --> backend\backend.py:226:13
    |
224 |         "Obsidian AI Assistant - Enterprise Edition"
225 |         if ENTERPRISE_AVAILABLE
226 |             pass
    |             ^^^^
227 |         else "Obsidian AI Assistant"
228 |             pass
    |

invalid-syntax: Expected ')', found 'else'
   --> backend\backend.py:227:9
    |
225 |         if ENTERPRISE_AVAILABLE
226 |             pass
227 |         else "Obsidian AI Assistant"
    |         ^^^^
228 |             pass
229 |     ),
    |

invalid-syntax: Positional argument cannot follow keyword argument
   --> backend\backend.py:227:14
    |
225 |         if ENTERPRISE_AVAILABLE
226 |             pass
227 |         else "Obsidian AI Assistant"
    |              ^^^^^^^^^^^^^^^^^^^^^^^
228 |             pass
229 |     ),
    |

invalid-syntax: Expected ')', found NonLogicalNewline
   --> backend\backend.py:227:37
    |
225 |         if ENTERPRISE_AVAILABLE
226 |             pass
227 |         else "Obsidian AI Assistant"
    |                                     ^
228 |             pass
229 |     ),
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:229:5
    |
227 |         else "Obsidian AI Assistant"
228 |             pass
229 |     ),
    |     ^
230 |     lifespan=lifespan,
231 | )
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:229:6
    |
227 |         else "Obsidian AI Assistant"
228 |             pass
229 |     ),
    |      ^
230 |     lifespan=lifespan,
231 | )
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:229:7
    |
227 |         else "Obsidian AI Assistant"
228 |             pass
229 |     ),
    |       ^
230 |     lifespan=lifespan,
231 | )
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:230:1
    |
228 |             pass
229 |     ),
230 |     lifespan=lifespan,
    | ^^^^
231 | )
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:231:1
    |
229 |     ),
230 |     lifespan=lifespan,
231 | )
    | ^
232 |
233 | # Test-only middleware to bypass CORS preflight failures before CORS processing
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:231:2
    |
229 |     ),
230 |     lifespan=lifespan,
231 | )
    |  ^
232 |
233 | # Test-only middleware to bypass CORS preflight failures before CORS processing
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:238:9
    |
236 |     async def dispatch(self, request, call_next):
237 |         if request.method == "OPTIONS":
238 |         pass
    |         ^^^^
239 |             return Response(status_code=204)
240 |         return await call_next(request)
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:239:1
    |
237 |         if request.method == "OPTIONS":
238 |         pass
239 |             return Response(status_code=204)
    | ^^^^^^^^^^^^
240 |         return await call_next(request)
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:242:1
    |
240 |         return await call_next(request)
241 |
242 | if 'pytest' in _sysmod.modules or _os.environ.get('PYTEST_CURRENT_TEST') or _os.environ.get('TEST_MODE', '').lower() in ("1","true","…
    | ^
243 |     pass
244 |     app.add_middleware(_PreflightBypassMiddleware)
    |

E501 Line too long (144 > 88)
   --> backend\backend.py:242:89
    |
240 | …
241 | …
242 | …'PYTEST_CURRENT_TEST') or _os.environ.get('TEST_MODE', '').lower() in ("1","true","yes","on"):
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
243 | …
244 | …
    |

E501 Line too long (144 > 88)
   --> backend\backend.py:247:89
    |
246 | …ps the app before any other middleware
247 | …'PYTEST_CURRENT_TEST') or _os.environ.get('TEST_MODE', '').lower() in ("1","true","yes","on"):
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
248 | …
249 | …
    |

invalid-syntax: Expected ')', found newline
   --> backend\backend.py:372:76
    |
370 |     if all(
371 |         v is not None
372 |         for v in (model_manager, emb_manager, vault_indexer, cache_manager)
    |                                                                            ^
373 |             pass
374 |     ):
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:374:5
    |
372 |         for v in (model_manager, emb_manager, vault_indexer, cache_manager)
373 |             pass
374 |     ):
    |     ^
375 |         pass
376 |         return
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:374:6
    |
372 |         for v in (model_manager, emb_manager, vault_indexer, cache_manager)
373 |             pass
374 |     ):
    |      ^
375 |         pass
376 |         return
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:374:7
    |
372 |         for v in (model_manager, emb_manager, vault_indexer, cache_manager)
373 |             pass
374 |     ):
    |       ^
375 |         pass
376 |         return
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:375:1
    |
373 |             pass
374 |     ):
375 |         pass
    | ^^^^^^^^
376 |         return
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\backend.py:391:9
    |
389 |             return cls(*args, **kwargs)
390 |         except Exception as e:
391 |         pass
    |         ^^^^
392 |             return None
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:392:1
    |
390 |         except Exception as e:
391 |         pass
392 |             return None
    | ^^^^^^^^^^^^
393 |
394 |     try:
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:394:5
    |
392 |             return None
393 |
394 |     try:
    |     ^
395 |         pass
396 |         from dotenv import load_dotenv
    |

invalid-syntax: Expected an indented block after `else` clause
   --> backend\backend.py:408:9
    |
406 |             model_manager = safe_init(ModelManager.from_settings)
407 |         else:
408 |         pass
    |         ^^^^
409 |             hf_token = os.getenv("HUGGINGFACE_TOKEN")
410 |             model_manager = safe_init(ModelManager, hf_token=hf_token)
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:409:1
    |
407 |         else:
408 |         pass
409 |             hf_token = os.getenv("HUGGINGFACE_TOKEN")
    | ^^^^^^^^^^^^
410 |             model_manager = safe_init(ModelManager, hf_token=hf_token)
411 |     except Exception:
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:411:5
    |
409 |             hf_token = os.getenv("HUGGINGFACE_TOKEN")
410 |             model_manager = safe_init(ModelManager, hf_token=hf_token)
411 |     except Exception:
    |     ^
412 |         pass
413 |         hf_token = os.getenv("HUGGINGFACE_TOKEN")
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:411:22
    |
409 |             hf_token = os.getenv("HUGGINGFACE_TOKEN")
410 |             model_manager = safe_init(ModelManager, hf_token=hf_token)
411 |     except Exception:
    |                      ^
412 |         pass
413 |         hf_token = os.getenv("HUGGINGFACE_TOKEN")
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:412:1
    |
410 |             model_manager = safe_init(ModelManager, hf_token=hf_token)
411 |     except Exception:
412 |         pass
    | ^^^^^^^^
413 |         hf_token = os.getenv("HUGGINGFACE_TOKEN")
414 |         model_manager = safe_init(ModelManager, hf_token=hf_token)
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:416:5
    |
414 |         model_manager = safe_init(ModelManager, hf_token=hf_token)
415 |
416 |     try:
    |     ^
417 |         pass
418 |         if hasattr(EmbeddingsManager, "from_settings"):
    |

invalid-syntax: Expected an indented block after `else` clause
   --> backend\backend.py:421:9
    |
419 |             emb_manager = safe_init(EmbeddingsManager.from_settings)
420 |         else:
421 |         pass
    |         ^^^^
422 |             db_path = os.getenv("EMBEDDINGS_DB_PATH", "./vector_db")
423 |             emb_manager = safe_init(EmbeddingsManager, db_path=db_path)
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:422:1
    |
420 |         else:
421 |         pass
422 |             db_path = os.getenv("EMBEDDINGS_DB_PATH", "./vector_db")
    | ^^^^^^^^^^^^
423 |             emb_manager = safe_init(EmbeddingsManager, db_path=db_path)
424 |     except Exception:
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:424:5
    |
422 |             db_path = os.getenv("EMBEDDINGS_DB_PATH", "./vector_db")
423 |             emb_manager = safe_init(EmbeddingsManager, db_path=db_path)
424 |     except Exception:
    |     ^
425 |         pass
426 |         db_path = os.getenv("EMBEDDINGS_DB_PATH", "./vector_db")
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:424:22
    |
422 |             db_path = os.getenv("EMBEDDINGS_DB_PATH", "./vector_db")
423 |             emb_manager = safe_init(EmbeddingsManager, db_path=db_path)
424 |     except Exception:
    |                      ^
425 |         pass
426 |         db_path = os.getenv("EMBEDDINGS_DB_PATH", "./vector_db")
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:425:1
    |
423 |             emb_manager = safe_init(EmbeddingsManager, db_path=db_path)
424 |     except Exception:
425 |         pass
    | ^^^^^^^^
426 |         db_path = os.getenv("EMBEDDINGS_DB_PATH", "./vector_db")
427 |         emb_manager = safe_init(EmbeddingsManager, db_path=db_path)
    |

E501 Line too long (106 > 88)
   --> backend\backend.py:429:89
    |
427 |         emb_manager = safe_init(EmbeddingsManager, db_path=db_path)
428 |
429 |     # Use IndexingService.from_settings if available, otherwise use VaultIndexer with settings-based cache
    |                                                                                         ^^^^^^^^^^^^^^^^^^
430 |     try:
431 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:430:5
    |
429 |     # Use IndexingService.from_settings if available, otherwise use VaultIndexer with settings-based cache
430 |     try:
    |     ^
431 |         pass
432 |         if hasattr(IndexingService, "from_settings"):
    |

invalid-syntax: Expected an indented block after `else` clause
   --> backend\backend.py:436:9
    |
434 |             vault_indexer = indexing_service.vault_indexer if indexing_service else None
435 |         else:
436 |         pass
    |         ^^^^
437 |             vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
438 |     except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:437:1
    |
435 |         else:
436 |         pass
437 |             vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
    | ^^^^^^^^^^^^
438 |     except Exception:
439 |         pass
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:438:5
    |
436 |         pass
437 |             vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
438 |     except Exception:
    |     ^
439 |         pass
440 |         vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:438:22
    |
436 |         pass
437 |             vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
438 |     except Exception:
    |                      ^
439 |         pass
440 |         vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:439:1
    |
437 |             vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
438 |     except Exception:
439 |         pass
    | ^^^^^^^^
440 |         vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:442:5
    |
440 |         vault_indexer = safe_init(VaultIndexer, emb_mgr=emb_manager)
441 |
442 |     cache_dir = os.getenv("CACHE_DIR", "./backend/cache")
    |     ^
443 |     cache_manager = safe_init(CacheManager, cache_dir)
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:447:1
    |
446 | # --- Utilities ---
447 | def _settings_to_dict(s: object) -> dict:
    | ^
448 |     """Convert Settings-like object to a plain dict.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:462:9
    |
460 |         data = s.model_dump()  # type: ignore[attr-defined]
461 |         if isinstance(data, dict):
462 |         pass
    |         ^^^^
463 |             return data
464 |     except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:463:1
    |
461 |         if isinstance(data, dict):
462 |         pass
463 |             return data
    | ^^^^^^^^^^^^
464 |     except Exception:
465 |         pass
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:464:5
    |
462 |         pass
463 |             return data
464 |     except Exception:
    |     ^
465 |         pass
466 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:464:22
    |
462 |         pass
463 |             return data
464 |     except Exception:
    |                      ^
465 |         pass
466 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:465:1
    |
463 |             return data
464 |     except Exception:
465 |         pass
    | ^^^^^^^^
466 |         pass
467 |     # Try Pydantic v1 / mocks
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:468:5
    |
466 |         pass
467 |     # Try Pydantic v1 / mocks
468 |     try:
    |     ^
469 |         pass
470 |         data = s.dict()  # type: ignore[attr-defined]
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:472:9
    |
470 |         data = s.dict()  # type: ignore[attr-defined]
471 |         if isinstance(data, dict):
472 |         pass
    |         ^^^^
473 |             return data
474 |     except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:473:1
    |
471 |         if isinstance(data, dict):
472 |         pass
473 |             return data
    | ^^^^^^^^^^^^
474 |     except Exception:
475 |         pass
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:474:5
    |
472 |         pass
473 |             return data
474 |     except Exception:
    |     ^
475 |         pass
476 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:474:22
    |
472 |         pass
473 |             return data
474 |     except Exception:
    |                      ^
475 |         pass
476 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:475:1
    |
473 |             return data
474 |     except Exception:
475 |         pass
    | ^^^^^^^^
476 |         pass
477 |     # Fallback: pull known fields
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:478:5
    |
476 |         pass
477 |     # Fallback: pull known fields
478 |     try:
    |     ^
479 |         pass
480 |         from backend.settings import _ALLOWED_UPDATE_KEYS
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\backend.py:484:9
    |
482 |         result = {}
483 |         for k in _ALLOWED_UPDATE_KEYS:
484 |         pass
    |         ^^^^
485 |             if hasattr(s, k):
486 |                 try:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:485:1
    |
483 |         for k in _ALLOWED_UPDATE_KEYS:
484 |         pass
485 |             if hasattr(s, k):
    | ^^^^^^^^^^^^
486 |                 try:
487 |             pass
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\backend.py:486:21
    |
484 |         pass
485 |             if hasattr(s, k):
486 |                 try:
    |                     ^
487 |             pass
488 |                     result[k] = getattr(s, k)
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:487:13
    |
485 |             if hasattr(s, k):
486 |                 try:
487 |             pass
    |             ^
488 |                     result[k] = getattr(s, k)
489 |                 except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:488:1
    |
486 |                 try:
487 |             pass
488 |                     result[k] = getattr(s, k)
    | ^^^^^^^^^^^^^^^^^^^^
489 |                 except Exception:
490 |             pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\backend.py:489:1
    |
487 |             pass
488 |                     result[k] = getattr(s, k)
489 |                 except Exception:
    | ^^^^^^^^^^^^^^^^
490 |             pass
491 |                     continue
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:489:17
    |
487 |             pass
488 |                     result[k] = getattr(s, k)
489 |                 except Exception:
    |                 ^^^^^^
490 |             pass
491 |                     continue
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:489:34
    |
487 |             pass
488 |                     result[k] = getattr(s, k)
489 |                 except Exception:
    |                                  ^
490 |             pass
491 |                     continue
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:491:1
    |
489 |                 except Exception:
490 |             pass
491 |                     continue
    | ^^^^^^^^^^^^^^^^^^^^
492 |         return result
493 |     except Exception:
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:492:9
    |
490 |             pass
491 |                     continue
492 |         return result
    |         ^
493 |     except Exception:
494 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:493:5
    |
491 |                     continue
492 |         return result
493 |     except Exception:
    |     ^
494 |         pass
495 |         return {}
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:493:22
    |
491 |                     continue
492 |         return result
493 |     except Exception:
    |                      ^
494 |         pass
495 |         return {}
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:494:1
    |
492 |         return result
493 |     except Exception:
494 |         pass
    | ^^^^^^^^
495 |         return {}
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:498:1
    |
498 | async def _app_startup():
    | ^
499 |     """Initialize services on app startup.
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\backend.py:515:9
    |
513 |             )
514 |         except Exception as e:
515 |         pass
    |         ^^^^
516 |             pass
517 |     else:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:516:1
    |
514 |         except Exception as e:
515 |         pass
516 |             pass
    | ^^^^^^^^^^^^
517 |     else:
518 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:517:5
    |
515 |         pass
516 |             pass
517 |     else:
    |     ^^^^
518 |         pass
519 |         init_services()
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:517:9
    |
515 |         pass
516 |             pass
517 |     else:
    |         ^
518 |         pass
519 |         init_services()
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:517:10
    |
515 |         pass
516 |             pass
517 |     else:
    |          ^
518 |         pass
519 |         init_services()
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:518:1
    |
516 |             pass
517 |     else:
518 |         pass
    | ^^^^^^^^
519 |         init_services()
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:522:1
    |
522 | def _init_performance_systems():
    | ^
523 |     pass
524 |     """Initialize performance optimization systems"""
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\backend.py:531:9
    |
529 |         # Model connection pool - for managing AI model instances
530 |         def create_model_connection():
531 |         pass
    |         ^^^^
532 |             """Factory function for model connections"""
533 |             # This is a placeholder - would create actual model instances
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:532:1
    |
530 |         def create_model_connection():
531 |         pass
532 |             """Factory function for model connections"""
    | ^^^^^^^^^^^^
533 |             # This is a placeholder - would create actual model instances
534 |             # in a real implementation with heavy models
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:537:9
    |
535 |             return {"status": "connected", "created": time.time()}
536 |
537 |         get_connection_pool(
    |         ^^^^^^^^^^^^^^^^^^^
538 |             "models", create_model_connection, min_size=1, max_size=3, max_idle=600
539 |         )
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\backend.py:543:9
    |
541 |         # Database connection pool - for vector database connections
542 |         def create_db_connection():
543 |         pass
    |         ^^^^
544 |             """Factory function for database connections"""
545 |             return {"status": "connected", "created": time.time()}
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:544:1
    |
542 |         def create_db_connection():
543 |         pass
544 |             """Factory function for database connections"""
    | ^^^^^^^^^^^^
545 |             return {"status": "connected", "created": time.time()}
    |

E501 Line too long (100 > 88)
   --> backend\backend.py:554:89
    |
552 |         # Note: Background queue will be started when first async endpoint is called
553 |         print(
554 |             "[Performance] Initialized connection pools (task queue will start on first async call)"
    |                                                                                         ^^^^^^^^^^^^
555 |         )
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:557:5
    |
555 |         )
556 |
557 |     except Exception as e:
    |     ^
558 |         pass
559 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:557:22
    |
555 |         )
556 |
557 |     except Exception as e:
    |                      ^^
558 |         pass
559 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:557:27
    |
555 |         )
556 |
557 |     except Exception as e:
    |                           ^
558 |         pass
559 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:558:1
    |
557 |     except Exception as e:
558 |         pass
    | ^^^^^^^^
559 |         pass
560 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:563:1
    |
563 | async def _ensure_background_queue():
    | ^
564 |     """Ensure the background task queue is started (called from async endpoints)"""
565 |     global _background_queue_started
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\backend.py:572:9
    |
570 |             _background_queue_started = True
571 |         except Exception as e:
572 |         pass
    |         ^^^^
573 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:573:1
    |
571 |         except Exception as e:
572 |         pass
573 |             pass
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:579:1
    |
577 | # Request models (exported via package)
578 | # ----------------------
579 | class AskRequest(BaseModel):
    | ^
580 |     model_config = {"protected_namespaces": ()}
    |

E501 Line too long (93 > 88)
   --> backend\backend.py:672:89
    |
670 |         if secret_key in filtered and filtered[secret_key]:
671 |             filtered[secret_key] = "***"
672 |     # Back-compat: tests expect a field named 'backend/vector_db' indicating the default path
    |                                                                                         ^^^^^
673 |     try:
674 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:715:9
    |
713 |         unknown = [k for k in incoming.keys() if k not in _ALLOWED_UPDATE_KEYS]
714 |         if unknown:
715 |         pass
    |         ^^^^
716 |             raise HTTPException(
717 |                 status_code=400, detail="Unknown config keys provided."
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:716:1
    |
714 |         if unknown:
715 |         pass
716 |             raise HTTPException(
    | ^^^^^^^^^^^^
717 |                 status_code=400, detail="Unknown config keys provided."
718 |             )
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:720:9
    |
718 |             )
719 |
720 |         s = update_settings(incoming)
    |         ^
721 |         settings_data = _settings_to_dict(s)
722 |         # Redact response if enabled
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:724:9
    |
722 |         # Redact response if enabled
723 |         if os.getenv("REDACT_CONFIG", "0").lower() in ("1", "true", "yes", "on"):
724 |         pass
    |         ^^^^
725 |             settings_data = redact_data(settings_data)
726 |         return {"ok": True, "settings": settings_data}
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:725:1
    |
723 |         if os.getenv("REDACT_CONFIG", "0").lower() in ("1", "true", "yes", "on"):
724 |         pass
725 |             settings_data = redact_data(settings_data)
    | ^^^^^^^^^^^^
726 |         return {"ok": True, "settings": settings_data}
727 |     except Exception as err:
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:727:5
    |
725 |             settings_data = redact_data(settings_data)
726 |         return {"ok": True, "settings": settings_data}
727 |     except Exception as err:
    |     ^
728 |         pass
729 |         raise HTTPException(status_code=500, detail=f"Update failed: {err}") from err
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:727:22
    |
725 |             settings_data = redact_data(settings_data)
726 |         return {"ok": True, "settings": settings_data}
727 |     except Exception as err:
    |                      ^^
728 |         pass
729 |         raise HTTPException(status_code=500, detail=f"Update failed: {err}") from err
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:727:29
    |
725 |             settings_data = redact_data(settings_data)
726 |         return {"ok": True, "settings": settings_data}
727 |     except Exception as err:
    |                             ^
728 |         pass
729 |         raise HTTPException(status_code=500, detail=f"Update failed: {err}") from err
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:728:1
    |
726 |         return {"ok": True, "settings": settings_data}
727 |     except Exception as err:
728 |         pass
    | ^^^^^^^^
729 |         raise HTTPException(status_code=500, detail=f"Update failed: {err}") from err
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:732:1
    |
732 | def _ask_impl(request: AskRequest):
    | ^
733 |     # Ensure services
734 |     if model_manager is None or cache_manager is None:
    |

E501 Line too long (110 > 88)
   --> backend\backend.py:744:89
    |
742 |     # Use the centralized, high-performance cache
743 |     performance_cache = get_cache_manager()
744 |     cache_key = f"ask:{hash((request.question, request.model_name, request.max_tokens, request.prefer_fast))}"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^
745 |
746 |     cached_result = performance_cache.get(cache_key)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:763:9
    |
761 |         use_context = getattr(request, "use_context", False)
762 |         if use_context and emb_manager and hasattr(request, "question"):
763 |         pass
    |         ^^^^
764 |             search_results = emb_manager.search(
765 |                 request.question, top_k=get_settings().top_k
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:764:1
    |
762 |         if use_context and emb_manager and hasattr(request, "question"):
763 |         pass
764 |             search_results = emb_manager.search(
    | ^^^^^^^^^^^^
765 |                 request.question, top_k=get_settings().top_k
766 |             )
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:768:13
    |
766 |             )
767 |             if search_results:
768 |             pass
    |             ^^^^
769 |                 context_text = "\n".join([hit["text"] for hit in search_results])
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:769:1
    |
767 |             if search_results:
768 |             pass
769 |                 context_text = "\n".join([hit["text"] for hit in search_results])
    | ^^^^^^^^^^^^^^^^
770 |
771 |         # Limit context size to 16,000 characters to avoid model failures
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:772:9
    |
771 |         # Limit context size to 16,000 characters to avoid model failures
772 |         MAX_CONTEXT_CHARS = 16000
    |         ^
773 |         if context_text and len(context_text) > MAX_CONTEXT_CHARS:
774 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:774:9
    |
772 |         MAX_CONTEXT_CHARS = 16000
773 |         if context_text and len(context_text) > MAX_CONTEXT_CHARS:
774 |         pass
    |         ^^^^
775 |             print(
776 |                 f"[ask_impl] Warning: Context truncated from {len(context_text)} to {MAX_CONTEXT_CHARS} characters."
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:775:1
    |
773 |         if context_text and len(context_text) > MAX_CONTEXT_CHARS:
774 |         pass
775 |             print(
    | ^^^^^^^^^^^^
776 |                 f"[ask_impl] Warning: Context truncated from {len(context_text)} to {MAX_CONTEXT_CHARS} characters."
777 |             )
    |

E501 Line too long (116 > 88)
   --> backend\backend.py:776:89
    |
774 |         pass
775 |             print(
776 |                 f"[ask_impl] Warning: Context truncated from {len(context_text)} to {MAX_CONTEXT_CHARS} characters."
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
777 |             )
778 |             context_text = context_text[:MAX_CONTEXT_CHARS]
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:781:9
    |
780 |         # Prepare the prompt for the model
781 |         if context_text:
    |         ^
782 |         pass
783 |             to_generate = f"Context: {context_text}\n\nQuestion: {request.question}"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:782:9
    |
780 |         # Prepare the prompt for the model
781 |         if context_text:
782 |         pass
    |         ^^^^
783 |             to_generate = f"Context: {context_text}\n\nQuestion: {request.question}"
784 |         else:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:783:1
    |
781 |         if context_text:
782 |         pass
783 |             to_generate = f"Context: {context_text}\n\nQuestion: {request.question}"
    | ^^^^^^^^^^^^
784 |         else:
785 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:784:9
    |
782 |         pass
783 |             to_generate = f"Context: {context_text}\n\nQuestion: {request.question}"
784 |         else:
    |         ^
785 |         pass
786 |             to_generate = request.prompt if request.prompt else request.question
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:784:13
    |
782 |         pass
783 |             to_generate = f"Context: {context_text}\n\nQuestion: {request.question}"
784 |         else:
    |             ^
785 |         pass
786 |             to_generate = request.prompt if request.prompt else request.question
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:784:14
    |
782 |         pass
783 |             to_generate = f"Context: {context_text}\n\nQuestion: {request.question}"
784 |         else:
    |              ^
785 |         pass
786 |             to_generate = request.prompt if request.prompt else request.question
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:786:1
    |
784 |         else:
785 |         pass
786 |             to_generate = request.prompt if request.prompt else request.question
    | ^^^^^^^^^^^^
787 |
788 |         start_time = time.time()
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:788:9
    |
786 |             to_generate = request.prompt if request.prompt else request.question
787 |
788 |         start_time = time.time()
    |         ^
789 |         answer = model_manager.generate(
790 |             to_generate,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:798:9
    |
797 |         if not answer or (isinstance(answer, str) and "No model available" in answer):
798 |         pass
    |         ^^^^
799 |             raise RuntimeError("Model unavailable or failed to generate an answer.")
800 |     except Exception as err:
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:799:1
    |
797 |         if not answer or (isinstance(answer, str) and "No model available" in answer):
798 |         pass
799 |             raise RuntimeError("Model unavailable or failed to generate an answer.")
    | ^^^^^^^^^^^^
800 |     except Exception as err:
801 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:800:5
    |
798 |         pass
799 |             raise RuntimeError("Model unavailable or failed to generate an answer.")
800 |     except Exception as err:
    |     ^
801 |         pass
802 |         # Do not leak internal error details
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:800:22
    |
798 |         pass
799 |             raise RuntimeError("Model unavailable or failed to generate an answer.")
800 |     except Exception as err:
    |                      ^^
801 |         pass
802 |         # Do not leak internal error details
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:800:29
    |
798 |         pass
799 |             raise RuntimeError("Model unavailable or failed to generate an answer.")
800 |     except Exception as err:
    |                             ^
801 |         pass
802 |         # Do not leak internal error details
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:801:1
    |
799 |             raise RuntimeError("Model unavailable or failed to generate an answer.")
800 |     except Exception as err:
801 |         pass
    | ^^^^^^^^
802 |         # Do not leak internal error details
803 |         raise HTTPException(status_code=500, detail="Failed to generate answer due to an internal error.") from err
    |

E501 Line too long (115 > 88)
   --> backend\backend.py:803:89
    |
801 |         pass
802 |         # Do not leak internal error details
803 |         raise HTTPException(status_code=500, detail="Failed to generate answer due to an internal error.") from err
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
804 |
805 |     performance_cache.set(cache_key, answer)
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:805:5
    |
803 |         raise HTTPException(status_code=500, detail="Failed to generate answer due to an internal error.") from err
804 |
805 |     performance_cache.set(cache_key, answer)
    |     ^
806 |
807 |     return {
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:814:1
    |
812 |     }
813 |
814 | @app.post("/api/ask", dependencies=[Depends(require_role("user"))])
    | ^
815 | async def api_ask(request: AskRequest):
816 |     return _ask_impl(request)
    |

E501 Line too long (94 > 88)
   --> backend\backend.py:834:89
    |
832 |     try:
833 |         pass
834 |         # Let the indexer decide how to handle path issues; wrap and surface as 500 on failure
    |                                                                                         ^^^^^^
835 |         indexed = vault_indexer.index_vault(request.vault_path)
836 |         return {"indexed_files": indexed}
    |

E501 Line too long (107 > 88)
   --> backend\backend.py:844:89
    |
842 |         pass
843 |         # Generic error message
844 |         raise HTTPException(status_code=500, detail="Vault scan failed due to an internal error.") from err
    |                                                                                         ^^^^^^^^^^^^^^^^^^^
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:909:9
    |
907 |         validation_result = validate_base64_audio(request.audio_data)
908 |         if not validation_result['valid']:
909 |         pass
    |         ^^^^
910 |             raise HTTPException(
911 |                 status_code=400,
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:910:1
    |
908 |         if not validation_result['valid']:
909 |         pass
910 |             raise HTTPException(
    | ^^^^^^^^^^^^
911 |                 status_code=400,
912 |                 detail=f"Invalid audio data: {validation_result.get('error', 'Validation failed')}"
    |

E501 Line too long (99 > 88)
   --> backend\backend.py:912:89
    |
910 |             raise HTTPException(
911 |                 status_code=400,
912 |                 detail=f"Invalid audio data: {validation_result.get('error', 'Validation failed')}"
    |                                                                                         ^^^^^^^^^^^
913 |             )
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\backend.py:916:9
    |
915 |         # Log validation warnings if any
916 |         if validation_result.get('warnings'):
    |         ^^
917 |         pass
918 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\backend.py:917:9
    |
915 |         # Log validation warnings if any
916 |         if validation_result.get('warnings'):
917 |         pass
    |         ^^^^
918 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:918:1
    |
916 |         if validation_result.get('warnings'):
917 |         pass
918 |             pass
    | ^^^^^^^^^^^^
919 |
920 |         import base64
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:946:5
    |
944 |         }
945 |
946 |     except FileValidationError as e:
    |     ^
947 |         pass
948 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:946:32
    |
944 |         }
945 |
946 |     except FileValidationError as e:
    |                                ^^
947 |         pass
948 |         return {
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:946:37
    |
944 |         }
945 |
946 |     except FileValidationError as e:
    |                                     ^
947 |         pass
948 |         return {
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:947:1
    |
946 |     except FileValidationError as e:
947 |         pass
    | ^^^^^^^^
948 |         return {
949 |             "transcription": "Transcription failed: Audio validation error.",
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:959:5
    |
957 |             }
958 |         }
959 |     except Exception as err:
    |     ^
960 |         pass
961 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:959:22
    |
957 |             }
958 |         }
959 |     except Exception as err:
    |                      ^^
960 |         pass
961 |         return {
    |

invalid-syntax: Expected an expression
   --> backend\backend.py:959:29
    |
957 |             }
958 |         }
959 |     except Exception as err:
    |                             ^
960 |         pass
961 |         return {
    |

invalid-syntax: Unexpected indentation
   --> backend\backend.py:960:1
    |
958 |         }
959 |     except Exception as err:
960 |         pass
    | ^^^^^^^^
961 |         return {
962 |             "transcription": f"Transcription failed: {str(err)}",
    |

invalid-syntax: Expected a statement
   --> backend\backend.py:978:1
    |
976 | # ----------------------
977 |
978 | @app.post("/api/enterprise/auth/sso")
    | ^
979 | async def enterprise_sso_login(provider: str, redirect_uri: str = None):
980 |     """
    |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:999:9
     |
 997 |         }
 998 |         if provider not in provider_mapping:
 999 |         pass
     |         ^^^^
1000 |             raise HTTPException(
1001 |                 status_code=400,
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1000:1
     |
 998 |         if provider not in provider_mapping:
 999 |         pass
1000 |             raise HTTPException(
     | ^^^^^^^^^^^^
1001 |                 status_code=400,
1002 |                 detail=f"Unsupported SSO provider: {provider}. Supported: {list(provider_mapping.keys())}"
     |

E501 Line too long (106 > 88)
    --> backend\backend.py:1002:89
     |
1000 |             raise HTTPException(
1001 |                 status_code=400,
1002 |                 detail=f"Unsupported SSO provider: {provider}. Supported: {list(provider_mapping.keys())}"
     |                                                                                         ^^^^^^^^^^^^^^^^^^
1003 |             )
1004 |         # Mock SSO configuration (in production, this would come from .settings)
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1005:9
     |
1003 |             )
1004 |         # Mock SSO configuration (in production, this would come from .settings)
1005 |         sso_config = SSOConfig(
     |         ^^^^^^^^^^
1006 |             provider=provider_mapping[provider],
1007 |             client_id=f"mock_{provider}_client_id",
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1019:5
     |
1017 |             "redirect_uri": sso_config.redirect_uri
1018 |         }
1019 |     except Exception as e:
     |     ^^^^^^
1020 |         pass
1021 |         raise HTTPException(status_code=500, detail=f"SSO initiation failed: {str(e)}") from e
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1019:22
     |
1017 |             "redirect_uri": sso_config.redirect_uri
1018 |         }
1019 |     except Exception as e:
     |                      ^^
1020 |         pass
1021 |         raise HTTPException(status_code=500, detail=f"SSO initiation failed: {str(e)}") from e
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1019:27
     |
1017 |             "redirect_uri": sso_config.redirect_uri
1018 |         }
1019 |     except Exception as e:
     |                           ^
1020 |         pass
1021 |         raise HTTPException(status_code=500, detail=f"SSO initiation failed: {str(e)}") from e
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1020:1
     |
1018 |         }
1019 |     except Exception as e:
1020 |         pass
     | ^^^^^^^^
1021 |         raise HTTPException(status_code=500, detail=f"SSO initiation failed: {str(e)}") from e
     |

E501 Line too long (94 > 88)
    --> backend\backend.py:1021:89
     |
1019 |     except Exception as e:
1020 |         pass
1021 |         raise HTTPException(status_code=500, detail=f"SSO initiation failed: {str(e)}") from e
     |                                                                                         ^^^^^^
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1024:1
     |
1024 | @app.post("/api/enterprise/auth/callback")
     | ^
1025 | async def enterprise_sso_callback(code: str, state: str = None, provider: str = "azure_ad"):
1026 |     """
     |

E501 Line too long (92 > 88)
    --> backend\backend.py:1025:89
     |
1024 | @app.post("/api/enterprise/auth/callback")
1025 | async def enterprise_sso_callback(code: str, state: str = None, provider: str = "azure_ad"):
     |                                                                                         ^^^^
1026 |     """
1027 |     Handle SSO callback with authorization code.
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1055:9
     |
1053 |         user_info = await sso_manager.authenticate(code)
1054 |         if not user_info:
1055 |         pass
     |         ^^^^
1056 |             raise HTTPException(status_code=401, detail="SSO authentication failed")
1057 |         # Generate JWT token
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1056:1
     |
1054 |         if not user_info:
1055 |         pass
1056 |             raise HTTPException(status_code=401, detail="SSO authentication failed")
     | ^^^^^^^^^^^^
1057 |         # Generate JWT token
1058 |         secret_ = "***PLACEHOLDER***"  # In production, use secure secret
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1058:9
     |
1056 |             raise HTTPException(status_code=401, detail="SSO authentication failed")
1057 |         # Generate JWT token
1058 |         secret_ = "***PLACEHOLDER***"  # In production, use secure secret
     |         ^^^^^^^
1059 |         jwt_token = sso_manager.generate_jwt_token(user_info, secret_key)
1060 |         return {
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1073:5
     |
1071 |             }
1072 |         }
1073 |     except Exception as e:
     |     ^^^^^^
1074 |         pass
1075 |         raise HTTPException(status_code=500, detail=f"SSO authentication failed: {str(e)}") from e
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1073:22
     |
1071 |             }
1072 |         }
1073 |     except Exception as e:
     |                      ^^
1074 |         pass
1075 |         raise HTTPException(status_code=500, detail=f"SSO authentication failed: {str(e)}") from e
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1073:27
     |
1071 |             }
1072 |         }
1073 |     except Exception as e:
     |                           ^
1074 |         pass
1075 |         raise HTTPException(status_code=500, detail=f"SSO authentication failed: {str(e)}") from e
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1074:1
     |
1072 |         }
1073 |     except Exception as e:
1074 |         pass
     | ^^^^^^^^
1075 |         raise HTTPException(status_code=500, detail=f"SSO authentication failed: {str(e)}") from e
     |

E501 Line too long (98 > 88)
    --> backend\backend.py:1075:89
     |
1073 |     except Exception as e:
1074 |         pass
1075 |         raise HTTPException(status_code=500, detail=f"SSO authentication failed: {str(e)}") from e
     |                                                                                         ^^^^^^^^^^
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1078:1
     |
1078 | @app.post("/api/enterprise/auth/logout")
     | ^
1079 | async def enterprise_logout(token: str = None):
1080 |     """
     |

E501 Line too long (103 > 88)
    --> backend\backend.py:1164:89
     |
1162 |     except Exception as err:
1163 |         pass
1164 |         raise HTTPException(status_code=500, detail="Search failed due to an internal error.") from err
     |                                                                                         ^^^^^^^^^^^^^^^
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1177:9
     |
1175 |         validation_result = validate_pdf_path(pdf_path)
1176 |         if not validation_result['valid']:
1177 |         pass
     |         ^^^^
1178 |             raise HTTPException(
1179 |                 status_code=400,
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1178:1
     |
1176 |         if not validation_result['valid']:
1177 |         pass
1178 |             raise HTTPException(
     | ^^^^^^^^^^^^
1179 |                 status_code=400,
1180 |                 detail=f"Invalid PDF file: {validation_result.get('error', 'Validation failed')}"
     |

E501 Line too long (97 > 88)
    --> backend\backend.py:1180:89
     |
1178 |             raise HTTPException(
1179 |                 status_code=400,
1180 |                 detail=f"Invalid PDF file: {validation_result.get('error', 'Validation failed')}"
     |                                                                                         ^^^^^^^^^
1181 |             )
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1184:9
     |
1183 |         # Log validation warnings if any
1184 |         if validation_result.get('warnings'):
     |         ^^
1185 |         pass
1186 |             pass
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1185:9
     |
1183 |         # Log validation warnings if any
1184 |         if validation_result.get('warnings'):
1185 |         pass
     |         ^^^^
1186 |             pass
1187 |         count = vault_indexer.index_pdf(pdf_path)
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1186:1
     |
1184 |         if validation_result.get('warnings'):
1185 |         pass
1186 |             pass
     | ^^^^^^^^^^^^
1187 |         count = vault_indexer.index_pdf(pdf_path)
1188 |         return {
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1196:5
     |
1194 |             }
1195 |         }
1196 |     except FileValidationError as e:
     |     ^
1197 |         pass
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1196:32
     |
1194 |             }
1195 |         }
1196 |     except FileValidationError as e:
     |                                ^^
1197 |         pass
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1196:37
     |
1194 |             }
1195 |         }
1196 |     except FileValidationError as e:
     |                                     ^
1197 |         pass
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1197:1
     |
1195 |         }
1196 |     except FileValidationError as e:
1197 |         pass
     | ^^^^^^^^
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
1199 |     except Exception as err:
     |

E501 Line too long (95 > 88)
    --> backend\backend.py:1198:89
     |
1196 |     except FileValidationError as e:
1197 |         pass
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
     |                                                                                         ^^^^^^^
1199 |     except Exception as err:
1200 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1199:5
     |
1197 |         pass
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
1199 |     except Exception as err:
     |     ^
1200 |         pass
1201 |         raise HTTPException(status_code=500, detail="PDF indexing failed due to an internal error.") from err
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1199:22
     |
1197 |         pass
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
1199 |     except Exception as err:
     |                      ^^
1200 |         pass
1201 |         raise HTTPException(status_code=500, detail="PDF indexing failed due to an internal error.") from err
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1199:29
     |
1197 |         pass
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
1199 |     except Exception as err:
     |                             ^
1200 |         pass
1201 |         raise HTTPException(status_code=500, detail="PDF indexing failed due to an internal error.") from err
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1200:1
     |
1198 |         raise HTTPException(status_code=400, detail=f"File validation failed: {str(e)}") from e
1199 |     except Exception as err:
1200 |         pass
     | ^^^^^^^^
1201 |         raise HTTPException(status_code=500, detail="PDF indexing failed due to an internal error.") from err
     |

E501 Line too long (109 > 88)
    --> backend\backend.py:1201:89
     |
1199 |     except Exception as err:
1200 |         pass
1201 |         raise HTTPException(status_code=500, detail="PDF indexing failed due to an internal error.") from err
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^
1202 |
1203 | # ----------------------
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1206:1
     |
1204 | # Performance & Monitoring Endpoints
1205 | # ----------------------
1206 | @app.get("/api/performance/metrics")
     | ^
1207 | async def get_performance_metrics():
1208 |     pass
     |

E501 Line too long (111 > 88)
    --> backend\backend.py:1216:89
     |
1214 |     except Exception as err:
1215 |         pass
1216 |         raise HTTPException(status_code=500, detail="Failed to get metrics due to an internal error.") from err
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^
1217 |
1218 | @app.get("/api/performance/cache/stats")
     |

E501 Line too long (115 > 88)
    --> backend\backend.py:1229:89
     |
1227 |     except Exception as err:
1228 |         pass
1229 |         raise HTTPException(status_code=500, detail="Failed to get cache stats due to an internal error.") from err
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
1230 |
1231 | @app.post("/api/performance/cache/clear")
     |

E501 Line too long (111 > 88)
    --> backend\backend.py:1248:89
     |
1246 |         pass
1247 |         pass
1248 |         raise HTTPException(status_code=500, detail="Failed to clear cache due to an internal error.") from err
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^
1249 |
1250 | @app.post("/api/performance/optimize")
     |

invalid-syntax: Expected an indented block after `for` statement
    --> backend\backend.py:1266:9
     |
1264 |         scheduled_count = 0
1265 |         for task in optimization_tasks:
1266 |         pass
     |         ^^^^
1267 |             success = await task_queue.submit_task(task, priority=1)
1268 |             if success:
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1267:1
     |
1265 |         for task in optimization_tasks:
1266 |         pass
1267 |             success = await task_queue.submit_task(task, priority=1)
     | ^^^^^^^^^^^^
1268 |             if success:
1269 |             pass
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1269:13
     |
1267 |             success = await task_queue.submit_task(task, priority=1)
1268 |             if success:
1269 |             pass
     |             ^^^^
1270 |                 scheduled_count += 1
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1270:1
     |
1268 |             if success:
1269 |             pass
1270 |                 scheduled_count += 1
     | ^^^^^^^^^^^^^^^^
1271 |
1272 |         return {
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1272:9
     |
1270 |                 scheduled_count += 1
1271 |
1272 |         return {
     |         ^
1273 |             "status": "success",
1274 |             "message": f"Scheduled {scheduled_count} optimization tasks",
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1277:5
     |
1275 |             "queue_stats": task_queue.get_stats(),
1276 |         }
1277 |     except Exception as err:
     |     ^
1278 |         pass
1279 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1277:22
     |
1275 |             "queue_stats": task_queue.get_stats(),
1276 |         }
1277 |     except Exception as err:
     |                      ^^
1278 |         pass
1279 |         raise HTTPException(
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1277:29
     |
1275 |             "queue_stats": task_queue.get_stats(),
1276 |         }
1277 |     except Exception as err:
     |                             ^
1278 |         pass
1279 |         raise HTTPException(
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1278:1
     |
1276 |         }
1277 |     except Exception as err:
1278 |         pass
     | ^^^^^^^^
1279 |         raise HTTPException(
1280 |             status_code=500, detail="Failed to trigger optimization due to an internal error.") from err
     |

E501 Line too long (104 > 88)
    --> backend\backend.py:1280:89
     |
1278 |         pass
1279 |         raise HTTPException(
1280 |             status_code=500, detail="Failed to trigger optimization due to an internal error.") from err
     |                                                                                         ^^^^^^^^^^^^^^^^
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1283:1
     |
1283 | @app.get("/api/performance/dashboard")
     | ^
1284 | async def get_performance_dashboard():
1285 |     pass
     |

invalid-syntax: Expected an indented block after `try` statement
    --> backend\backend.py:1296:9
     |
1294 |         # Get task queue statistics
1295 |         try:
1296 |         pass
     |         ^^^^
1297 |             task_queue = await get_task_queue()
1298 |             queue_stats = task_queue.get_stats()
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1297:1
     |
1295 |         try:
1296 |         pass
1297 |             task_queue = await get_task_queue()
     | ^^^^^^^^^^^^
1298 |             queue_stats = task_queue.get_stats()
1299 |         except Exception:
     |

invalid-syntax: Expected an indented block after `except` clause
    --> backend\backend.py:1300:9
     |
1298 |             queue_stats = task_queue.get_stats()
1299 |         except Exception:
1300 |         pass
     |         ^^^^
1301 |             queue_stats = {"status": "unavailable", "error": "Task queue not initialized"}
1302 |         # Get connection pool statistics
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1301:1
     |
1299 |         except Exception:
1300 |         pass
1301 |             queue_stats = {"status": "unavailable", "error": "Task queue not initialized"}
     | ^^^^^^^^^^^^
1302 |         # Get connection pool statistics
1303 |         try:
     |

E501 Line too long (90 > 88)
    --> backend\backend.py:1301:89
     |
1299 |         except Exception:
1300 |         pass
1301 |             queue_stats = {"status": "unavailable", "error": "Task queue not initialized"}
     |                                                                                         ^^
1302 |         # Get connection pool statistics
1303 |         try:
     |

invalid-syntax: Expected an indented block after `try` statement
    --> backend\backend.py:1304:9
     |
1302 |         # Get connection pool statistics
1303 |         try:
1304 |         pass
     |         ^^^^
1305 |             connection_pool = get_connection_pool("default")
1306 |             pool_stats = {
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1305:1
     |
1303 |         try:
1304 |         pass
1305 |             connection_pool = get_connection_pool("default")
     | ^^^^^^^^^^^^
1306 |             pool_stats = {
1307 |                 "active_connections": len(connection_pool.connections),
     |

E501 Line too long (120 > 88)
    --> backend\backend.py:1309:89
     |
1307 |                 "active_connections": len(connection_pool.connections),
1308 |                 "max_connections": connection_pool.max_connections,
1309 |                 "created_at": connection_pool.created_at.isoformat() if hasattr(connection_pool, 'created_at') else None
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1310 |             }
1311 |         except Exception:
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1311:9
     |
1309 |                 "created_at": connection_pool.created_at.isoformat() if hasattr(connection_pool, 'created_at') else None
1310 |             }
1311 |         except Exception:
     |         ^
1312 |         pass
1313 |         pass
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1311:26
     |
1309 |                 "created_at": connection_pool.created_at.isoformat() if hasattr(connection_pool, 'created_at') else None
1310 |             }
1311 |         except Exception:
     |                          ^
1312 |         pass
1313 |         pass
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1314:1
     |
1312 |         pass
1313 |         pass
1314 |             pool_stats = {"status": "unavailable", "error": "Connection pool not available"}
     | ^^^^^^^^^^^^
1315 |         # Calculate performance scores
1316 |         performance_score = _calculate_performance_score(system_metrics, cache_stats)
     |

E501 Line too long (92 > 88)
    --> backend\backend.py:1314:89
     |
1312 |         pass
1313 |         pass
1314 |             pool_stats = {"status": "unavailable", "error": "Connection pool not available"}
     |                                                                                         ^^^^
1315 |         # Calculate performance scores
1316 |         performance_score = _calculate_performance_score(system_metrics, cache_stats)
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1316:9
     |
1314 |             pool_stats = {"status": "unavailable", "error": "Connection pool not available"}
1315 |         # Calculate performance scores
1316 |         performance_score = _calculate_performance_score(system_metrics, cache_stats)
     |         ^
1317 |         dashboard_data = {
1318 |             "timestamp": datetime.utcnow().isoformat(),
     |

E501 Line too long (92 > 88)
    --> backend\backend.py:1325:89
     |
1323 |             "queue_stats": queue_stats,
1324 |             "connection_pool_stats": pool_stats,
1325 |             "recommendations": _get_performance_recommendations(system_metrics, cache_stats)
     |                                                                                         ^^^^
1326 |         }
1327 |         return {"status": "success", "dashboard": dashboard_data}
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1328:5
     |
1326 |         }
1327 |         return {"status": "success", "dashboard": dashboard_data}
1328 |     except Exception as err:
     |     ^
1329 |         pass
1330 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1328:22
     |
1326 |         }
1327 |         return {"status": "success", "dashboard": dashboard_data}
1328 |     except Exception as err:
     |                      ^^
1329 |         pass
1330 |         raise HTTPException(
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1328:29
     |
1326 |         }
1327 |         return {"status": "success", "dashboard": dashboard_data}
1328 |     except Exception as err:
     |                             ^
1329 |         pass
1330 |         raise HTTPException(
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1329:1
     |
1327 |         return {"status": "success", "dashboard": dashboard_data}
1328 |     except Exception as err:
1329 |         pass
     | ^^^^^^^^
1330 |         raise HTTPException(
1331 |             status_code=500,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1336:1
     |
1336 | @app.get("/api/performance/health")
     | ^
1337 | async def get_performance_health():
1338 |     pass
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1358:9
     |
1356 |         health_checks.append(cache_health)
1357 |         if cache_health["status"] != "healthy":
1358 |         pass
     |         ^^^^
1359 |             overall_status = "warning"
1360 |         # Check system resources
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1359:1
     |
1357 |         if cache_health["status"] != "healthy":
1358 |         pass
1359 |             overall_status = "warning"
     | ^^^^^^^^^^^^
1360 |         # Check system resources
1361 |         system_metrics = PerformanceMonitor.get_system_metrics()
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1361:9
     |
1359 |             overall_status = "warning"
1360 |         # Check system resources
1361 |         system_metrics = PerformanceMonitor.get_system_metrics()
     |         ^^^^^^^^^^^^^^
1362 |         memory_usage = system_metrics.get("memory", {}).get("usage_percent", 0)
1363 |         memory_health = {
     |

E501 Line too long (105 > 88)
    --> backend\backend.py:1365:89
     |
1363 |         memory_health = {
1364 |             "component": "memory",
1365 |             "status": "healthy" if memory_usage < 80 else "critical" if memory_usage > 90 else "warning",
     |                                                                                         ^^^^^^^^^^^^^^^^^
1366 |             "usage_percent": memory_usage,
1367 |             "message": f"Memory usage: {memory_usage:.1f}%"
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1371:9
     |
1369 |         health_checks.append(memory_health)
1370 |         if memory_health["status"] == "critical":
1371 |         pass
     |         ^^^^
1372 |             overall_status = "critical"
1373 |         elif memory_health["status"] == "warning" and overall_status == "healthy":
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1372:1
     |
1370 |         if memory_health["status"] == "critical":
1371 |         pass
1372 |             overall_status = "critical"
     | ^^^^^^^^^^^^
1373 |         elif memory_health["status"] == "warning" and overall_status == "healthy":
1374 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1373:9
     |
1371 |         pass
1372 |             overall_status = "critical"
1373 |         elif memory_health["status"] == "warning" and overall_status == "healthy":
     |         ^^^^
1374 |         pass
1375 |             overall_status = "warning"
     |

invalid-syntax: Invalid annotated assignment target
    --> backend\backend.py:1373:14
     |
1371 |         pass
1372 |             overall_status = "critical"
1373 |         elif memory_health["status"] == "warning" and overall_status == "healthy":
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1374 |         pass
1375 |             overall_status = "warning"
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1373:83
     |
1371 |         pass
1372 |             overall_status = "critical"
1373 |         elif memory_health["status"] == "warning" and overall_status == "healthy":
     |                                                                                   ^
1374 |         pass
1375 |             overall_status = "warning"
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1375:1
     |
1373 |         elif memory_health["status"] == "warning" and overall_status == "healthy":
1374 |         pass
1375 |             overall_status = "warning"
     | ^^^^^^^^^^^^
1376 |         # Check response times (mock - in real implementation, track actual response times)
1377 |         avg_response_time = system_metrics.get("response_time_ms", 200)  # Mock value
     |

E501 Line too long (91 > 88)
    --> backend\backend.py:1376:89
     |
1374 |         pass
1375 |             overall_status = "warning"
1376 |         # Check response times (mock - in real implementation, track actual response times)
     |                                                                                         ^^^
1377 |         avg_response_time = system_metrics.get("response_time_ms", 200)  # Mock value
1378 |         response_health = {
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1377:9
     |
1375 |             overall_status = "warning"
1376 |         # Check response times (mock - in real implementation, track actual response times)
1377 |         avg_response_time = system_metrics.get("response_time_ms", 200)  # Mock value
     |         ^
1378 |         response_health = {
1379 |             "component": "response_time",
     |

E501 Line too long (118 > 88)
    --> backend\backend.py:1380:89
     |
1378 |         response_health = {
1379 |             "component": "response_time",
1380 |             "status": "healthy" if avg_response_time < 500 else "critical" if avg_response_time > 2000 else "warning",
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1381 |             "avg_response_ms": avg_response_time,
1382 |             "message": f"Average response time: {avg_response_time}ms"
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1386:9
     |
1384 |         health_checks.append(response_health)
1385 |         if response_health["status"] == "critical":
1386 |         pass
     |         ^^^^
1387 |             overall_status = "critical"
1388 |         elif response_health["status"] == "warning" and overall_status == "healthy":
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1387:1
     |
1385 |         if response_health["status"] == "critical":
1386 |         pass
1387 |             overall_status = "critical"
     | ^^^^^^^^^^^^
1388 |         elif response_health["status"] == "warning" and overall_status == "healthy":
1389 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1388:9
     |
1386 |         pass
1387 |             overall_status = "critical"
1388 |         elif response_health["status"] == "warning" and overall_status == "healthy":
     |         ^
1389 |         pass
1390 |             overall_status = "warning"
     |

invalid-syntax: Invalid annotated assignment target
    --> backend\backend.py:1388:14
     |
1386 |         pass
1387 |             overall_status = "critical"
1388 |         elif response_health["status"] == "warning" and overall_status == "healthy":
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1389 |         pass
1390 |             overall_status = "warning"
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1388:85
     |
1386 |         pass
1387 |             overall_status = "critical"
1388 |         elif response_health["status"] == "warning" and overall_status == "healthy":
     |                                                                                     ^
1389 |         pass
1390 |             overall_status = "warning"
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1390:1
     |
1388 |         elif response_health["status"] == "warning" and overall_status == "healthy":
1389 |         pass
1390 |             overall_status = "warning"
     | ^^^^^^^^^^^^
1391 |         return {
1392 |             "status": overall_status,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1391:9
     |
1389 |         pass
1390 |             overall_status = "warning"
1391 |         return {
     |         ^
1392 |             "status": overall_status,
1393 |             "timestamp": datetime.utcnow().isoformat(),
     |

E501 Line too long (93 > 88)
    --> backend\backend.py:1397:89
     |
1395 |             "summary": {
1396 |                 "total_checks": len(health_checks),
1397 |                 "healthy": sum(1 for check in health_checks if check["status"] == "healthy"),
     |                                                                                         ^^^^^
1398 |                 "warning": sum(1 for check in health_checks if check["status"] == "warning"),
1399 |                 "critical": sum(1 for check in health_checks if check["status"] == "critical")
     |

E501 Line too long (93 > 88)
    --> backend\backend.py:1398:89
     |
1396 |                 "total_checks": len(health_checks),
1397 |                 "healthy": sum(1 for check in health_checks if check["status"] == "healthy"),
1398 |                 "warning": sum(1 for check in health_checks if check["status"] == "warning"),
     |                                                                                         ^^^^^
1399 |                 "critical": sum(1 for check in health_checks if check["status"] == "critical")
1400 |             }
     |

E501 Line too long (94 > 88)
    --> backend\backend.py:1399:89
     |
1397 |                 "healthy": sum(1 for check in health_checks if check["status"] == "healthy"),
1398 |                 "warning": sum(1 for check in health_checks if check["status"] == "warning"),
1399 |                 "critical": sum(1 for check in health_checks if check["status"] == "critical")
     |                                                                                         ^^^^^^
1400 |             }
1401 |         }
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1402:5
     |
1400 |             }
1401 |         }
1402 |     except Exception as err:
     |     ^
1403 |         pass
1404 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1402:22
     |
1400 |             }
1401 |         }
1402 |     except Exception as err:
     |                      ^^
1403 |         pass
1404 |         pass
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1402:29
     |
1400 |             }
1401 |         }
1402 |     except Exception as err:
     |                             ^
1403 |         pass
1404 |         pass
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1403:1
     |
1401 |         }
1402 |     except Exception as err:
1403 |         pass
     | ^^^^^^^^
1404 |         pass
1405 |         return {
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1413:1
     |
1413 | @app.get("/api/performance/trends")
     | ^
1414 | async def get_performance_trends(hours: int = 24):
1415 |     """Get performance trends over time (mock implementation)"""
     |

invalid-syntax: Expected an indented block after `for` statement
    --> backend\backend.py:1425:9
     |
1423 |         # Generate hourly data points
1424 |         for i in range(hours):
1425 |         pass
     |         ^^^^
1426 |             timestamp = current_time - (i * 3600)  # Go back hour by hour
1427 |             # Mock performance data with some variation
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1426:1
     |
1424 |         for i in range(hours):
1425 |         pass
1426 |             timestamp = current_time - (i * 3600)  # Go back hour by hour
     | ^^^^^^^^^^^^
1427 |             # Mock performance data with some variation
1428 |             data_point = {
     |

E501 Line too long (91 > 88)
    --> backend\backend.py:1439:89
     |
1437 |             data_point["memory_usage"] = max(10, min(95, data_point["memory_usage"]))
1438 |             data_point["cpu_usage"] = max(5, min(95, data_point["cpu_usage"]))
1439 |             data_point["cache_hit_rate"] = max(0.1, min(1.0, data_point["cache_hit_rate"]))
     |                                                                                         ^^^
1440 |             data_point["response_time_ms"] = max(50, min(5000, data_point["response_time_ms"]))
1441 |             data_point["active_connections"] = max(0, data_point["active_connections"])
     |

E501 Line too long (95 > 88)
    --> backend\backend.py:1440:89
     |
1438 |             data_point["cpu_usage"] = max(5, min(95, data_point["cpu_usage"]))
1439 |             data_point["cache_hit_rate"] = max(0.1, min(1.0, data_point["cache_hit_rate"]))
1440 |             data_point["response_time_ms"] = max(50, min(5000, data_point["response_time_ms"]))
     |                                                                                         ^^^^^^^
1441 |             data_point["active_connections"] = max(0, data_point["active_connections"])
1442 |             trend_data.append(data_point)
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1444:9
     |
1442 |             trend_data.append(data_point)
1443 |         # Reverse to get chronological order
1444 |         trend_data.reverse()
     |         ^^^^^^^^^^
1445 |         return {
1446 |             "status": "success",
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1451:5
     |
1449 |             "trends": trend_data
1450 |         }
1451 |     except Exception as err:
     |     ^^^^^^
1452 |         pass
1453 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1451:22
     |
1449 |             "trends": trend_data
1450 |         }
1451 |     except Exception as err:
     |                      ^^
1452 |         pass
1453 |         raise HTTPException(
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1451:29
     |
1449 |             "trends": trend_data
1450 |         }
1451 |     except Exception as err:
     |                             ^
1452 |         pass
1453 |         raise HTTPException(
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1452:1
     |
1450 |         }
1451 |     except Exception as err:
1452 |         pass
     | ^^^^^^^^
1453 |         raise HTTPException(
1454 |             status_code=500,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1459:1
     |
1459 | def _calculate_performance_score(system_metrics: dict, cache_stats: dict) -> dict:
     | ^
1460 |     """Calculate overall performance score based on metrics"""
1461 |     try:
     |

E501 Line too long (117 > 88)
    --> backend\backend.py:1468:89
     |
1466 |         scores["memory"] = max(0, 100 - memory_usage)
1467 |         # Cache score (0-100, higher hit rate is better)
1468 |         total_requests = cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0) + cache_stats.get("misses", 1)
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1469 |         hit_rate = (cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0)) / total_requests
1470 |         scores["cache"] = hit_rate * 100
     |

E501 Line too long (99 > 88)
    --> backend\backend.py:1469:89
     |
1467 |         # Cache score (0-100, higher hit rate is better)
1468 |         total_requests = cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0) + cache_stats.get("misses", 1)
1469 |         hit_rate = (cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0)) / total_requests
     |                                                                                         ^^^^^^^^^^^
1470 |         scores["cache"] = hit_rate * 100
1471 |         # CPU score (mock, in real implementation would use actual CPU metrics)
     |

E501 Line too long (92 > 88)
    --> backend\backend.py:1472:89
     |
1470 |         scores["cache"] = hit_rate * 100
1471 |         # CPU score (mock, in real implementation would use actual CPU metrics)
1472 |         scores["cpu"] = max(0, 100 - system_metrics.get("cpu", {}).get("usage_percent", 30))
     |                                                                                         ^^^^
1473 |         # Overall score (weighted average)
1474 |         overall_score = (
     |

E501 Line too long (152 > 88)
    --> backend\backend.py:1482:89
     |
1480 | …
1481 | …
1482 | …" if overall_score >= 80 else "C" if overall_score >= 70 else "D" if overall_score >= 60 else "F"
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1483 | …
1484 | …
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1498:9
     |
1496 |         memory_usage = system_metrics.get("memory", {}).get("usage_percent", 0)
1497 |         if memory_usage > 90:
1498 |         pass
     |         ^^^^
1499 |             recommendations.append({
1500 |                 "category": "memory",
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1499:1
     |
1497 |         if memory_usage > 90:
1498 |         pass
1499 |             recommendations.append({
     | ^^^^^^^^^^^^
1500 |                 "category": "memory",
1501 |                 "severity": "critical",
     |

E501 Line too long (142 > 88)
    --> backend\backend.py:1502:89
     |
1500 | …
1501 | …
1502 | …ally high. Consider increasing available memory or optimizing memory-intensive operations.",
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1503 | …le up memory resources"
1504 | …
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1505:9
     |
1503 |                 "action": "Restart services or scale up memory resources"
1504 |             })
1505 |         elif memory_usage > 80:
     |         ^^^^
1506 |         pass
1507 |             recommendations.append({
     |

invalid-syntax: Invalid annotated assignment target
    --> backend\backend.py:1505:14
     |
1503 |                 "action": "Restart services or scale up memory resources"
1504 |             })
1505 |         elif memory_usage > 80:
     |              ^^^^^^^^^^^^^^^^^
1506 |         pass
1507 |             recommendations.append({
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1505:32
     |
1503 |                 "action": "Restart services or scale up memory resources"
1504 |             })
1505 |         elif memory_usage > 80:
     |                                ^
1506 |         pass
1507 |             recommendations.append({
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1507:1
     |
1505 |         elif memory_usage > 80:
1506 |         pass
1507 |             recommendations.append({
     | ^^^^^^^^^^^^
1508 |                 "category": "memory",
1509 |                 "severity": "warning",
     |

E501 Line too long (91 > 88)
    --> backend\backend.py:1510:89
     |
1508 |                 "category": "memory",
1509 |                 "severity": "warning",
1510 |                 "message": "Memory usage is elevated. Monitor for potential memory leaks.",
     |                                                                                         ^^^
1511 |                 "action": "Review memory usage patterns and consider optimization"
1512 |             })
     |

E501 Line too long (117 > 88)
    --> backend\backend.py:1514:89
     |
1512 |             })
1513 |         # Cache recommendations
1514 |         total_requests = cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0) + cache_stats.get("misses", 1)
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1515 |         hit_rate = (cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0)) / total_requests
1516 |         if hit_rate < 0.5:
     |

E501 Line too long (99 > 88)
    --> backend\backend.py:1515:89
     |
1513 |         # Cache recommendations
1514 |         total_requests = cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0) + cache_stats.get("misses", 1)
1515 |         hit_rate = (cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0)) / total_requests
     |                                                                                         ^^^^^^^^^^^
1516 |         if hit_rate < 0.5:
1517 |         pass
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1517:9
     |
1515 |         hit_rate = (cache_stats.get("l1_hits", 0) + cache_stats.get("l2_hits", 0)) / total_requests
1516 |         if hit_rate < 0.5:
1517 |         pass
     |         ^^^^
1518 |             recommendations.append({
1519 |                 "category": "cache",
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1518:1
     |
1516 |         if hit_rate < 0.5:
1517 |         pass
1518 |             recommendations.append({
     | ^^^^^^^^^^^^
1519 |                 "category": "cache",
1520 |                 "severity": "warning",
     |

E501 Line too long (108 > 88)
    --> backend\backend.py:1521:89
     |
1519 |                 "category": "cache",
1520 |                 "severity": "warning",
1521 |                 "message": f"Cache hit rate is low ({hit_rate:.1%}). Consider optimizing caching strategy.",
     |                                                                                         ^^^^^^^^^^^^^^^^^^^^
1522 |                 "action": "Review cache keys, TTL settings, and caching patterns"
1523 |             })
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1524:9
     |
1522 |                 "action": "Review cache keys, TTL settings, and caching patterns"
1523 |             })
1524 |         elif hit_rate > 0.9:
     |         ^
1525 |         pass
1526 |             recommendations.append({
     |

invalid-syntax: Invalid annotated assignment target
    --> backend\backend.py:1524:14
     |
1522 |                 "action": "Review cache keys, TTL settings, and caching patterns"
1523 |             })
1524 |         elif hit_rate > 0.9:
     |              ^^^^^^^^^^^^^^
1525 |         pass
1526 |             recommendations.append({
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1524:29
     |
1522 |                 "action": "Review cache keys, TTL settings, and caching patterns"
1523 |             })
1524 |         elif hit_rate > 0.9:
     |                             ^
1525 |         pass
1526 |             recommendations.append({
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1526:1
     |
1524 |         elif hit_rate > 0.9:
1525 |         pass
1526 |             recommendations.append({
     | ^^^^^^^^^^^^
1527 |                 "category": "cache",
1528 |                 "severity": "info",
     |

E501 Line too long (106 > 88)
    --> backend\backend.py:1529:89
     |
1527 |                 "category": "cache",
1528 |                 "severity": "info",
1529 |                 "message": f"Excellent cache performance ({hit_rate:.1%}). Cache is working effectively.",
     |                                                                                         ^^^^^^^^^^^^^^^^^^
1530 |                 "action": "No action needed - maintain current caching strategy"
1531 |             })
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1533:9
     |
1531 |             })
1532 |         # General recommendations
1533 |         if len(recommendations) == 0:
     |         ^
1534 |         pass
1535 |             recommendations.append({
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1534:9
     |
1532 |         # General recommendations
1533 |         if len(recommendations) == 0:
1534 |         pass
     |         ^^^^
1535 |             recommendations.append({
1536 |                 "category": "general",
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1535:1
     |
1533 |         if len(recommendations) == 0:
1534 |         pass
1535 |             recommendations.append({
     | ^^^^^^^^^^^^
1536 |                 "category": "general",
1537 |                 "severity": "info",
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1541:5
     |
1539 |                 "action": "Continue monitoring performance metrics"
1540 |             })
1541 |     except Exception as e:
     |     ^
1542 |         pass
1543 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1541:22
     |
1539 |                 "action": "Continue monitoring performance metrics"
1540 |             })
1541 |     except Exception as e:
     |                      ^^
1542 |         pass
1543 |         pass
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1541:27
     |
1539 |                 "action": "Continue monitoring performance metrics"
1540 |             })
1541 |     except Exception as e:
     |                           ^
1542 |         pass
1543 |         pass
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1542:1
     |
1540 |             })
1541 |     except Exception as e:
1542 |         pass
     | ^^^^^^^^
1543 |         pass
1544 |         recommendations.append({
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1550:5
     |
1548 |             "action": "Check system logs for more details"
1549 |         })
1550 |     return recommendations
     |     ^
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1554:1
     |
1553 | # Background optimization tasks
1554 | async def _cleanup_expired_cache():
     | ^
1555 |     pass
1556 |     """Clean up expired cache entries"""
     |

invalid-syntax: Expected an indented block after `for` statement
    --> backend\backend.py:1565:9
     |
1563 |         ]
1564 |         for key in expired_keys:
1565 |         pass
     |         ^^^^
1566 |             del cache_manager.l1_cache[key]
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1566:1
     |
1564 |         for key in expired_keys:
1565 |         pass
1566 |             del cache_manager.l1_cache[key]
     | ^^^^^^^^^^^^
1567 |
1568 |         # Clean L2 cache
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1569:9
     |
1568 |         # Clean L2 cache
1569 |         expired_keys = [
     |         ^^^^^^^^^^^^
1570 |             key for key, entry in cache_manager.l2_cache.items() if entry.is_expired()
1571 |         ]
     |

invalid-syntax: Expected an indented block after `for` statement
    --> backend\backend.py:1573:9
     |
1571 |         ]
1572 |         for key in expired_keys:
1573 |         pass
     |         ^^^^
1574 |             del cache_manager.l2_cache[key]
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1574:1
     |
1572 |         for key in expired_keys:
1573 |         pass
1574 |             del cache_manager.l2_cache[key]
     | ^^^^^^^^^^^^
1575 |
1576 |         cache_manager._persist_l2_cache()
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1578:5
     |
1576 |         cache_manager._persist_l2_cache()
1577 |
1578 |     except Exception as e:
     |     ^
1579 |         pass
1580 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1578:22
     |
1576 |         cache_manager._persist_l2_cache()
1577 |
1578 |     except Exception as e:
     |                      ^^
1579 |         pass
1580 |         pass
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1578:27
     |
1576 |         cache_manager._persist_l2_cache()
1577 |
1578 |     except Exception as e:
     |                           ^
1579 |         pass
1580 |         pass
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1579:1
     |
1578 |     except Exception as e:
1579 |         pass
     | ^^^^^^^^
1580 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1583:1
     |
1583 | async def _optimize_connection_pools():
     | ^
1584 |     """Optimize connection pools by cleaning idle connections"""
1585 |     try:
     |

invalid-syntax: Expected an indented block after `for` statement
    --> backend\backend.py:1590:9
     |
1589 |         for _, pool in _perf._connection_pools.items():
1590 |         pass
     |         ^^^^
1591 |             pool.cleanup_idle_connections()
1592 |     except Exception as e:
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1591:1
     |
1589 |         for _, pool in _perf._connection_pools.items():
1590 |         pass
1591 |             pool.cleanup_idle_connections()
     | ^^^^^^^^^^^^
1592 |     except Exception as e:
1593 |         pass
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1592:5
     |
1590 |         pass
1591 |             pool.cleanup_idle_connections()
1592 |     except Exception as e:
     |     ^
1593 |         pass
1594 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1592:22
     |
1590 |         pass
1591 |             pool.cleanup_idle_connections()
1592 |     except Exception as e:
     |                      ^^
1593 |         pass
1594 |         pass
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1592:27
     |
1590 |         pass
1591 |             pool.cleanup_idle_connections()
1592 |     except Exception as e:
     |                           ^
1593 |         pass
1594 |         pass
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1593:1
     |
1591 |             pool.cleanup_idle_connections()
1592 |     except Exception as e:
1593 |         pass
     | ^^^^^^^^
1594 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1597:1
     |
1597 | async def _collect_performance_metrics():
     | ^
1598 |     pass
1599 |     """Collect and log performance metrics"""
     |

invalid-syntax: Expected an indented block after `try` statement
    --> backend\backend.py:1692:9
     |
1690 |     if PID_FILE.exists():
1691 |         try:
1692 |         pass
     |         ^^^^
1693 |             return int(PID_FILE.read_text().strip())
1694 |         except Exception:
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1693:1
     |
1691 |         try:
1692 |         pass
1693 |             return int(PID_FILE.read_text().strip())
     | ^^^^^^^^^^^^
1694 |         except Exception:
1695 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1694:9
     |
1692 |         pass
1693 |             return int(PID_FILE.read_text().strip())
1694 |         except Exception:
     |         ^^^^^^
1695 |         pass
1696 |             return None
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1694:26
     |
1692 |         pass
1693 |             return int(PID_FILE.read_text().strip())
1694 |         except Exception:
     |                          ^
1695 |         pass
1696 |             return None
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1696:1
     |
1694 |         except Exception:
1695 |         pass
1696 |             return None
     | ^^^^^^^^^^^^
1697 |     return None
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1697:5
     |
1695 |         pass
1696 |             return None
1697 |     return None
     |     ^
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1700:1
     |
1700 | def _is_running(pid):
     | ^
1701 |     try:
1702 |         pass
     |

invalid-syntax: Expected an indented block after `try` statement
    --> backend\backend.py:1712:9
     |
1711 |         try:
1712 |         pass
     |         ^^^^
1713 |             os.kill(pid, 0)
1714 |             return True
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1713:1
     |
1711 |         try:
1712 |         pass
1713 |             os.kill(pid, 0)
     | ^^^^^^^^^^^^
1714 |             return True
1715 |         except Exception:
     |

invalid-syntax: Expected an indented block after `except` clause
    --> backend\backend.py:1716:9
     |
1714 |             return True
1715 |         except Exception:
1716 |         pass
     |         ^^^^
1717 |             return False
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1717:1
     |
1715 |         except Exception:
1716 |         pass
1717 |             return False
     | ^^^^^^^^^^^^
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1720:1
     |
1720 | def _start_server(port=DEFAULT_PORT, reload=False):
     | ^
1721 |     if _get_pid():
1722 |         pass
     |

E501 Line too long (101 > 88)
    --> backend\backend.py:1804:89
     |
1802 | try:
1803 |     pass
1804 |     # When imported as top-level module 'backend', make it behave like a package for submodule import
     |                                                                                         ^^^^^^^^^^^^^
1805 |     this_mod = _sys.modules.get(__name__)
1806 |     if this_mod is not None:
     |

E501 Line too long (90 > 88)
    --> backend\backend.py:1810:89
     |
1808 |         # Expose attribute for patch targets: backend.backend -> this module
1809 |         this_mod.__dict__.setdefault("backend", this_mod)
1810 |         # Mark as package-like: provide __path__ so import system allows 'backend.backend'
     |                                                                                         ^^
1811 |         if not hasattr(this_mod, "__path__"):
1812 |         pass
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1812:9
     |
1810 |         # Mark as package-like: provide __path__ so import system allows 'backend.backend'
1811 |         if not hasattr(this_mod, "__path__"):
1812 |         pass
     |         ^^^^
1813 |             this_mod.__path__ = []  # type: ignore[attr-defined]
1814 |         # Register alias in sys.modules
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1813:1
     |
1811 |         if not hasattr(this_mod, "__path__"):
1812 |         pass
1813 |             this_mod.__path__ = []  # type: ignore[attr-defined]
     | ^^^^^^^^^^^^
1814 |         # Register alias in sys.modules
1815 |         fq_name = "backend.backend"
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1817:1
     |
1815 |         fq_name = "backend.backend"
1816 |         _sys.modules.setdefault(fq_name, this_mod)
1817 | except Exception as e:
     | ^
1818 |     pass
1819 |     import logging
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1817:18
     |
1815 |         fq_name = "backend.backend"
1816 |         _sys.modules.setdefault(fq_name, this_mod)
1817 | except Exception as e:
     |                  ^^
1818 |     pass
1819 |     import logging
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1817:23
     |
1815 |         fq_name = "backend.backend"
1816 |         _sys.modules.setdefault(fq_name, this_mod)
1817 | except Exception as e:
     |                       ^
1818 |     pass
1819 |     import logging
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1818:1
     |
1816 |         _sys.modules.setdefault(fq_name, this_mod)
1817 | except Exception as e:
1818 |     pass
     | ^^^^
1819 |     import logging
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1828:1
     |
1826 | # ===================================
1827 |
1828 | @app.get("/api/openspec/changes")
     | ^
1829 | async def list_openspec_changes(include_archived: bool = False):
1830 |     """List all OpenSpec changes with their status"""
     |

E501 Line too long (95 > 88)
    --> backend\backend.py:1842:89
     |
1840 |     except Exception as e:
1841 |         pass
1842 |         raise HTTPException(status_code=500, detail=f"Failed to list changes: {str(e)}") from e
     |                                                                                         ^^^^^^^
1843 |
1844 | @app.get("/api/openspec/changes/{change_id}")
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1852:9
     |
1850 |         details = governance.get_change_details(change_id)
1851 |         if "error" in details:
1852 |         pass
     |         ^^^^
1853 |             raise HTTPException(status_code=404, detail=details["error"])
1854 |         return {
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1853:1
     |
1851 |         if "error" in details:
1852 |         pass
1853 |             raise HTTPException(status_code=404, detail=details["error"])
     | ^^^^^^^^^^^^
1854 |         return {
1855 |             "success": True,
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1854:9
     |
1852 |         pass
1853 |             raise HTTPException(status_code=404, detail=details["error"])
1854 |         return {
     |         ^^^^^^
1855 |             "success": True,
1856 |             "change": details
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1858:5
     |
1856 |             "change": details
1857 |         }
1858 |     except HTTPException:
     |     ^^^^^^
1859 |         pass
1860 |         raise
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1858:26
     |
1856 |             "change": details
1857 |         }
1858 |     except HTTPException:
     |                          ^
1859 |         pass
1860 |         raise
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1859:1
     |
1857 |         }
1858 |     except HTTPException:
1859 |         pass
     | ^^^^^^^^
1860 |         raise
1861 |     except Exception as e:
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1861:5
     |
1859 |         pass
1860 |         raise
1861 |     except Exception as e:
     |     ^
1862 |         pass
1863 |         raise HTTPException(status_code=500, detail=f"Failed to get change details: {str(e)}") from e
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1861:22
     |
1859 |         pass
1860 |         raise
1861 |     except Exception as e:
     |                      ^^
1862 |         pass
1863 |         raise HTTPException(status_code=500, detail=f"Failed to get change details: {str(e)}") from e
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1861:27
     |
1859 |         pass
1860 |         raise
1861 |     except Exception as e:
     |                           ^
1862 |         pass
1863 |         raise HTTPException(status_code=500, detail=f"Failed to get change details: {str(e)}") from e
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1862:1
     |
1860 |         raise
1861 |     except Exception as e:
1862 |         pass
     | ^^^^^^^^
1863 |         raise HTTPException(status_code=500, detail=f"Failed to get change details: {str(e)}") from e
     |

E501 Line too long (101 > 88)
    --> backend\backend.py:1863:89
     |
1861 |     except Exception as e:
1862 |         pass
1863 |         raise HTTPException(status_code=500, detail=f"Failed to get change details: {str(e)}") from e
     |                                                                                         ^^^^^^^^^^^^^
1864 |
1865 | @app.post("/api/openspec/changes/{change_id}/validate")
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1865:1
     |
1863 |         raise HTTPException(status_code=500, detail=f"Failed to get change details: {str(e)}") from e
1864 |
1865 | @app.post("/api/openspec/changes/{change_id}/validate")
     | ^
1866 | async def validate_openspec_change(change_id: str):
1867 |     """Validate a specific OpenSpec change"""
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1873:9
     |
1871 |         validation = governance.validate_change(change_id)
1872 |         if "error" in validation:
1873 |         pass
     |         ^^^^
1874 |             raise HTTPException(status_code=404, detail=validation["error"])
1875 |         return {
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1874:1
     |
1872 |         if "error" in validation:
1873 |         pass
1874 |             raise HTTPException(status_code=404, detail=validation["error"])
     | ^^^^^^^^^^^^
1875 |         return {
1876 |             "success": True,
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1875:9
     |
1873 |         pass
1874 |             raise HTTPException(status_code=404, detail=validation["error"])
1875 |         return {
     |         ^^^^^^
1876 |             "success": True,
1877 |             "validation": validation
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1879:5
     |
1877 |             "validation": validation
1878 |         }
1879 |     except HTTPException:
     |     ^^^^^^
1880 |         pass
1881 |         raise
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1879:26
     |
1877 |             "validation": validation
1878 |         }
1879 |     except HTTPException:
     |                          ^
1880 |         pass
1881 |         raise
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1880:1
     |
1878 |         }
1879 |     except HTTPException:
1880 |         pass
     | ^^^^^^^^
1881 |         raise
1882 |     except Exception as e:
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1882:5
     |
1880 |         pass
1881 |         raise
1882 |     except Exception as e:
     |     ^
1883 |         pass
1884 |         raise HTTPException(status_code=500, detail=f"Failed to validate change: {str(e)}") from e
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1882:22
     |
1880 |         pass
1881 |         raise
1882 |     except Exception as e:
     |                      ^^
1883 |         pass
1884 |         raise HTTPException(status_code=500, detail=f"Failed to validate change: {str(e)}") from e
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1882:27
     |
1880 |         pass
1881 |         raise
1882 |     except Exception as e:
     |                           ^
1883 |         pass
1884 |         raise HTTPException(status_code=500, detail=f"Failed to validate change: {str(e)}") from e
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1883:1
     |
1881 |         raise
1882 |     except Exception as e:
1883 |         pass
     | ^^^^^^^^
1884 |         raise HTTPException(status_code=500, detail=f"Failed to validate change: {str(e)}") from e
     |

E501 Line too long (98 > 88)
    --> backend\backend.py:1884:89
     |
1882 |     except Exception as e:
1883 |         pass
1884 |         raise HTTPException(status_code=500, detail=f"Failed to validate change: {str(e)}") from e
     |                                                                                         ^^^^^^^^^^
1885 |
1886 | @app.post("/api/openspec/changes/{change_id}/apply")
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1886:1
     |
1884 |         raise HTTPException(status_code=500, detail=f"Failed to validate change: {str(e)}") from e
1885 |
1886 | @app.post("/api/openspec/changes/{change_id}/apply")
     | ^
1887 | async def apply_openspec_change(change_id: str, dry_run: bool = True):
1888 |     """Apply an approved OpenSpec change"""
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1894:9
     |
1892 |         result = governance.apply_change(change_id, dry_run=dry_run)
1893 |         if "error" in result:
1894 |         pass
     |         ^^^^
1895 |             raise HTTPException(status_code=400, detail=result["error"])
1896 |         return {
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1895:1
     |
1893 |         if "error" in result:
1894 |         pass
1895 |             raise HTTPException(status_code=400, detail=result["error"])
     | ^^^^^^^^^^^^
1896 |         return {
1897 |             "success": True,
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1896:9
     |
1894 |         pass
1895 |             raise HTTPException(status_code=400, detail=result["error"])
1896 |         return {
     |         ^^^^^^
1897 |             "success": True,
1898 |             "result": result
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1900:5
     |
1898 |             "result": result
1899 |         }
1900 |     except HTTPException:
     |     ^^^^^^
1901 |         pass
1902 |         raise
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1900:26
     |
1898 |             "result": result
1899 |         }
1900 |     except HTTPException:
     |                          ^
1901 |         pass
1902 |         raise
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1901:1
     |
1899 |         }
1900 |     except HTTPException:
1901 |         pass
     | ^^^^^^^^
1902 |         raise
1903 |     except Exception as e:
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1903:5
     |
1901 |         pass
1902 |         raise
1903 |     except Exception as e:
     |     ^
1904 |         pass
1905 |         raise HTTPException(status_code=500, detail=f"Failed to apply change: {str(e)}") from e
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1903:22
     |
1901 |         pass
1902 |         raise
1903 |     except Exception as e:
     |                      ^^
1904 |         pass
1905 |         raise HTTPException(status_code=500, detail=f"Failed to apply change: {str(e)}") from e
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1903:27
     |
1901 |         pass
1902 |         raise
1903 |     except Exception as e:
     |                           ^
1904 |         pass
1905 |         raise HTTPException(status_code=500, detail=f"Failed to apply change: {str(e)}") from e
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1904:1
     |
1902 |         raise
1903 |     except Exception as e:
1904 |         pass
     | ^^^^^^^^
1905 |         raise HTTPException(status_code=500, detail=f"Failed to apply change: {str(e)}") from e
     |

E501 Line too long (95 > 88)
    --> backend\backend.py:1905:89
     |
1903 |     except Exception as e:
1904 |         pass
1905 |         raise HTTPException(status_code=500, detail=f"Failed to apply change: {str(e)}") from e
     |                                                                                         ^^^^^^^
1906 |
1907 | @app.post("/api/openspec/changes/{change_id}/archive")
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1907:1
     |
1905 |         raise HTTPException(status_code=500, detail=f"Failed to apply change: {str(e)}") from e
1906 |
1907 | @app.post("/api/openspec/changes/{change_id}/archive")
     | ^
1908 | async def archive_openspec_change(change_id: str, create_timestamp: bool = True):
1909 |     """Archive a completed OpenSpec change"""
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:1915:9
     |
1913 |         result = governance.archive_change(change_id, create_timestamp=create_timestamp)
1914 |         if "error" in result:
1915 |         pass
     |         ^^^^
1916 |             raise HTTPException(status_code=400, detail=result["error"])
1917 |         return {
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1916:1
     |
1914 |         if "error" in result:
1915 |         pass
1916 |             raise HTTPException(status_code=400, detail=result["error"])
     | ^^^^^^^^^^^^
1917 |         return {
1918 |             "success": True,
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:1917:9
     |
1915 |         pass
1916 |             raise HTTPException(status_code=400, detail=result["error"])
1917 |         return {
     |         ^^^^^^
1918 |             "success": True,
1919 |             "result": result
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1921:5
     |
1919 |             "result": result
1920 |         }
1921 |     except HTTPException:
     |     ^^^^^^
1922 |         pass
1923 |         raise
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1921:26
     |
1919 |             "result": result
1920 |         }
1921 |     except HTTPException:
     |                          ^
1922 |         pass
1923 |         raise
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1922:1
     |
1920 |         }
1921 |     except HTTPException:
1922 |         pass
     | ^^^^^^^^
1923 |         raise
1924 |     except Exception as e:
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1924:5
     |
1922 |         pass
1923 |         raise
1924 |     except Exception as e:
     |     ^
1925 |         pass
1926 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1924:22
     |
1922 |         pass
1923 |         raise
1924 |     except Exception as e:
     |                      ^^
1925 |         pass
1926 |         raise HTTPException(
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:1924:27
     |
1922 |         pass
1923 |         raise
1924 |     except Exception as e:
     |                           ^
1925 |         pass
1926 |         raise HTTPException(
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:1925:1
     |
1923 |         raise
1924 |     except Exception as e:
1925 |         pass
     | ^^^^^^^^
1926 |         raise HTTPException(
1927 |             status_code=500,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:1931:1
     |
1929 |         ) from e
1930 |
1931 | @app.post("/api/openspec/validate-bulk")
     | ^
1932 | async def bulk_validate_openspec_changes(change_ids: Optional[List[str]] = None):
1933 |     """Validate multiple OpenSpec changes in bulk"""
     |

invalid-syntax: Expected an indented block after `try` statement
    --> backend\backend.py:2011:9
     |
2009 |         # Add rate limiting status if available
2010 |         try:
2011 |         pass
     |         ^^^^
2012 |             from .rate_limiting import get_security_status
2013 |             rate_limit_status = get_security_status()
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2012:1
     |
2010 |         try:
2011 |         pass
2012 |             from .rate_limiting import get_security_status
     | ^^^^^^^^^^^^
2013 |             rate_limit_status = get_security_status()
2014 |             status["rate_limiting"] = rate_limit_status
     |

invalid-syntax: Expected an indented block after `except` clause
    --> backend\backend.py:2016:9
     |
2014 |             status["rate_limiting"] = rate_limit_status
2015 |         except ImportError:
2016 |         pass
     |         ^^^^
2017 |             status["rate_limiting"] = {"enabled": False}
2018 |         return {
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2017:1
     |
2015 |         except ImportError:
2016 |         pass
2017 |             status["rate_limiting"] = {"enabled": False}
     | ^^^^^^^^^^^^
2018 |         return {
2019 |             "success": True,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2023:5
     |
2021 |             "timestamp": datetime.now().isoformat()
2022 |         }
2023 |     except Exception as e:
     |     ^
2024 |         pass
2025 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2023:22
     |
2021 |             "timestamp": datetime.now().isoformat()
2022 |         }
2023 |     except Exception as e:
     |                      ^^
2024 |         pass
2025 |         pass
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:2023:27
     |
2021 |             "timestamp": datetime.now().isoformat()
2022 |         }
2023 |     except Exception as e:
     |                           ^
2024 |         pass
2025 |         pass
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2024:1
     |
2022 |         }
2023 |     except Exception as e:
2024 |         pass
     | ^^^^^^^^
2025 |         pass
2026 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2031:1
     |
2029 |         ) from e
2030 |
2031 | @app.get("/api/security/events")
     | ^
2032 | async def get_security_events(
2033 |     severity: Optional[str] = None,
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:2042:9
     |
2040 |         security_config = get_advanced_security_config()
2041 |         if not security_config.audit_logger:
2042 |         pass
     |         ^^^^
2043 |             return {
2044 |                 "success": False,
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2043:1
     |
2041 |         if not security_config.audit_logger:
2042 |         pass
2043 |             return {
     | ^^^^^^^^^^^^
2044 |                 "success": False,
2045 |                 "error": "Audit logging not enabled",
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:2049:9
     |
2047 |             }
2048 |         # Convert severity string to enum if provided
2049 |         severity_enum = None
     |         ^^^^^^^^^^^^^
2050 |         if severity:
2051 |         pass
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:2051:9
     |
2049 |         severity_enum = None
2050 |         if severity:
2051 |         pass
     |         ^^^^
2052 |             try:
2053 |                 severity_enum = ThreatLevel(severity.lower())
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2052:1
     |
2050 |         if severity:
2051 |         pass
2052 |             try:
     | ^^^^^^^^^^^^
2053 |                 severity_enum = ThreatLevel(severity.lower())
2054 |             except ValueError as e:
     |

invalid-syntax: Expected an indented block after `except` clause
    --> backend\backend.py:2055:13
     |
2053 |                 severity_enum = ThreatLevel(severity.lower())
2054 |             except ValueError as e:
2055 |             pass
     |             ^^^^
2056 |                 raise HTTPException(
2057 |                     status_code=400,
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2056:1
     |
2054 |             except ValueError as e:
2055 |             pass
2056 |                 raise HTTPException(
     | ^^^^^^^^^^^^^^^^
2057 |                     status_code=400,
2058 |                     detail=f"Invalid severity level: {severity}",
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2060:9
     |
2058 |                     detail=f"Invalid severity level: {severity}",
2059 |                 ) from e
2060 |         events = security_config.audit_logger.get_recent_events(
     |         ^
2061 |             severity=severity_enum,
2062 |             event_type=event_type,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2075:5
     |
2073 |             }
2074 |         }
2075 |     except Exception as e:
     |     ^
2076 |         pass
2077 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2075:22
     |
2073 |             }
2074 |         }
2075 |     except Exception as e:
     |                      ^^
2076 |         pass
2077 |         raise HTTPException(
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:2075:27
     |
2073 |             }
2074 |         }
2075 |     except Exception as e:
     |                           ^
2076 |         pass
2077 |         raise HTTPException(
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2076:1
     |
2074 |         }
2075 |     except Exception as e:
2076 |         pass
     | ^^^^^^^^
2077 |         raise HTTPException(
2078 |             status_code=500,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2082:1
     |
2080 |         ) from e
2081 |
2082 | @app.post("/api/security/clear-cache")
     | ^
2083 | async def clear_security_cache():
2084 |     """Clear security-related caches and reset monitoring"""
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:2118:9
     |
2116 |         security_config = get_advanced_security_config()
2117 |         if not security_config.compliance_manager:
2118 |         pass
     |         ^^^^
2119 |             return {
2120 |                 "success": False,
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2119:1
     |
2117 |         if not security_config.compliance_manager:
2118 |         pass
2119 |             return {
     | ^^^^^^^^^^^^
2120 |                 "success": False,
2121 |                 "error": "Compliance monitoring not enabled"
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:2123:9
     |
2121 |                 "error": "Compliance monitoring not enabled"
2122 |             }
2123 |         compliance_report = (
     |         ^^^^^^^^^^^^^^^^^
2124 |             security_config.compliance_manager.generate_compliance_report()
2125 |         )
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2131:5
     |
2129 |             "timestamp": datetime.now().isoformat()
2130 |         }
2131 |     except Exception as e:
     |     ^^^^^^
2132 |         pass
2133 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2131:22
     |
2129 |             "timestamp": datetime.now().isoformat()
2130 |         }
2131 |     except Exception as e:
     |                      ^^
2132 |         pass
2133 |         pass
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:2131:27
     |
2129 |             "timestamp": datetime.now().isoformat()
2130 |         }
2131 |     except Exception as e:
     |                           ^
2132 |         pass
2133 |         pass
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2132:1
     |
2130 |         }
2131 |     except Exception as e:
2132 |         pass
     | ^^^^^^^^
2133 |         pass
2134 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2139:1
     |
2137 |         ) from e
2138 |
2139 | @app.post("/api/security/gdpr/deletion-request")
     | ^
2140 | async def handle_gdpr_deletion_request(user_id: str):
2141 |     """Handle GDPR right to be forgotten request"""
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:2146:9
     |
2144 |         security_config = get_advanced_security_config()
2145 |         if not security_config.compliance_manager:
2146 |         pass
     |         ^^^^
2147 |             raise HTTPException(status_code=501, detail="GDPR compliance not enabled")
2148 |         result = security_config.compliance_manager.handle_data_deletion_request(
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2147:1
     |
2145 |         if not security_config.compliance_manager:
2146 |         pass
2147 |             raise HTTPException(status_code=501, detail="GDPR compliance not enabled")
     | ^^^^^^^^^^^^
2148 |         result = security_config.compliance_manager.handle_data_deletion_request(
2149 |             user_id
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:2148:9
     |
2146 |         pass
2147 |             raise HTTPException(status_code=501, detail="GDPR compliance not enabled")
2148 |         result = security_config.compliance_manager.handle_data_deletion_request(
     |         ^^^^^^
2149 |             user_id
2150 |         )
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2156:5
     |
2154 |             "timestamp": datetime.now().isoformat()
2155 |         }
2156 |     except Exception as e:
     |     ^^^^^^
2157 |         pass
2158 |         pass
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2156:22
     |
2154 |             "timestamp": datetime.now().isoformat()
2155 |         }
2156 |     except Exception as e:
     |                      ^^
2157 |         pass
2158 |         pass
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:2156:27
     |
2154 |             "timestamp": datetime.now().isoformat()
2155 |         }
2156 |     except Exception as e:
     |                           ^
2157 |         pass
2158 |         pass
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2157:1
     |
2155 |         }
2156 |     except Exception as e:
2157 |         pass
     | ^^^^^^^^
2158 |         pass
2159 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2164:1
     |
2162 |         ) from e
2163 |
2164 | @app.get("/api/security/dashboard")
     | ^
2165 | async def get_security_dashboard():
2166 |     """Get comprehensive security monitoring dashboard"""
     |

invalid-syntax: Expected an indented block after `if` statement
    --> backend\backend.py:2175:9
     |
2173 |         high_severity_events = []
2174 |         if security_config.audit_logger:
2175 |         pass
     |         ^^^^
2176 |             high_severity_events = security_config.audit_logger.get_recent_events(
2177 |                 severity=ThreatLevel.HIGH,
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2176:1
     |
2174 |         if security_config.audit_logger:
2175 |         pass
2176 |             high_severity_events = security_config.audit_logger.get_recent_events(
     | ^^^^^^^^^^^^
2177 |                 severity=ThreatLevel.HIGH,
2178 |                 limit=20
     |

invalid-syntax: Expected `except` or `finally` after `try` block
    --> backend\backend.py:2181:9
     |
2179 |             )
2180 |         # Get rate limiting status
2181 |         rate_limit_status = {}
     |         ^^^^^^^^^^^^^^^^^
2182 |         try:
2183 |         pass
     |

invalid-syntax: Expected an indented block after `try` statement
    --> backend\backend.py:2183:9
     |
2181 |         rate_limit_status = {}
2182 |         try:
2183 |         pass
     |         ^^^^
2184 |             from .rate_limiting import get_security_status
2185 |             rate_limit_status = get_security_status()
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2184:1
     |
2182 |         try:
2183 |         pass
2184 |             from .rate_limiting import get_security_status
     | ^^^^^^^^^^^^
2185 |             rate_limit_status = get_security_status()
2186 |         except ImportError:
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2186:9
     |
2184 |             from .rate_limiting import get_security_status
2185 |             rate_limit_status = get_security_status()
2186 |         except ImportError:
     |         ^^^^^^
2187 |         pass
2188 |             rate_limit_status = {"enabled": False}
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:2186:28
     |
2184 |             from .rate_limiting import get_security_status
2185 |             rate_limit_status = get_security_status()
2186 |         except ImportError:
     |                            ^
2187 |         pass
2188 |             rate_limit_status = {"enabled": False}
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2188:1
     |
2186 |         except ImportError:
2187 |         pass
2188 |             rate_limit_status = {"enabled": False}
     | ^^^^^^^^^^^^
2189 |         dashboard_data = {
2190 |             "security_overview": security_status,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2189:9
     |
2187 |         pass
2188 |             rate_limit_status = {"enabled": False}
2189 |         dashboard_data = {
     |         ^
2190 |             "security_overview": security_status,
2191 |             "rate_limiting": rate_limit_status,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2200:5
     |
2198 |             "dashboard": dashboard_data
2199 |         }
2200 |     except Exception as e:
     |     ^
2201 |         pass
2202 |         raise HTTPException(
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2200:22
     |
2198 |             "dashboard": dashboard_data
2199 |         }
2200 |     except Exception as e:
     |                      ^^
2201 |         pass
2202 |         raise HTTPException(
     |

invalid-syntax: Expected an expression
    --> backend\backend.py:2200:27
     |
2198 |             "dashboard": dashboard_data
2199 |         }
2200 |     except Exception as e:
     |                           ^
2201 |         pass
2202 |         raise HTTPException(
     |

invalid-syntax: Unexpected indentation
    --> backend\backend.py:2201:1
     |
2199 |         }
2200 |     except Exception as e:
2201 |         pass
     | ^^^^^^^^
2202 |         raise HTTPException(
2203 |             status_code=500,
     |

invalid-syntax: Expected a statement
    --> backend\backend.py:2207:1
     |
2205 |         ) from e
2206 | # Do not initialize services at import time to keep startup fast for the server
     |                                                                                ^
     |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\caching.py:35:9
   |
34 |         if self.cache_file.exists():
35 |         pass
   |         ^^^^
36 |             def do_load():
37 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
   |

invalid-syntax: Unexpected indentation
  --> backend\caching.py:36:1
   |
34 |         if self.cache_file.exists():
35 |         pass
36 |             def do_load():
   | ^^^^^^^^^^^^
37 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
38 |             pass
   |

invalid-syntax: Expected an indented block after `with` statement
  --> backend\caching.py:37:72
   |
35 |         pass
36 |             def do_load():
37 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
   |                                                                        ^
38 |             pass
39 |                     return json.load(f)
   |

invalid-syntax: Unexpected indentation
  --> backend\caching.py:39:1
   |
37 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
38 |             pass
39 |                     return json.load(f)
   | ^^^^^^^^^^^^^^^^^^^^
40 |
41 |             self.cache = safe_call(
   |

invalid-syntax: Expected a statement
  --> backend\caching.py:45:5
   |
43 |             )
44 |
45 |     def _hash_question(self, question: str) -> str:
   |     ^
46 |         """Create a consistent hash for a question string."""
47 |         return hashlib.sha256(question.encode("utf-8")).hexdigest()
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\caching.py:51:9
   |
49 |     def get_cached_answer(self, question: str, timeout: float = 2.0) -> Optional[str]:
50 |         if question is None:
51 |         pass
   |         ^^^^
52 |             return None
53 |         key = self._hash_question(question)
   |

invalid-syntax: Unexpected indentation
  --> backend\caching.py:52:1
   |
50 |         if question is None:
51 |         pass
52 |             return None
   | ^^^^^^^^^^^^
53 |         key = self._hash_question(question)
54 |         entry = self.cache.get(key)
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\caching.py:56:9
   |
54 |         entry = self.cache.get(key)
55 |         if not entry:
56 |         pass
   |         ^^^^
57 |             return None
58 |         if "timestamp" in entry and time.time() - entry["timestamp"] > self.ttl:
   |

invalid-syntax: Unexpected indentation
  --> backend\caching.py:57:1
   |
55 |         if not entry:
56 |         pass
57 |             return None
   | ^^^^^^^^^^^^
58 |         if "timestamp" in entry and time.time() - entry["timestamp"] > self.ttl:
59 |         pass
   |

invalid-syntax: Expected a statement
  --> backend\caching.py:58:9
   |
56 |         pass
57 |             return None
58 |         if "timestamp" in entry and time.time() - entry["timestamp"] > self.ttl:
   |         ^
59 |         pass
60 |             return None
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\caching.py:59:9
   |
57 |             return None
58 |         if "timestamp" in entry and time.time() - entry["timestamp"] > self.ttl:
59 |         pass
   |         ^^^^
60 |             return None
61 |         return entry.get("answer")
   |

invalid-syntax: Unexpected indentation
  --> backend\caching.py:60:1
   |
58 |         if "timestamp" in entry and time.time() - entry["timestamp"] > self.ttl:
59 |         pass
60 |             return None
   | ^^^^^^^^^^^^
61 |         return entry.get("answer")
   |

invalid-syntax: Expected a statement
  --> backend\caching.py:61:9
   |
59 |         pass
60 |             return None
61 |         return entry.get("answer")
   |         ^
62 |
63 |     def store_answer(self, question: str, answer: str, timeout: float = 2.0):
   |

invalid-syntax: Expected a statement
  --> backend\caching.py:63:5
   |
61 |         return entry.get("answer")
62 |
63 |     def store_answer(self, question: str, answer: str, timeout: float = 2.0):
   |     ^
64 |         key = self._hash_question(question)
65 |         self.cache[key] = {"answer": answer, "timestamp": time.time()}
   |

invalid-syntax: Expected an indented block after `with` statement
  --> backend\caching.py:69:13
   |
67 |         def do_store():
68 |             with open(self.cache_file, "w", encoding="utf-8") as f:
69 |             pass
   |             ^^^^
70 |                 json.dump(self.cache, f, ensure_ascii=False, indent=2)
   |

invalid-syntax: Unexpected indentation
  --> backend\caching.py:70:1
   |
68 |             with open(self.cache_file, "w", encoding="utf-8") as f:
69 |             pass
70 |                 json.dump(self.cache, f, ensure_ascii=False, indent=2)
   | ^^^^^^^^^^^^^^^^
71 |
72 |         safe_call(do_store, error_msg="[CacheManager] Error writing cache")
   |

invalid-syntax: Expected a statement
  --> backend\caching.py:75:1
   |
75 | class EmbeddingCache:
   | ^
76 |     """
77 |     Cache for embeddings: text -> embedding vector.
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\caching.py:86:9
   |
85 |         if self.cache_file.exists():
86 |         pass
   |         ^^^^
87 |             def do_load():
88 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
   |

invalid-syntax: Unexpected indentation
  --> backend\caching.py:87:1
   |
85 |         if self.cache_file.exists():
86 |         pass
87 |             def do_load():
   | ^^^^^^^^^^^^
88 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
89 |             pass
   |

invalid-syntax: Expected an indented block after `with` statement
  --> backend\caching.py:88:72
   |
86 |         pass
87 |             def do_load():
88 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
   |                                                                        ^
89 |             pass
90 |                     return json.load(f)
   |

invalid-syntax: Unexpected indentation
  --> backend\caching.py:90:1
   |
88 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
89 |             pass
90 |                     return json.load(f)
   | ^^^^^^^^^^^^^^^^^^^^
91 |
92 |             self.data = safe_call(
   |

invalid-syntax: Expected a statement
  --> backend\caching.py:98:5
   |
96 |             )
97 |
98 |     def _hash_key(self, text: str) -> str:
   |     ^
99 |         return hashlib.sha256(text.strip().encode("utf-8")).hexdigest()
   |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\caching.py:104:9
    |
102 |         key = self._hash_key(text)
103 |         if key in self.data:
104 |         pass
    |         ^^^^
105 |             return self.data[key]
106 |         embedding = safe_call(
    |

invalid-syntax: Unexpected indentation
   --> backend\caching.py:105:1
    |
103 |         if key in self.data:
104 |         pass
105 |             return self.data[key]
    | ^^^^^^^^^^^^
106 |         embedding = safe_call(
107 |             embed_fn,
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\caching.py:116:13
    |
114 |         def do_store():
115 |             with open(self.cache_file, "w", encoding="utf-8") as f:
116 |             pass
    |             ^^^^
117 |                 json.dump(self.data, f)
    |

invalid-syntax: Unexpected indentation
   --> backend\caching.py:117:1
    |
115 |             with open(self.cache_file, "w", encoding="utf-8") as f:
116 |             pass
117 |                 json.dump(self.data, f)
    | ^^^^^^^^^^^^^^^^
118 |
119 |         safe_call(do_store, error_msg="[EmbeddingCache] Error writing cache")
    |

invalid-syntax: Expected a statement
   --> backend\caching.py:119:9
    |
117 |                 json.dump(self.data, f)
118 |
119 |         safe_call(do_store, error_msg="[EmbeddingCache] Error writing cache")
    |         ^
120 |         return embedding
    |

invalid-syntax: Expected a statement
   --> backend\caching.py:123:1
    |
123 | class FileHashCache:
    | ^
124 |     """
125 |     Cache for file hashes: used to skip re-indexing unchanged files.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\caching.py:134:9
    |
133 |         if self.cache_file.exists():
134 |         pass
    |         ^^^^
135 |             def do_load():
136 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
    |

invalid-syntax: Unexpected indentation
   --> backend\caching.py:135:1
    |
133 |         if self.cache_file.exists():
134 |         pass
135 |             def do_load():
    | ^^^^^^^^^^^^
136 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
137 |             pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\caching.py:136:72
    |
134 |         pass
135 |             def do_load():
136 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
    |                                                                        ^
137 |             pass
138 |                     return json.load(f)
    |

invalid-syntax: Unexpected indentation
   --> backend\caching.py:138:1
    |
136 |                 with open(self.cache_file, "r", encoding="utf-8") as f:
137 |             pass
138 |                     return json.load(f)
    | ^^^^^^^^^^^^^^^^^^^^
139 |
140 |             self.data = safe_call(
    |

invalid-syntax: Expected a statement
   --> backend\caching.py:146:5
    |
144 |             )
145 |
146 |     def _hash_file(self, path: Path) -> str:
    |     ^
147 |         def do_hash():
148 |             if not path.is_file():
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\caching.py:149:13
    |
147 |         def do_hash():
148 |             if not path.is_file():
149 |             pass
    |             ^^^^
150 |                 return ""
151 |             h = hashlib.sha256()
    |

invalid-syntax: Unexpected indentation
   --> backend\caching.py:150:1
    |
148 |             if not path.is_file():
149 |             pass
150 |                 return ""
    | ^^^^^^^^^^^^^^^^
151 |             h = hashlib.sha256()
152 |             with open(path, "rb") as f:
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\caching.py:153:13
    |
151 |             h = hashlib.sha256()
152 |             with open(path, "rb") as f:
153 |             pass
    |             ^^^^
154 |                 while chunk := f.read(8192):
155 |                     h.update(chunk)
    |

invalid-syntax: Unexpected indentation
   --> backend\caching.py:154:1
    |
152 |             with open(path, "rb") as f:
153 |             pass
154 |                 while chunk := f.read(8192):
    | ^^^^^^^^^^^^^^^^
155 |                     h.update(chunk)
156 |             return h.hexdigest()
    |

invalid-syntax: Expected a statement
   --> backend\caching.py:158:9
    |
156 |             return h.hexdigest()
157 |
158 |         return safe_call(
    |         ^
159 |             do_hash, error_msg=f"[FileHashCache] Error hashing file {path}", default=""
160 |         )
    |

invalid-syntax: Expected a statement
   --> backend\caching.py:162:5
    |
160 |         )
161 |
162 |     def is_changed(self, path: Path) -> bool:
    |     ^
163 |         new_hash = self._hash_file(path)
164 |         old_hash = self.data.get(str(path))
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\caching.py:166:9
    |
164 |         old_hash = self.data.get(str(path))
165 |         if new_hash != old_hash:
166 |         pass
    |         ^^^^
167 |             self.data[str(path)] = new_hash
    |

invalid-syntax: Unexpected indentation
   --> backend\caching.py:167:1
    |
165 |         if new_hash != old_hash:
166 |         pass
167 |             self.data[str(path)] = new_hash
    | ^^^^^^^^^^^^
168 |
169 |             def do_store():
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\caching.py:170:72
    |
169 |             def do_store():
170 |                 with open(self.cache_file, "w", encoding="utf-8") as f:
    |                                                                        ^
171 |             pass
172 |                     json.dump(self.data, f)
    |

invalid-syntax: Unexpected indentation
   --> backend\caching.py:172:1
    |
170 |                 with open(self.cache_file, "w", encoding="utf-8") as f:
171 |             pass
172 |                     json.dump(self.data, f)
    | ^^^^^^^^^^^^^^^^^^^^
173 |
174 |             safe_call(do_store, error_msg="[FileHashCache] Error writing cache")
    |

invalid-syntax: Expected a statement
   --> backend\caching.py:176:9
    |
174 |             safe_call(do_store, error_msg="[FileHashCache] Error writing cache")
175 |             return True
176 |         return False
    |         ^
    |

invalid-syntax: Expected a statement
   --> backend\caching.py:177:1
    |
175 |             return True
176 |         return False
    |                     ^
    |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\csrf_middleware.py:45:9
   |
43 |             or os.environ.get("TEST_MODE", "").lower() in ("1", "true", "yes", "on")
44 |         ):
45 |         pass
   |         ^^^^
46 |             return await call_next(request)
   |

invalid-syntax: Unexpected indentation
  --> backend\csrf_middleware.py:46:1
   |
44 |         ):
45 |         pass
46 |             return await call_next(request)
   | ^^^^^^^^^^^^
47 |
48 |         # Only protect state-changing methods
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\csrf_middleware.py:50:9
   |
48 |         # Only protect state-changing methods
49 |         if request.method in ("POST", "PUT", "DELETE", "PATCH"):
50 |         pass
   |         ^^^^
51 |             token = request.headers.get("X-CSRF-Token")
52 |             if not token or not self._validate_token(token):
   |

invalid-syntax: Unexpected indentation
  --> backend\csrf_middleware.py:51:1
   |
49 |         if request.method in ("POST", "PUT", "DELETE", "PATCH"):
50 |         pass
51 |             token = request.headers.get("X-CSRF-Token")
   | ^^^^^^^^^^^^
52 |             if not token or not self._validate_token(token):
53 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\csrf_middleware.py:53:13
   |
51 |             token = request.headers.get("X-CSRF-Token")
52 |             if not token or not self._validate_token(token):
53 |             pass
   |             ^^^^
54 |                 return JSONResponse(
55 |                     {"error": "CSRF token missing or invalid"}, status_code=403
   |

invalid-syntax: Unexpected indentation
  --> backend\csrf_middleware.py:54:1
   |
52 |             if not token or not self._validate_token(token):
53 |             pass
54 |                 return JSONResponse(
   | ^^^^^^^^^^^^^^^^
55 |                     {"error": "CSRF token missing or invalid"}, status_code=403
56 |                 )
   |

invalid-syntax: Expected a statement
  --> backend\csrf_middleware.py:58:9
   |
56 |                 )
57 |
58 |         response: Response = await call_next(request)
   |         ^
59 |         # Set SameSite cookie for session
60 |         response.set_cookie(
   |

invalid-syntax: Expected a statement
  --> backend\csrf_middleware.py:69:5
   |
67 |         return response
68 |
69 |     def _generate_token(self) -> str:
   |     ^
70 |         pass
71 |         # Simple HMAC-based token
   |

invalid-syntax: Expected a statement
  --> backend\csrf_middleware.py:77:1
   |
75 |         expected = self._generate_token()
76 |         return hmac.compare_digest(token, expected)
   |                                                    ^
   |

E501 Line too long (90 > 88)
  --> backend\deps.py:60:89
   |
58 | def ensure_minimal_dependencies() -> bool:
59 |     """
60 |     Ensure all required backend dependencies are available. If an import fails, attempt to
   |                                                                                         ^^
61 |     install via pip and retry imports. Returns True if all imports succeed at the end.
62 |     """
   |

invalid-syntax: Expected an indented block after `try` statement
  --> backend\deps.py:84:9
   |
82 |     def _try_import(name: str) -> bool:
83 |         try:
84 |         pass
   |         ^^^^
85 |             __import__(name)
86 |             return True
   |

invalid-syntax: Unexpected indentation
  --> backend\deps.py:85:1
   |
83 |         try:
84 |         pass
85 |             __import__(name)
   | ^^^^^^^^^^^^
86 |             return True
87 |         except Exception:
   |

invalid-syntax: Expected a statement
  --> backend\deps.py:87:9
   |
85 |             __import__(name)
86 |             return True
87 |         except Exception:
   |         ^^^^^^
88 |         pass
89 |             return False
   |

invalid-syntax: Expected an expression
  --> backend\deps.py:87:26
   |
85 |             __import__(name)
86 |             return True
87 |         except Exception:
   |                          ^
88 |         pass
89 |             return False
   |

invalid-syntax: Unexpected indentation
  --> backend\deps.py:89:1
   |
87 |         except Exception:
88 |         pass
89 |             return False
   | ^^^^^^^^^^^^
90 |
91 |     for mod, spec in checks:
   |

invalid-syntax: Expected a statement
  --> backend\deps.py:91:5
   |
89 |             return False
90 |
91 |     for mod, spec in checks:
   |     ^
92 |         pass
93 |         if not _try_import(mod):
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\deps.py:94:9
   |
92 |         pass
93 |         if not _try_import(mod):
94 |         pass
   |         ^^^^
95 |             code, out = _run([sys.executable, "-m", "pip", "install", spec])
96 |             if code != 0 or not _try_import(mod):
   |

invalid-syntax: Unexpected indentation
  --> backend\deps.py:95:1
   |
93 |         if not _try_import(mod):
94 |         pass
95 |             code, out = _run([sys.executable, "-m", "pip", "install", spec])
   | ^^^^^^^^^^^^
96 |             if code != 0 or not _try_import(mod):
97 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\deps.py:97:13
   |
95 |             code, out = _run([sys.executable, "-m", "pip", "install", spec])
96 |             if code != 0 or not _try_import(mod):
97 |             pass
   |             ^^^^
98 |                 ok = False
99 |     return ok
   |

invalid-syntax: Unexpected indentation
  --> backend\deps.py:98:1
   |
96 |             if code != 0 or not _try_import(mod):
97 |             pass
98 |                 ok = False
   | ^^^^^^^^^^^^^^^^
99 |     return ok
   |

invalid-syntax: Expected a statement
  --> backend\deps.py:99:5
   |
97 |             pass
98 |                 ok = False
99 |     return ok
   |     ^
   |

invalid-syntax: Expected a statement
   --> backend\deps.py:102:1
    |
102 | def optional_ml_hint() -> str:
    | ^
103 |     return (
104 |         "Optional ML dependencies not installed. Some features may be disabled.\n"
    |

E501 Line too long (123 > 88)
   --> backend\deps.py:105:89
    |
103 |     return (
104 |         "Optional ML dependencies not installed. Some features may be disabled.\n"
105 |         "To enable embeddings and local models, install: torch, sentence-transformers, chromadb, transformers, accelerate."
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
106 |     )
    |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\embeddings.py:57:9
   |
55 |         # Load embedding model if available; swallow errors
56 |         if SentenceTransformer is None:
57 |         pass
   |         ^^^^
58 |             logging.warning(
59 |                 "[EmbeddingsManager] sentence_transformers not available; embeddings disabled"
   |

invalid-syntax: Unexpected indentation
  --> backend\embeddings.py:58:1
   |
56 |         if SentenceTransformer is None:
57 |         pass
58 |             logging.warning(
   | ^^^^^^^^^^^^
59 |                 "[EmbeddingsManager] sentence_transformers not available; embeddings disabled"
60 |             )
   |

E501 Line too long (94 > 88)
  --> backend\embeddings.py:59:89
   |
57 |         pass
58 |             logging.warning(
59 |                 "[EmbeddingsManager] sentence_transformers not available; embeddings disabled"
   |                                                                                         ^^^^^^
60 |             )
61 |             self.model = None
   |

invalid-syntax: Expected a statement
  --> backend\embeddings.py:62:9
   |
60 |             )
61 |             self.model = None
62 |         else:
   |         ^^^^
63 |         pass
64 |             self.model = safe_call(
   |

invalid-syntax: Expected a statement
  --> backend\embeddings.py:62:13
   |
60 |             )
61 |             self.model = None
62 |         else:
   |             ^
63 |         pass
64 |             self.model = safe_call(
   |

invalid-syntax: Expected a statement
  --> backend\embeddings.py:62:14
   |
60 |             )
61 |             self.model = None
62 |         else:
   |              ^
63 |         pass
64 |             self.model = safe_call(
   |

invalid-syntax: Unexpected indentation
  --> backend\embeddings.py:64:1
   |
62 |         else:
63 |         pass
64 |             self.model = safe_call(
   | ^^^^^^^^^^^^
65 |                 SentenceTransformer,
66 |                 model_name,
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\embeddings.py:73:9
   |
71 |         # If model failed to load, skip DB initialization to avoid file locks
72 |         if self.model is None:
73 |         pass
   |         ^^^^
74 |             self.chroma_client = None
75 |             self.collection = None
   |

invalid-syntax: Unexpected indentation
  --> backend\embeddings.py:74:1
   |
72 |         if self.model is None:
73 |         pass
74 |             self.chroma_client = None
   | ^^^^^^^^^^^^
75 |             self.collection = None
76 |             return
   |

invalid-syntax: Expected a statement
  --> backend\embeddings.py:79:9
   |
78 |         # Initialize persistent Chroma client; swallow errors
79 |         if PersistentClient is None:
   |         ^
80 |         pass
81 |             self.chroma_client = None
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\embeddings.py:80:9
   |
78 |         # Initialize persistent Chroma client; swallow errors
79 |         if PersistentClient is None:
80 |         pass
   |         ^^^^
81 |             self.chroma_client = None
82 |         else:
   |

invalid-syntax: Unexpected indentation
  --> backend\embeddings.py:81:1
   |
79 |         if PersistentClient is None:
80 |         pass
81 |             self.chroma_client = None
   | ^^^^^^^^^^^^
82 |         else:
83 |         pass
   |

invalid-syntax: Expected a statement
  --> backend\embeddings.py:82:9
   |
80 |         pass
81 |             self.chroma_client = None
82 |         else:
   |         ^
83 |         pass
84 |             self.chroma_client = safe_call(
   |

invalid-syntax: Expected a statement
  --> backend\embeddings.py:82:13
   |
80 |         pass
81 |             self.chroma_client = None
82 |         else:
   |             ^
83 |         pass
84 |             self.chroma_client = safe_call(
   |

invalid-syntax: Expected a statement
  --> backend\embeddings.py:82:14
   |
80 |         pass
81 |             self.chroma_client = None
82 |         else:
   |              ^
83 |         pass
84 |             self.chroma_client = safe_call(
   |

invalid-syntax: Unexpected indentation
  --> backend\embeddings.py:84:1
   |
82 |         else:
83 |         pass
84 |             self.chroma_client = safe_call(
   | ^^^^^^^^^^^^
85 |                 PersistentClient,
86 |                 path=self.db_path,
   |

invalid-syntax: Expected a statement
  --> backend\embeddings.py:92:9
   |
91 |         # Create or get collection using the **model name**, not the model object
92 |         if self.chroma_client and embedding_functions is not None:
   |         ^
93 |         pass
94 |             try:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\embeddings.py:93:9
   |
91 |         # Create or get collection using the **model name**, not the model object
92 |         if self.chroma_client and embedding_functions is not None:
93 |         pass
   |         ^^^^
94 |             try:
95 |                 self.collection = self.chroma_client.get_or_create_collection(
   |

invalid-syntax: Unexpected indentation
  --> backend\embeddings.py:94:1
   |
92 |         if self.chroma_client and embedding_functions is not None:
93 |         pass
94 |             try:
   | ^^^^^^^^^^^^
95 |                 self.collection = self.chroma_client.get_or_create_collection(
96 |                     name=self.collection_name,
   |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\embeddings.py:101:30
    |
 99 |                     ),
100 |                 )
101 |             except Exception:
    |                              ^
102 |         pass
103 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:102:9
    |
100 |                 )
101 |             except Exception:
102 |         pass
    |         ^
103 |             pass
104 |                 logging.error("[EmbeddingsManager] Error creating/getting collection")
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:103:1
    |
101 |             except Exception:
102 |         pass
103 |             pass
    | ^^^^^^^^^^^^
104 |                 logging.error("[EmbeddingsManager] Error creating/getting collection")
105 |                 self.collection = None
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:104:1
    |
102 |         pass
103 |             pass
104 |                 logging.error("[EmbeddingsManager] Error creating/getting collection")
    | ^^^^^^^^^^^^^^^^
105 |                 self.collection = None
106 |         else:
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:106:9
    |
104 |                 logging.error("[EmbeddingsManager] Error creating/getting collection")
105 |                 self.collection = None
106 |         else:
    |         ^
107 |         pass
108 |             self.collection = None
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:106:13
    |
104 |                 logging.error("[EmbeddingsManager] Error creating/getting collection")
105 |                 self.collection = None
106 |         else:
    |             ^
107 |         pass
108 |             self.collection = None
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:106:14
    |
104 |                 logging.error("[EmbeddingsManager] Error creating/getting collection")
105 |                 self.collection = None
106 |         else:
    |              ^
107 |         pass
108 |             self.collection = None
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:108:1
    |
106 |         else:
107 |         pass
108 |             self.collection = None
    | ^^^^^^^^^^^^
109 |
110 |     @classmethod
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:110:5
    |
108 |             self.collection = None
109 |
110 |     @classmethod
    |     ^
111 |     def from_settings(cls) -> "EmbeddingsManager":
112 |         """Build an EmbeddingsManager using centralized settings.
    |

E501 Line too long (95 > 88)
   --> backend\embeddings.py:122:89
    |
120 |         # caller later supplies a different location. Keep the collection name
121 |         # stable.
122 |         # Tests expect the vector DB to live under ./backend/vector_db relative to project root
    |                                                                                         ^^^^^^^
123 |         vector_db_path = str(Path(s.project_root) / "backend" / "vector_db")
124 |         return cls(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:139:9
    |
137 |     def compute_embedding(self, text: str, timeout: float = 5.0) -> List[float]:
138 |         if self.model is None:
139 |         pass
    |         ^^^^
140 |             logging.error("[EmbeddingsManager] No embedding model loaded.")
141 |             return []
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:140:1
    |
138 |         if self.model is None:
139 |         pass
140 |             logging.error("[EmbeddingsManager] No embedding model loaded.")
    | ^^^^^^^^^^^^
141 |             return []
142 |         return safe_call(
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:149:5
    |
147 |         )
148 |
149 |     def add_embedding(self, text: str, note_path: str):
    |     ^
150 |         vec = self.compute_embedding(text)
151 |         if self.collection is None:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:152:9
    |
150 |         vec = self.compute_embedding(text)
151 |         if self.collection is None:
152 |         pass
    |         ^^^^
153 |             logging.error("[EmbeddingsManager] No collection available for upsert.")
154 |             return
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:153:1
    |
151 |         if self.collection is None:
152 |         pass
153 |             logging.error("[EmbeddingsManager] No collection available for upsert.")
    | ^^^^^^^^^^^^
154 |             return
155 |         # Use the standard ChromaDB upsert format for efficiency and correctness.
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:167:5
    |
165 |         )
166 |
167 |     def search(self, query: str, top_k: Optional[int] = None) -> List[Dict]:
    |     ^
168 |         if top_k is None:
169 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:169:9
    |
167 |     def search(self, query: str, top_k: Optional[int] = None) -> List[Dict]:
168 |         if top_k is None:
169 |         pass
    |         ^^^^
170 |             top_k = self.top_k
171 |         query_vec = self.compute_embedding(query)
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:170:1
    |
168 |         if top_k is None:
169 |         pass
170 |             top_k = self.top_k
    | ^^^^^^^^^^^^
171 |         query_vec = self.compute_embedding(query)
172 |         if self.collection is None:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:173:9
    |
171 |         query_vec = self.compute_embedding(query)
172 |         if self.collection is None:
173 |         pass
    |         ^^^^
174 |             logging.error("[EmbeddingsManager] No collection available for search.")
175 |             return []
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:174:1
    |
172 |         if self.collection is None:
173 |         pass
174 |             logging.error("[EmbeddingsManager] No collection available for search.")
    | ^^^^^^^^^^^^
175 |             return []
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:177:9
    |
175 |             return []
176 |
177 |         def do_search():
    |         ^
178 |         pass
179 |             results = self.collection.query(
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\embeddings.py:178:9
    |
177 |         def do_search():
178 |         pass
    |         ^^^^
179 |             results = self.collection.query(
180 |                 query_embeddings=[query_vec], n_results=top_k
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:179:1
    |
177 |         def do_search():
178 |         pass
179 |             results = self.collection.query(
    | ^^^^^^^^^^^^
180 |                 query_embeddings=[query_vec], n_results=top_k
181 |             )
    |

E501 Line too long (96 > 88)
   --> backend\embeddings.py:183:89
    |
181 |             )
182 |             hits = []
183 |             for doc, meta in zip(results["documents"][0], results["metadatas"][0], strict=True):
    |                                                                                         ^^^^^^^^
184 |             pass
185 |                 hits.append({"text": doc, "source": meta.get("note_path", "")})
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\embeddings.py:184:13
    |
182 |             hits = []
183 |             for doc, meta in zip(results["documents"][0], results["metadatas"][0], strict=True):
184 |             pass
    |             ^^^^
185 |                 hits.append({"text": doc, "source": meta.get("note_path", "")})
186 |             return hits
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:185:1
    |
183 |             for doc, meta in zip(results["documents"][0], results["metadatas"][0], strict=True):
184 |             pass
185 |                 hits.append({"text": doc, "source": meta.get("note_path", "")})
    | ^^^^^^^^^^^^^^^^
186 |             return hits
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:186:13
    |
184 |             pass
185 |                 hits.append({"text": doc, "source": meta.get("note_path", "")})
186 |             return hits
    |             ^
187 |
188 |         return safe_call(
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:188:9
    |
186 |             return hits
187 |
188 |         return safe_call(
    |         ^
189 |             do_search, error_msg="[EmbeddingsManager] Error during search", default=[]
190 |         )
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:192:5
    |
190 |         )
191 |
192 |     def get_embedding_by_id(self, note_id: str) -> List[float]:
    |     ^
193 |         """Retrieve an embedding vector by its ID (note_path)."""
194 |         if self.collection is None:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:195:9
    |
193 |         """Retrieve an embedding vector by its ID (note_path)."""
194 |         if self.collection is None:
195 |         pass
    |         ^^^^
196 |             logging.error(
197 |                 "[EmbeddingsManager] No collection available for get_embedding_by_id."
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:196:1
    |
194 |         if self.collection is None:
195 |         pass
196 |             logging.error(
    | ^^^^^^^^^^^^
197 |                 "[EmbeddingsManager] No collection available for get_embedding_by_id."
198 |             )
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\embeddings.py:202:9
    |
201 |         def do_get():
202 |         pass
    |         ^^^^
203 |             results = self.collection.get(ids=[note_id], include=["embeddings"])
204 |             # The 'get' method returns a list of embeddings, one for each ID.
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:203:1
    |
201 |         def do_get():
202 |         pass
203 |             results = self.collection.get(ids=[note_id], include=["embeddings"])
    | ^^^^^^^^^^^^
204 |             # The 'get' method returns a list of embeddings, one for each ID.
205 |             # If the ID is found, the list will contain one item.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:207:13
    |
205 |             # If the ID is found, the list will contain one item.
206 |             if results and results["embeddings"]:
207 |             pass
    |             ^^^^
208 |                 return results["embeddings"][0]
209 |             return []
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:208:1
    |
206 |             if results and results["embeddings"]:
207 |             pass
208 |                 return results["embeddings"][0]
    | ^^^^^^^^^^^^^^^^
209 |             return []
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:209:13
    |
207 |             pass
208 |                 return results["embeddings"][0]
209 |             return []
    |             ^
210 |
211 |         return safe_call(
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:211:9
    |
209 |             return []
210 |
211 |         return safe_call(
    |         ^
212 |             do_get,
213 |             error_msg=f"[EmbeddingsManager] Error getting embedding for id {note_id}",
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:217:5
    |
215 |         )
216 |
217 |     def reset_db(self):
    |     ^
218 |         pass
219 |         if self.chroma_client is None:
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\embeddings.py:226:9
    |
225 |         def do_reset():
226 |         pass
    |         ^^^^
227 |             self.chroma_client.delete_collection(self.collection_name)
228 |             self.collection = self.chroma_client.get_or_create_collection(
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:227:1
    |
225 |         def do_reset():
226 |         pass
227 |             self.chroma_client.delete_collection(self.collection_name)
    | ^^^^^^^^^^^^
228 |             self.collection = self.chroma_client.get_or_create_collection(
229 |                 name=self.collection_name,
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:237:5
    |
235 |         safe_call(do_reset, error_msg="[EmbeddingsManager] Error resetting DB")
236 |
237 |     def clear_collection(self):
    |     ^
238 |         pass
239 |         """Alias for reset_db to maintain backward compatibility with tests."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:248:9
    |
246 |         """
247 |         if not chunks or self.collection is None:
248 |         pass
    |         ^^^^
249 |             return
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:249:1
    |
247 |         if not chunks or self.collection is None:
248 |         pass
249 |             return
    | ^^^^^^^^^^^^
250 |
251 |         # Generate IDs for chunks
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\embeddings.py:261:9
    |
260 |         def do_add():
261 |         pass
    |         ^^^^
262 |             self.collection.add(documents=chunks, ids=ids, metadatas=final_metadatas)
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:262:1
    |
260 |         def do_add():
261 |         pass
262 |             self.collection.add(documents=chunks, ids=ids, metadatas=final_metadatas)
    | ^^^^^^^^^^^^
263 |
264 |         safe_call(do_add, error_msg="[EmbeddingsManager] Error adding documents")
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:264:9
    |
262 |             self.collection.add(documents=chunks, ids=ids, metadatas=final_metadatas)
263 |
264 |         safe_call(do_add, error_msg="[EmbeddingsManager] Error adding documents")
    |         ^
265 |
266 |     def close(self):
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:266:5
    |
264 |         safe_call(do_add, error_msg="[EmbeddingsManager] Error adding documents")
265 |
266 |     def close(self):
    |     ^
267 |         """Attempt to release any resources held by the Chroma client.
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\embeddings.py:273:9
    |
271 |         """
272 |         try:
273 |         pass
    |         ^^^^
274 |             # Best-effort cleanup
275 |             self.collection = None
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:275:1
    |
273 |         pass
274 |             # Best-effort cleanup
275 |             self.collection = None
    | ^^^^^^^^^^^^
276 |             self.chroma_client = None
277 |             self.model = None
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:278:9
    |
276 |             self.chroma_client = None
277 |             self.model = None
278 |         except Exception as e:
    |         ^^^^^^
279 |         pass
280 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:278:26
    |
276 |             self.chroma_client = None
277 |             self.model = None
278 |         except Exception as e:
    |                          ^^
279 |         pass
280 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\embeddings.py:278:31
    |
276 |             self.chroma_client = None
277 |             self.model = None
278 |         except Exception as e:
    |                               ^
279 |         pass
280 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:281:1
    |
279 |         pass
280 |         pass
281 |             import logging
    | ^^^^^^^^^^^^
282 |
283 |             logging.warning(f"Failed to set model to None: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:289:5
    |
287 |     # ----------------------
288 |
289 |     def get_collection_info(self) -> Dict[str, Optional[object]]:
    |     ^
290 |         """Return basic info about the current collection.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:297:9
    |
295 |         count = 0
296 |         if self.collection is not None:
297 |         pass
    |         ^^^^
298 |             count = safe_call(
299 |                 self.collection.count,
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:298:1
    |
296 |         if self.collection is not None:
297 |         pass
298 |             count = safe_call(
    | ^^^^^^^^^^^^
299 |                 self.collection.count,
300 |                 error_msg="[EmbeddingsManager] Error getting collection count",
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:309:5
    |
307 |         }
308 |
309 |     def _hash_text(self, text: str) -> str:
    |     ^
310 |         return hashlib.md5(text.encode("utf-8"), usedforsecurity=False).hexdigest()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:314:9
    |
312 |     def chunk_text(self, text: str) -> List[str]:
313 |         if not text:
314 |         pass
    |         ^^^^
315 |             return []
316 |         words = text.split()
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:315:1
    |
313 |         if not text:
314 |         pass
315 |             return []
    | ^^^^^^^^^^^^
316 |         words = text.split()
317 |         step = self.chunk_size - self.overlap
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:326:5
    |
324 |     # ----------------------
325 |
326 |     def index_file(self, file_path: str) -> int:
    |     ^
327 |         if not os.path.exists(file_path):
328 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\embeddings.py:328:9
    |
326 |     def index_file(self, file_path: str) -> int:
327 |         if not os.path.exists(file_path):
328 |         pass
    |         ^^^^
329 |             return 0
330 |         with open(file_path, "r", encoding="utf-8") as f:
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:329:1
    |
327 |         if not os.path.exists(file_path):
328 |         pass
329 |             return 0
    | ^^^^^^^^^^^^
330 |         with open(file_path, "r", encoding="utf-8") as f:
331 |         pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\embeddings.py:331:9
    |
329 |             return 0
330 |         with open(file_path, "r", encoding="utf-8") as f:
331 |         pass
    |         ^^^^
332 |             text = f.read()
333 |         chunks = self.chunk_text(text)
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:332:1
    |
330 |         with open(file_path, "r", encoding="utf-8") as f:
331 |         pass
332 |             text = f.read()
    | ^^^^^^^^^^^^
333 |         chunks = self.chunk_text(text)
334 |         ids = [f"{os.path.basename(file_path)}-{i}" for i in range(len(chunks))]
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:333:9
    |
331 |         pass
332 |             text = f.read()
333 |         chunks = self.chunk_text(text)
    |         ^
334 |         ids = [f"{os.path.basename(file_path)}-{i}" for i in range(len(chunks))]
335 |         self.collection.add(
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:343:5
    |
341 |         return len(chunks)
342 |
343 |     def index_vault(self, vault_path: str) -> Dict[str, int]:
    |     ^
344 |         vault = Path(vault_path)
345 |         results = {}
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\embeddings.py:347:9
    |
345 |         results = {}
346 |         for md_file in vault.rglob("*.md"):
347 |         pass
    |         ^^^^
348 |             results[str(md_file)] = self.index_file(str(md_file))
349 |         return results
    |

invalid-syntax: Unexpected indentation
   --> backend\embeddings.py:348:1
    |
346 |         for md_file in vault.rglob("*.md"):
347 |         pass
348 |             results[str(md_file)] = self.index_file(str(md_file))
    | ^^^^^^^^^^^^
349 |         return results
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:351:5
    |
349 |         return results
350 |
351 |     def reindex(self, vault_path: str) -> Dict[str, int]:
    |     ^
352 |         self.reset_db()
353 |         return self.index_vault(vault_path)
    |

invalid-syntax: Expected a statement
   --> backend\embeddings.py:354:1
    |
352 |         self.reset_db()
353 |         return self.index_vault(vault_path)
    |                                            ^
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_admin.py:114:9
    |
112 |         """Get comprehensive dashboard overview"""
113 |         try:
114 |         pass
    |         ^^^^
115 |             # Get metrics from various systems
116 |             user_metrics = await self._get_user_metrics()
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:116:1
    |
114 |         pass
115 |             # Get metrics from various systems
116 |             user_metrics = await self._get_user_metrics()
    | ^^^^^^^^^^^^
117 |             tenant_metrics = await self._get_tenant_metrics()
118 |             system_metrics = await self._get_system_metrics()
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:136:9
    |
134 |             }
135 |
136 |         except Exception as err:
    |         ^^^^^^
137 |         pass
138 |             logger.error(f"Failed to generate dashboard overview: {str(err)}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:136:26
    |
134 |             }
135 |
136 |         except Exception as err:
    |                          ^^
137 |         pass
138 |             logger.error(f"Failed to generate dashboard overview: {str(err)}")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_admin.py:136:33
    |
134 |             }
135 |
136 |         except Exception as err:
    |                                 ^
137 |         pass
138 |             logger.error(f"Failed to generate dashboard overview: {str(err)}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:138:1
    |
136 |         except Exception as err:
137 |         pass
138 |             logger.error(f"Failed to generate dashboard overview: {str(err)}")
    | ^^^^^^^^^^^^
139 |             raise HTTPException(
140 |                 status_code=500, detail="Failed to load dashboard"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:143:5
    |
141 |             ) from None
142 |
143 |     async def _get_user_metrics(self) -> Dict[str, Any]:
    |     ^
144 |         """Get user-related metrics"""
145 |         # In production, this would query actual user database
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_admin.py:265:9
    |
263 |         """Get user management data"""
264 |         try:
265 |         pass
    |         ^^^^
266 |             # In production, this would query actual user database with pagination
267 |             users = [
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:267:1
    |
265 |         pass
266 |             # In production, this would query actual user database with pagination
267 |             users = [
    | ^^^^^^^^^^^^
268 |                 {
269 |                     "user_id": f"user{i}",
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:301:9
    |
299 |             }
300 |
301 |         except Exception as err:
    |         ^^^^^^
302 |         pass
303 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:301:26
    |
299 |             }
300 |
301 |         except Exception as err:
    |                          ^^
302 |         pass
303 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_admin.py:301:33
    |
299 |             }
300 |
301 |         except Exception as err:
    |                                 ^
302 |         pass
303 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:304:1
    |
302 |         pass
303 |         pass
304 |             logger.error(f"Failed to get user management data: {str(err)}")
    | ^^^^^^^^^^^^
305 |             raise HTTPException(
306 |                 status_code=500, detail="Failed to load user management"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:309:5
    |
307 |             ) from None
308 |
309 |     async def get_tenant_management(self) -> Dict[str, Any]:
    |     ^
310 |         """Get tenant management data"""
311 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_admin.py:312:9
    |
310 |         """Get tenant management data"""
311 |         try:
312 |         pass
    |         ^^^^
313 |             tenants = self.tenant_manager.list_tenants()
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:313:1
    |
311 |         try:
312 |         pass
313 |             tenants = self.tenant_manager.list_tenants()
    | ^^^^^^^^^^^^
314 |
315 |             tenant_data = []
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_admin.py:317:13
    |
315 |             tenant_data = []
316 |             for tenant in tenants:
317 |             pass
    |             ^^^^
318 |                 usage = self.tenant_manager.get_usage_stats(tenant.tenant_id)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:318:1
    |
316 |             for tenant in tenants:
317 |             pass
318 |                 usage = self.tenant_manager.get_usage_stats(tenant.tenant_id)
    | ^^^^^^^^^^^^^^^^
319 |
320 |                 tenant_data.append(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:352:9
    |
350 |             }
351 |
352 |         except Exception as err:
    |         ^
353 |         pass
354 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:352:26
    |
350 |             }
351 |
352 |         except Exception as err:
    |                          ^^
353 |         pass
354 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_admin.py:352:33
    |
350 |             }
351 |
352 |         except Exception as err:
    |                                 ^
353 |         pass
354 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:355:1
    |
353 |         pass
354 |         pass
355 |             logger.error(f"Failed to get tenant management data: {str(err)}")
    | ^^^^^^^^^^^^
356 |             raise HTTPException(
357 |                 status_code=500, detail="Failed to load tenant management"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:360:5
    |
358 |             ) from None
359 |
360 |     async def get_security_dashboard(self) -> Dict[str, Any]:
    |     ^
361 |         """Get security dashboard data"""
362 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_admin.py:363:9
    |
361 |         """Get security dashboard data"""
362 |         try:
363 |         pass
    |         ^^^^
364 |             soc2_report = self.soc2_manager.generate_soc2_report()
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:364:1
    |
362 |         try:
363 |         pass
364 |             soc2_report = self.soc2_manager.generate_soc2_report()
    | ^^^^^^^^^^^^
365 |
366 |             return {
    |

invalid-syntax: Expected an identifier, but found a keyword 'pass' that cannot be used here
   --> backend\enterprise_admin.py:391:17
    |
389 |                         for review in list(self.soc2_manager.access_reviews.values())[
390 |                             -10:
391 |                 pass
    |                 ^^^^
392 |                         ]
393 |                     ],
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:425:9
    |
423 |             }
424 |
425 |         except Exception as err:
    |         ^^^^^^
426 |         pass
427 |             logger.error(f"Failed to get security dashboard: {str(err)}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:425:26
    |
423 |             }
424 |
425 |         except Exception as err:
    |                          ^^
426 |         pass
427 |             logger.error(f"Failed to get security dashboard: {str(err)}")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_admin.py:425:33
    |
423 |             }
424 |
425 |         except Exception as err:
    |                                 ^
426 |         pass
427 |             logger.error(f"Failed to get security dashboard: {str(err)}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:427:1
    |
425 |         except Exception as err:
426 |         pass
427 |             logger.error(f"Failed to get security dashboard: {str(err)}")
    | ^^^^^^^^^^^^
428 |             raise HTTPException(
429 |                 status_code=500, detail="Failed to load security dashboard"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:432:5
    |
430 |             ) from None
431 |
432 |     async def get_compliance_dashboard(self) -> Dict[str, Any]:
    |     ^
433 |         """Get compliance dashboard data"""
434 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_admin.py:435:9
    |
433 |         """Get compliance dashboard data"""
434 |         try:
435 |         pass
    |         ^^^^
436 |             gdpr_report = self.gdpr_manager.generate_processing_record_report()
437 |             soc2_report = self.soc2_manager.generate_soc2_report()
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:436:1
    |
434 |         try:
435 |         pass
436 |             gdpr_report = self.gdpr_manager.generate_processing_record_report()
    | ^^^^^^^^^^^^
437 |             soc2_report = self.soc2_manager.generate_soc2_report()
    |

E501 Line too long (91 > 88)
   --> backend\enterprise_admin.py:447:89
    |
445 | …                     [
446 | …                         req
447 | …                         for req in self.gdpr_manager.data_subject_requests.values()
    |                                                                                   ^^^
448 | …                         if req.status == "pending"
449 | …                     ]
    |

E501 Line too long (91 > 88)
   --> backend\enterprise_admin.py:454:89
    |
452 | …                     [
453 | …                         req
454 | …                         for req in self.gdpr_manager.data_subject_requests.values()
    |                                                                                   ^^^
455 | …                         if req.completed_at
456 | …                         and req.completed_at
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:490:9
    |
488 |             }
489 |
490 |         except Exception as err:
    |         ^^^^^^
491 |         pass
492 |             logger.error(f"Failed to get compliance dashboard: {str(err)}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:490:26
    |
488 |             }
489 |
490 |         except Exception as err:
    |                          ^^
491 |         pass
492 |             logger.error(f"Failed to get compliance dashboard: {str(err)}")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_admin.py:490:33
    |
488 |             }
489 |
490 |         except Exception as err:
    |                                 ^
491 |         pass
492 |             logger.error(f"Failed to get compliance dashboard: {str(err)}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:492:1
    |
490 |         except Exception as err:
491 |         pass
492 |             logger.error(f"Failed to get compliance dashboard: {str(err)}")
    | ^^^^^^^^^^^^
493 |             raise HTTPException(
494 |                 status_code=500, detail="Failed to load compliance dashboard"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:497:5
    |
495 |             ) from None
496 |
497 |     async def create_system_alert(
    |     ^
498 |         self, severity: str, title: str, description: str, component: str
499 |     ) -> SystemAlert:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:519:9
    |
517 |         """Resolve a system alert"""
518 |         if alert_id in self.system_alerts:
519 |         pass
    |         ^^^^
520 |             self.system_alerts[alert_id].resolved_at = datetime.utcnow()
521 |             logger.info(f"System alert resolved: {alert_id}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:520:1
    |
518 |         if alert_id in self.system_alerts:
519 |         pass
520 |             self.system_alerts[alert_id].resolved_at = datetime.utcnow()
    | ^^^^^^^^^^^^
521 |             logger.info(f"System alert resolved: {alert_id}")
522 |             return True
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:525:5
    |
523 |         return False
524 |
525 |     async def bulk_user_action(
    |     ^
526 |         self, action: str, user_ids: List[str], parameters: Dict[str, Any] = None
527 |     ) -> Dict[str, Any]:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:530:9
    |
528 |         """Perform bulk actions on users"""
529 |         if not parameters:
530 |         pass
    |         ^^^^
531 |             parameters = {}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:531:1
    |
529 |         if not parameters:
530 |         pass
531 |             parameters = {}
    | ^^^^^^^^^^^^
532 |
533 |         success_count = 0
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_admin.py:538:9
    |
537 |         for user_id in user_ids:
538 |         pass
    |         ^^^^
539 |             try:
540 |                 if action == "deactivate":
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:539:1
    |
537 |         for user_id in user_ids:
538 |         pass
539 |             try:
    | ^^^^^^^^^^^^
540 |                 if action == "deactivate":
541 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:540:43
    |
538 |         pass
539 |             try:
540 |                 if action == "deactivate":
    |                                           ^
541 |             pass
542 |                     # Would integrate with actual user management system
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\enterprise_admin.py:541:13
    |
539 |             try:
540 |                 if action == "deactivate":
541 |             pass
    |             ^^^^
542 |                     # Would integrate with actual user management system
543 |                     success_count += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:543:1
    |
541 |             pass
542 |                     # Would integrate with actual user management system
543 |                     success_count += 1
    | ^^^^^^^^^^^^^^^^^^^^
544 |                     results.append({"user_id": user_id, "status": "deactivated"})
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\enterprise_admin.py:546:1
    |
544 |                     results.append({"user_id": user_id, "status": "deactivated"})
545 |
546 |                 elif action == "reset_password":
    | ^^^^^^^^^^^^^^^^
547 |             pass
548 |                     # Would integrate with actual auth system
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:546:17
    |
544 |                     results.append({"user_id": user_id, "status": "deactivated"})
545 |
546 |                 elif action == "reset_password":
    |                 ^^^^
547 |             pass
548 |                     # Would integrate with actual auth system
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_admin.py:546:22
    |
544 |                     results.append({"user_id": user_id, "status": "deactivated"})
545 |
546 |                 elif action == "reset_password":
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
547 |             pass
548 |                     # Would integrate with actual auth system
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_admin.py:546:49
    |
544 |                     results.append({"user_id": user_id, "status": "deactivated"})
545 |
546 |                 elif action == "reset_password":
    |                                                 ^
547 |             pass
548 |                     # Would integrate with actual auth system
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:549:1
    |
547 |             pass
548 |                     # Would integrate with actual auth system
549 |                     success_count += 1
    | ^^^^^^^^^^^^^^^^^^^^
550 |                     results.append(
551 |                         {"user_id": user_id, "status": "password_reset_sent"}
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\enterprise_admin.py:554:1
    |
552 |                     )
553 |
554 |                 elif action == "assign_role":
    | ^^^^^^^^^^^^^^^^
555 |             pass
556 |                     role = parameters.get("role")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:554:17
    |
552 |                     )
553 |
554 |                 elif action == "assign_role":
    |                 ^^^^
555 |             pass
556 |                     role = parameters.get("role")
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_admin.py:554:22
    |
552 |                     )
553 |
554 |                 elif action == "assign_role":
    |                      ^^^^^^^^^^^^^^^^^^^^^^^
555 |             pass
556 |                     role = parameters.get("role")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_admin.py:554:46
    |
552 |                     )
553 |
554 |                 elif action == "assign_role":
    |                                              ^
555 |             pass
556 |                     role = parameters.get("role")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:556:1
    |
554 |                 elif action == "assign_role":
555 |             pass
556 |                     role = parameters.get("role")
    | ^^^^^^^^^^^^^^^^^^^^
557 |                     # Correctly validate the role string against the UserRole enum
558 |                     if role and self.rbac_manager.is_valid_role(role):
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\enterprise_admin.py:559:1
    |
557 |                     # Correctly validate the role string against the UserRole enum
558 |                     if role and self.rbac_manager.is_valid_role(role):
559 |                 pass
    | ^^^^^^^^^^^^^^^^
560 |                         # Would integrate with RBAC system
561 |                         success_count += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:561:1
    |
559 |                 pass
560 |                         # Would integrate with RBAC system
561 |                         success_count += 1
    | ^^^^^^^^^^^^^^^^^^^^^^^^
562 |                         results.append(
563 |                             {"user_id": user_id, "status": f"role_{role}_assigned"}
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\enterprise_admin.py:565:1
    |
563 |                             {"user_id": user_id, "status": f"role_{role}_assigned"}
564 |                         )
565 |                     else:
    | ^^^^^^^^^^^^^^^^^^^^
566 |                 pass
567 |                         failed_count += 1
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:565:21
    |
563 |                             {"user_id": user_id, "status": f"role_{role}_assigned"}
564 |                         )
565 |                     else:
    |                     ^^^^
566 |                 pass
567 |                         failed_count += 1
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:565:25
    |
563 |                             {"user_id": user_id, "status": f"role_{role}_assigned"}
564 |                         )
565 |                     else:
    |                         ^
566 |                 pass
567 |                         failed_count += 1
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:565:26
    |
563 |                             {"user_id": user_id, "status": f"role_{role}_assigned"}
564 |                         )
565 |                     else:
    |                          ^
566 |                 pass
567 |                         failed_count += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:566:1
    |
564 |                         )
565 |                     else:
566 |                 pass
    | ^^^^^^^^^^^^^^^^
567 |                         failed_count += 1
568 |                         results.append({"user_id": user_id, "error": "Invalid role"})
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:567:1
    |
565 |                     else:
566 |                 pass
567 |                         failed_count += 1
    | ^^^^^^^^^^^^^^^^^^^^^^^^
568 |                         results.append({"user_id": user_id, "error": "Invalid role"})
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:570:17
    |
568 |                         results.append({"user_id": user_id, "error": "Invalid role"})
569 |
570 |                 else:
    |                 ^
571 |             pass
572 |                     failed_count += 1
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:570:21
    |
568 |                         results.append({"user_id": user_id, "error": "Invalid role"})
569 |
570 |                 else:
    |                     ^
571 |             pass
572 |                     failed_count += 1
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:570:22
    |
568 |                         results.append({"user_id": user_id, "error": "Invalid role"})
569 |
570 |                 else:
    |                      ^
571 |             pass
572 |                     failed_count += 1
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:571:13
    |
570 |                 else:
571 |             pass
    |             ^
572 |                     failed_count += 1
573 |                     results.append({"user_id": user_id, "error": "Unknown action"})
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:572:1
    |
570 |                 else:
571 |             pass
572 |                     failed_count += 1
    | ^^^^^^^^^^^^^^^^^^^^
573 |                     results.append({"user_id": user_id, "error": "Unknown action"})
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:575:13
    |
573 |                     results.append({"user_id": user_id, "error": "Unknown action"})
574 |
575 |             except Exception as e:
    |             ^
576 |             pass
577 |                 failed_count += 1
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:575:30
    |
573 |                     results.append({"user_id": user_id, "error": "Unknown action"})
574 |
575 |             except Exception as e:
    |                              ^^
576 |             pass
577 |                 failed_count += 1
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_admin.py:575:35
    |
573 |                     results.append({"user_id": user_id, "error": "Unknown action"})
574 |
575 |             except Exception as e:
    |                                   ^
576 |             pass
577 |                 failed_count += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:577:1
    |
575 |             except Exception as e:
576 |             pass
577 |                 failed_count += 1
    | ^^^^^^^^^^^^^^^^
578 |                 results.append({"user_id": user_id, "error": str(e)})
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:580:9
    |
578 |                 results.append({"user_id": user_id, "error": str(e)})
579 |
580 |         return {
    |         ^
581 |             "action": action,
582 |             "total_users": len(user_ids),
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:590:1
    |
589 | # FastAPI endpoints for admin dashboard
590 | class AdminDashboardEndpoints:
    | ^
591 |     pass
592 |     """Admin dashboard API endpoints"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:608:13
    |
606 |             user_roles = request.state.user.get("roles", [])
607 |             if "admin" not in user_roles and "super_admin" not in user_roles:
608 |             pass
    |             ^^^^
609 |                 raise HTTPException(status_code=403, detail="Admin access required")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:609:1
    |
607 |             if "admin" not in user_roles and "super_admin" not in user_roles:
608 |             pass
609 |                 raise HTTPException(status_code=403, detail="Admin access required")
    | ^^^^^^^^^^^^^^^^
610 |
611 |             return await self.admin_dashboard.get_dashboard_overview()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:618:13
    |
616 |             user_roles = request.state.user.get("roles", [])
617 |             if "admin" not in user_roles:
618 |             pass
    |             ^^^^
619 |                 raise HTTPException(status_code=403, detail="Admin access required")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:619:1
    |
617 |             if "admin" not in user_roles:
618 |             pass
619 |                 raise HTTPException(status_code=403, detail="Admin access required")
    | ^^^^^^^^^^^^^^^^
620 |
621 |             return await self.admin_dashboard.get_user_management(page, limit)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:628:13
    |
626 |             user_roles = request.state.user.get("roles", [])
627 |             if "admin" not in user_roles:
628 |             pass
    |             ^^^^
629 |                 raise HTTPException(status_code=403, detail="Admin access required")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:629:1
    |
627 |             if "admin" not in user_roles:
628 |             pass
629 |                 raise HTTPException(status_code=403, detail="Admin access required")
    | ^^^^^^^^^^^^^^^^
630 |
631 |             return await self.admin_dashboard.get_tenant_management()
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:633:9
    |
631 |             return await self.admin_dashboard.get_tenant_management()
632 |
633 |         @self.app.get("/admin/security")
    |         ^
634 |         async def get_security_dashboard(request: Request):
635 |             """Get security dashboard"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:638:13
    |
636 |             user_roles = request.state.user.get("roles", [])
637 |             if "admin" not in user_roles and "security_admin" not in user_roles:
638 |             pass
    |             ^^^^
639 |                 raise HTTPException(
640 |                     status_code=403, detail="Security admin access required"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:639:1
    |
637 |             if "admin" not in user_roles and "security_admin" not in user_roles:
638 |             pass
639 |                 raise HTTPException(
    | ^^^^^^^^^^^^^^^^
640 |                     status_code=403, detail="Security admin access required"
641 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:645:9
    |
643 |             return await self.admin_dashboard.get_security_dashboard()
644 |
645 |         @self.app.get("/admin/compliance")
    |         ^
646 |         async def get_compliance_dashboard(request: Request):
647 |             """Get compliance dashboard"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:650:13
    |
648 |             user_roles = request.state.user.get("roles", [])
649 |             if "admin" not in user_roles and "compliance_admin" not in user_roles:
650 |             pass
    |             ^^^^
651 |                 raise HTTPException(
652 |                     status_code=403, detail="Compliance admin access required"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:651:1
    |
649 |             if "admin" not in user_roles and "compliance_admin" not in user_roles:
650 |             pass
651 |                 raise HTTPException(
    | ^^^^^^^^^^^^^^^^
652 |                     status_code=403, detail="Compliance admin access required"
653 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:657:9
    |
655 |             return await self.admin_dashboard.get_compliance_dashboard()
656 |
657 |         @self.app.post("/admin/alerts")
    |         ^
658 |         async def create_alert(alert_data: Dict[str, Any], request: Request):
659 |             """Create system alert"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:662:13
    |
660 |             user_roles = request.state.user.get("roles", [])
661 |             if "admin" not in user_roles:
662 |             pass
    |             ^^^^
663 |                 raise HTTPException(status_code=403, detail="Admin access required")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:663:1
    |
661 |             if "admin" not in user_roles:
662 |             pass
663 |                 raise HTTPException(status_code=403, detail="Admin access required")
    | ^^^^^^^^^^^^^^^^
664 |
665 |             severity = alert_data.get("severity", "info")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:679:9
    |
677 |             }
678 |
679 |         @self.app.post("/admin/users/bulk-action")
    |         ^
680 |         async def bulk_user_action(action_data: Dict[str, Any], request: Request):
681 |             """Perform bulk actions on users"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:684:13
    |
682 |             user_roles = request.state.user.get("roles", [])
683 |             if "admin" not in user_roles:
684 |             pass
    |             ^^^^
685 |                 raise HTTPException(status_code=403, detail="Admin access required")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:685:1
    |
683 |             if "admin" not in user_roles:
684 |             pass
685 |                 raise HTTPException(status_code=403, detail="Admin access required")
    | ^^^^^^^^^^^^^^^^
686 |
687 |             action = action_data.get("action")
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_admin.py:692:13
    |
691 |             if not action or not user_ids:
692 |             pass
    |             ^^^^
693 |                 raise HTTPException(
694 |                     status_code=400, detail="Action and user_ids required"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_admin.py:693:1
    |
691 |             if not action or not user_ids:
692 |             pass
693 |                 raise HTTPException(
    | ^^^^^^^^^^^^^^^^
694 |                     status_code=400, detail="Action and user_ids required"
695 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:697:13
    |
695 |                 )
696 |
697 |             return await self.admin_dashboard.bulk_user_action(
    |             ^
698 |                 action, user_ids, parameters
699 |             )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_admin.py:700:1
    |
698 |                 action, user_ids, parameters
699 |             )
    |              ^
    |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\enterprise_auth.py:45:9
   |
43 |     def __post_init__(self):
44 |         if self.scopes is None:
45 |         pass
   |         ^^^^
46 |             self.scopes = ["openid", "email", "profile"]
   |

invalid-syntax: Unexpected indentation
  --> backend\enterprise_auth.py:46:1
   |
44 |         if self.scopes is None:
45 |         pass
46 |             self.scopes = ["openid", "email", "profile"]
   | ^^^^^^^^^^^^
   |

invalid-syntax: Expected a statement
  --> backend\enterprise_auth.py:49:1
   |
49 | @dataclass
   | ^
50 | class UserInfo:
51 |     """Standardized user information from SSO providers"""
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\enterprise_auth.py:62:9
   |
60 |     def __post_init__(self):
61 |         if self.roles is None:
62 |         pass
   |         ^^^^
63 |             self.roles = ["user"]
   |

invalid-syntax: Unexpected indentation
  --> backend\enterprise_auth.py:63:1
   |
61 |         if self.roles is None:
62 |         pass
63 |             self.roles = ["user"]
   | ^^^^^^^^^^^^
   |

invalid-syntax: Expected a statement
  --> backend\enterprise_auth.py:66:1
   |
66 | class _HandlerRegistry:
   | ^
67 |     pass
68 |     """Patch-friendly registry that resolves handlers at call time.
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\enterprise_auth.py:90:9
   |
88 |         method_name = self._map.get(provider)
89 |         if not method_name:
90 |         pass
   |         ^^^^
91 |             return None
92 |         return getattr(self._manager, method_name, None)
   |

invalid-syntax: Unexpected indentation
  --> backend\enterprise_auth.py:91:1
   |
89 |         if not method_name:
90 |         pass
91 |             return None
   | ^^^^^^^^^^^^
92 |         return getattr(self._manager, method_name, None)
   |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:109:1
    |
109 | class SSOManager:
    | ^
110 |     """Enterprise SSO authentication manager"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_auth.py:127:9
    |
125 |         """Authenticate user via SSO provider"""
126 |         try:
127 |         pass
    |         ^^^^
128 |             handler = self.provider_handlers.get(self.config.provider)
129 |             if not handler:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:128:1
    |
126 |         try:
127 |         pass
128 |             handler = self.provider_handlers.get(self.config.provider)
    | ^^^^^^^^^^^^
129 |             if not handler:
130 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_auth.py:130:13
    |
128 |             handler = self.provider_handlers.get(self.config.provider)
129 |             if not handler:
130 |             pass
    |             ^^^^
131 |                 # Maintain previous behavior (log via exception path -> None)
132 |                 raise ValueError(
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:132:1
    |
130 |             pass
131 |                 # Maintain previous behavior (log via exception path -> None)
132 |                 raise ValueError(
    | ^^^^^^^^^^^^^^^^
133 |                     f"Unsupported SSO provider: {self.config.provider}"
134 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:140:9
    |
138 |             return user_info
139 |
140 |         except Exception as e:
    |         ^^^^^^
141 |         pass
142 |             logger.error(f"SSO authentication failed: {str(e)}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:140:26
    |
138 |             return user_info
139 |
140 |         except Exception as e:
    |                          ^^
141 |         pass
142 |             logger.error(f"SSO authentication failed: {str(e)}")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_auth.py:140:31
    |
138 |             return user_info
139 |
140 |         except Exception as e:
    |                               ^
141 |         pass
142 |             logger.error(f"SSO authentication failed: {str(e)}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:142:1
    |
140 |         except Exception as e:
141 |         pass
142 |             logger.error(f"SSO authentication failed: {str(e)}")
    | ^^^^^^^^^^^^
143 |             return None
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:145:5
    |
143 |             return None
144 |
145 |     async def _handle_azure_ad(self, auth_code: str) -> UserInfo:
    |     ^
146 |         """Handle Azure AD authentication"""
147 |         # Implementation would use microsoft-identity library
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_auth.py:225:9
    |
223 |         """Validate and decode JWT token"""
224 |         try:
225 |         pass
    |         ^^^^
226 |             payload = jwt.decode(token, secret_key, algorithms=["HS256"])
227 |             return payload
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:226:1
    |
224 |         try:
225 |         pass
226 |             payload = jwt.decode(token, secret_key, algorithms=["HS256"])
    | ^^^^^^^^^^^^
227 |             return payload
228 |         except jwt.ExpiredSignatureError:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:228:9
    |
226 |             payload = jwt.decode(token, secret_key, algorithms=["HS256"])
227 |             return payload
228 |         except jwt.ExpiredSignatureError:
    |         ^^^^^^
229 |         pass
230 |             logger.warning("JWT token has expired")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_auth.py:228:42
    |
226 |             payload = jwt.decode(token, secret_key, algorithms=["HS256"])
227 |             return payload
228 |         except jwt.ExpiredSignatureError:
    |                                          ^
229 |         pass
230 |             logger.warning("JWT token has expired")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:230:1
    |
228 |         except jwt.ExpiredSignatureError:
229 |         pass
230 |             logger.warning("JWT token has expired")
    | ^^^^^^^^^^^^
231 |             return None
232 |         except jwt.InvalidTokenError as e:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:232:9
    |
230 |             logger.warning("JWT token has expired")
231 |             return None
232 |         except jwt.InvalidTokenError as e:
    |         ^
233 |         pass
234 |             logger.warning(f"Invalid JWT token: {str(e)}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:232:38
    |
230 |             logger.warning("JWT token has expired")
231 |             return None
232 |         except jwt.InvalidTokenError as e:
    |                                      ^^
233 |         pass
234 |             logger.warning(f"Invalid JWT token: {str(e)}")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_auth.py:232:43
    |
230 |             logger.warning("JWT token has expired")
231 |             return None
232 |         except jwt.InvalidTokenError as e:
    |                                           ^
233 |         pass
234 |             logger.warning(f"Invalid JWT token: {str(e)}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:234:1
    |
232 |         except jwt.InvalidTokenError as e:
233 |         pass
234 |             logger.warning(f"Invalid JWT token: {str(e)}")
    | ^^^^^^^^^^^^
235 |             return None
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:238:1
    |
238 | class EnterpriseAuthMiddleware:
    | ^
239 |     """FastAPI middleware for enterprise authentication"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_auth.py:258:9
    |
256 |         # Skip authentication for public endpoints
257 |         if path in self.public_endpoints:
258 |         pass
    |         ^^^^
259 |             return await call_next(request)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:259:1
    |
257 |         if path in self.public_endpoints:
258 |         pass
259 |             return await call_next(request)
    | ^^^^^^^^^^^^
260 |
261 |         # Extract JWT token from Authorization header
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_auth.py:264:9
    |
262 |         auth_header = request.headers.get("Authorization")
263 |         if not auth_header or not auth_header.startswith("Bearer "):
264 |         pass
    |         ^^^^
265 |             return {"error": "Authentication required", "status_code": 401}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:265:1
    |
263 |         if not auth_header or not auth_header.startswith("Bearer "):
264 |         pass
265 |             return {"error": "Authentication required", "status_code": 401}
    | ^^^^^^^^^^^^
266 |
267 |         token = auth_header.split(" ")[1]
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_auth.py:271:9
    |
270 |         if not payload:
271 |         pass
    |         ^^^^
272 |             return {"error": "Invalid or expired token", "status_code": 401}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:272:1
    |
270 |         if not payload:
271 |         pass
272 |             return {"error": "Invalid or expired token", "status_code": 401}
    | ^^^^^^^^^^^^
273 |
274 |         # Add user context to request
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:275:9
    |
274 |         # Add user context to request
275 |         request.state.user = payload
    |         ^
276 |         return await call_next(request)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:280:1
    |
279 | # FastAPI endpoints for SSO integration
280 | class SSOEndpoints:
    | ^
281 |     pass
282 |     """Enterprise SSO API endpoints"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_auth.py:297:13
    |
295 |             """Initiate SSO login flow"""
296 |             try:
297 |             pass
    |             ^^^^
298 |                 sso_provider = SSOProvider(provider)
299 |                 # Return redirect URL for the SSO provider
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:298:1
    |
296 |             try:
297 |             pass
298 |                 sso_provider = SSOProvider(provider)
    | ^^^^^^^^^^^^^^^^
299 |                 # Return redirect URL for the SSO provider
300 |                 redirect_urls = {
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:313:13
    |
311 |                     "scopes": " ".join(self.sso_manager.config.scopes),
312 |                 }
313 |             except ValueError:
    |             ^^^^^^
314 |             pass
315 |                 return {
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_auth.py:313:31
    |
311 |                     "scopes": " ".join(self.sso_manager.config.scopes),
312 |                 }
313 |             except ValueError:
    |                               ^
314 |             pass
315 |                 return {
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:315:1
    |
313 |             except ValueError:
314 |             pass
315 |                 return {
    | ^^^^^^^^^^^^^^^^
316 |                     "error": f"Unsupported SSO provider: {provider}",
317 |                     "status_code": 400,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_auth.py:325:13
    |
323 |             auth_code = request_data.get("code")
324 |             if not auth_code:
325 |             pass
    |             ^^^^
326 |                 return {"error": "Authorization code required", "status_code": 400}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:326:1
    |
324 |             if not auth_code:
325 |             pass
326 |                 return {"error": "Authorization code required", "status_code": 400}
    | ^^^^^^^^^^^^^^^^
327 |
328 |             user_info = await self.sso_manager.authenticate(auth_code)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_auth.py:330:13
    |
328 |             user_info = await self.sso_manager.authenticate(auth_code)
329 |             if not user_info:
330 |             pass
    |             ^^^^
331 |                 return {"error": "Authentication failed", "status_code": 401}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:331:1
    |
329 |             if not user_info:
330 |             pass
331 |                 return {"error": "Authentication failed", "status_code": 401}
    | ^^^^^^^^^^^^^^^^
332 |
333 |             # Generate JWT token for the authenticated user
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:334:13
    |
333 |             # Generate JWT token for the authenticated user
334 |             token = self.sso_manager.generate_jwt_token(user_info, self.secret_key)
    |             ^
335 |
336 |             return {
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:348:9
    |
346 |             }
347 |
348 |         @self.app.get("/auth/user")
    |         ^
349 |         async def get_current_user(request):
350 |             """Get current authenticated user information"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_auth.py:352:13
    |
350 |             """Get current authenticated user information"""
351 |             if hasattr(request.state, "user"):
352 |             pass
    |             ^^^^
353 |                 return {"user": request.state.user}
354 |             return {"error": "Not authenticated", "status_code": 401}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_auth.py:353:1
    |
351 |             if hasattr(request.state, "user"):
352 |             pass
353 |                 return {"user": request.state.user}
    | ^^^^^^^^^^^^^^^^
354 |             return {"error": "Not authenticated", "status_code": 401}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:356:9
    |
354 |             return {"error": "Not authenticated", "status_code": 401}
355 |
356 |         @self.app.post("/auth/logout")
    |         ^
357 |         async def logout_user():
358 |             """Logout current user (client-side token removal)"""
    |

E501 Line too long (92 > 88)
   --> backend\enterprise_auth.py:360:89
    |
358 |             """Logout current user (client-side token removal)"""
359 |             return {
360 |                 "message": "Logout successful. Please remove the token from client storage."
    |                                                                                         ^^^^
361 |             }
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_auth.py:362:1
    |
360 |                 "message": "Logout successful. Please remove the token from client storage."
361 |             }
    |              ^
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_gdpr.py:188:9
    |
186 |         # Find active consent records for user and purpose
187 |         for consent in self.consent_records.values():
188 |         pass
    |         ^^^^
189 |             if (
190 |                 consent.user_id == user_id
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:189:1
    |
187 |         for consent in self.consent_records.values():
188 |         pass
189 |             if (
    | ^^^^^^^^^^^^
190 |                 consent.user_id == user_id
191 |                 and consent.purpose == purpose
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:195:13
    |
193 |                 and consent.withdrawn_at is None
194 |             ):
195 |             pass
    |             ^^^^
196 |                 consent.granted = False
197 |                 consent.withdrawn_at = datetime.now(UTC)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:196:1
    |
194 |             ):
195 |             pass
196 |                 consent.granted = False
    | ^^^^^^^^^^^^^^^^
197 |                 consent.withdrawn_at = datetime.now(UTC)
198 |                 logger.info(f"Consent withdrawn: {user_id} -> {purpose.value}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:203:5
    |
201 |         return False
202 |
203 |     def has_valid_consent(self, user_id: str, purpose: ProcessingPurpose) -> bool:
    |     ^
204 |         """Check if user has valid consent for processing purpose"""
205 |         for consent in self.consent_records.values():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_gdpr.py:206:9
    |
204 |         """Check if user has valid consent for processing purpose"""
205 |         for consent in self.consent_records.values():
206 |         pass
    |         ^^^^
207 |             if (
208 |                 consent.user_id == user_id
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:207:1
    |
205 |         for consent in self.consent_records.values():
206 |         pass
207 |             if (
    | ^^^^^^^^^^^^
208 |                 consent.user_id == user_id
209 |                 and consent.purpose == purpose
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:213:13
    |
211 |                 and consent.withdrawn_at is None
212 |             ):
213 |             pass
    |             ^^^^
214 |                 return True
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:214:1
    |
212 |             ):
213 |             pass
214 |                 return True
    | ^^^^^^^^^^^^^^^^
215 |
216 |         return False
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:216:9
    |
214 |                 return True
215 |
216 |         return False
    |         ^
217 |
218 |     def submit_data_subject_request(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:218:5
    |
216 |         return False
217 |
218 |     def submit_data_subject_request(
    |     ^
219 |         self, user_id: str, tenant_id: str, request_type: str, details: str = ""
220 |     ) -> DataSubjectRequest:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:242:9
    |
240 |         request = self.data_subject_requests.get(request_id)
241 |         if not request or request.request_type != "access":
242 |         pass
    |         ^^^^
243 |             return {"error": "Invalid access request"}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:243:1
    |
241 |         if not request or request.request_type != "access":
242 |         pass
243 |             return {"error": "Invalid access request"}
    | ^^^^^^^^^^^^
244 |
245 |         user_data = await self._collect_user_data(request.user_id, request.tenant_id)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:254:5
    |
252 |         return user_data
253 |
254 |     async def process_erasure_request(self, request_id: str) -> bool:
    |     ^
255 |         """Process right to erasure request (Art. 17 GDPR)"""
256 |         request = self.data_subject_requests.get(request_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:258:9
    |
256 |         request = self.data_subject_requests.get(request_id)
257 |         if not request or request.request_type != "erasure":
258 |         pass
    |         ^^^^
259 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:259:1
    |
257 |         if not request or request.request_type != "erasure":
258 |         pass
259 |             return False
    | ^^^^^^^^^^^^
260 |
261 |         # Check if erasure is legally possible
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:263:9
    |
261 |         # Check if erasure is legally possible
262 |         if not self._can_erase_data(request.user_id):
263 |         pass
    |         ^^^^
264 |             request.status = "rejected"
265 |             request.completed_at = datetime.now(UTC)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:264:1
    |
262 |         if not self._can_erase_data(request.user_id):
263 |         pass
264 |             request.status = "rejected"
    | ^^^^^^^^^^^^
265 |             request.completed_at = datetime.now(UTC)
266 |             return False
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:269:9
    |
268 |         # Perform data erasure
269 |         success = await self._erase_user_data(request.user_id, request.tenant_id)
    |         ^
270 |
271 |         request.status = "completed" if success else "rejected"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:279:5
    |
277 |         return success
278 |
279 |     async def process_portability_request(
    |     ^
280 |         self, request_id: str
281 |     ) -> Optional[Dict[str, Any]]:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:285:9
    |
283 |         request = self.data_subject_requests.get(request_id)
284 |         if not request or request.request_type != "portability":
285 |         pass
    |         ^^^^
286 |             return None
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:286:1
    |
284 |         if not request or request.request_type != "portability":
285 |         pass
286 |             return None
    | ^^^^^^^^^^^^
287 |
288 |         # Export user data in structured format
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:298:5
    |
296 |         return export_data
297 |
298 |     async def _collect_user_data(self, user_id: str, tenant_id: str) -> Dict[str, Any]:
    |     ^
299 |         """Collect all personal data for access request"""
300 |         # This would integrate with actual data storage systems
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_gdpr.py:356:9
    |
354 |         """Erase all user personal data"""
355 |         try:
356 |         pass
    |         ^^^^
357 |             # Remove or pseudonymize user data across all systems
358 |             # This would integrate with actual data storage systems
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:361:1
    |
360 |             # Remove consent records
361 |             to_remove = [
    | ^^^^^^^^^^^^
362 |                 consent_id
363 |                 for consent_id, consent in self.consent_records.items()
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_gdpr.py:368:13
    |
367 |             for consent_id in to_remove:
368 |             pass
    |             ^^^^
369 |                 del self.consent_records[consent_id]
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:369:1
    |
367 |             for consent_id in to_remove:
368 |             pass
369 |                 del self.consent_records[consent_id]
    | ^^^^^^^^^^^^^^^^
370 |
371 |             logger.info(f"Erased data for user: {user_id}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:374:9
    |
372 |             return True
373 |
374 |         except Exception as e:
    |         ^
375 |         pass
376 |             logger.error(f"Failed to erase data for user {user_id}: {str(e)}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:374:26
    |
372 |             return True
373 |
374 |         except Exception as e:
    |                          ^^
375 |         pass
376 |             logger.error(f"Failed to erase data for user {user_id}: {str(e)}")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_gdpr.py:374:31
    |
372 |             return True
373 |
374 |         except Exception as e:
    |                               ^
375 |         pass
376 |             logger.error(f"Failed to erase data for user {user_id}: {str(e)}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:376:1
    |
374 |         except Exception as e:
375 |         pass
376 |             logger.error(f"Failed to erase data for user {user_id}: {str(e)}")
    | ^^^^^^^^^^^^
377 |             return False
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:379:5
    |
377 |             return False
378 |
379 |     async def _export_user_data(self, user_id: str, tenant_id: str) -> Dict[str, Any]:
    |     ^
380 |         """Export user data in machine-readable format"""
381 |         user_data = await self._collect_user_data(user_id, tenant_id)
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_gdpr.py:426:9
    |
425 |         for category, retention_days in self.data_retention_policies.items():
426 |         pass
    |         ^^^^
427 |             if retention_days > 0:  # 0 means indefinite retention
428 |                 cutoff_date = datetime.now(UTC) - timedelta(days=retention_days)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:427:1
    |
425 |         for category, retention_days in self.data_retention_policies.items():
426 |         pass
427 |             if retention_days > 0:  # 0 means indefinite retention
    | ^^^^^^^^^^^^
428 |                 cutoff_date = datetime.now(UTC) - timedelta(days=retention_days)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:444:1
    |
443 | # FastAPI endpoints for GDPR compliance
444 | class GDPREndpoints:
    | ^
445 |     pass
446 |     """GDPR compliance API endpoints"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_gdpr.py:467:13
    |
466 |             try:
467 |             pass
    |             ^^^^
468 |                 purpose = ProcessingPurpose(purpose_str)
469 |                 consent = self.gdpr_manager.record_consent(
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:468:1
    |
466 |             try:
467 |             pass
468 |                 purpose = ProcessingPurpose(purpose_str)
    | ^^^^^^^^^^^^^^^^
469 |                 consent = self.gdpr_manager.record_consent(
470 |                     user_id, tenant_id, purpose, granted, consent_text
    |

E501 Line too long (99 > 88)
   --> backend\enterprise_gdpr.py:475:89
    |
473 |                 return {
474 |                     "consent_id": consent.consent_id,
475 |                     "message": f"Consent {'granted' if granted else 'denied'} for {purpose.value}",
    |                                                                                         ^^^^^^^^^^^
476 |                 }
477 |             except ValueError:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:477:13
    |
475 |                     "message": f"Consent {'granted' if granted else 'denied'} for {purpose.value}",
476 |                 }
477 |             except ValueError:
    |             ^^^^^^
478 |         pass
479 |             pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_gdpr.py:477:31
    |
475 |                     "message": f"Consent {'granted' if granted else 'denied'} for {purpose.value}",
476 |                 }
477 |             except ValueError:
    |                               ^
478 |         pass
479 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:479:1
    |
477 |             except ValueError:
478 |         pass
479 |             pass
    | ^^^^^^^^^^^^
480 |                 return {"error": f"Invalid purpose: {purpose_str}", "status_code": 400}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:480:1
    |
478 |         pass
479 |             pass
480 |                 return {"error": f"Invalid purpose: {purpose_str}", "status_code": 400}
    | ^^^^^^^^^^^^^^^^
481 |
482 |         @self.app.delete("/gdpr/consent/{purpose}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:482:9
    |
480 |                 return {"error": f"Invalid purpose: {purpose_str}", "status_code": 400}
481 |
482 |         @self.app.delete("/gdpr/consent/{purpose}")
    |         ^
483 |         async def withdraw_consent(purpose: str, request):
484 |             """Withdraw user consent"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_gdpr.py:488:13
    |
487 |             try:
488 |             pass
    |             ^^^^
489 |                 purpose_enum = ProcessingPurpose(purpose)
490 |                 success = self.gdpr_manager.withdraw_consent(user_id, purpose_enum)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:489:1
    |
487 |             try:
488 |             pass
489 |                 purpose_enum = ProcessingPurpose(purpose)
    | ^^^^^^^^^^^^^^^^
490 |                 success = self.gdpr_manager.withdraw_consent(user_id, purpose_enum)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:492:28
    |
490 |                 success = self.gdpr_manager.withdraw_consent(user_id, purpose_enum)
491 |
492 |                 if success:
    |                            ^
493 |             pass
494 |                     return {"message": f"Consent withdrawn for {purpose}"}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:494:1
    |
492 |                 if success:
493 |             pass
494 |                     return {"message": f"Consent withdrawn for {purpose}"}
    | ^^^^^^^^^^^^^^^^^^^^
495 |                 else:
496 |             pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\enterprise_gdpr.py:495:1
    |
493 |             pass
494 |                     return {"message": f"Consent withdrawn for {purpose}"}
495 |                 else:
    | ^^^^^^^^^^^^^^^^
496 |             pass
497 |                     return {"error": "No active consent found", "status_code": 404}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:495:17
    |
493 |             pass
494 |                     return {"message": f"Consent withdrawn for {purpose}"}
495 |                 else:
    |                 ^^^^
496 |             pass
497 |                     return {"error": "No active consent found", "status_code": 404}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:495:21
    |
493 |             pass
494 |                     return {"message": f"Consent withdrawn for {purpose}"}
495 |                 else:
    |                     ^
496 |             pass
497 |                     return {"error": "No active consent found", "status_code": 404}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:495:22
    |
493 |             pass
494 |                     return {"message": f"Consent withdrawn for {purpose}"}
495 |                 else:
    |                      ^
496 |             pass
497 |                     return {"error": "No active consent found", "status_code": 404}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:497:1
    |
495 |                 else:
496 |             pass
497 |                     return {"error": "No active consent found", "status_code": 404}
    | ^^^^^^^^^^^^^^^^^^^^
498 |             except ValueError:
499 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:498:13
    |
496 |             pass
497 |                     return {"error": "No active consent found", "status_code": 404}
498 |             except ValueError:
    |             ^
499 |             pass
500 |                 return {"error": f"Invalid purpose: {purpose}", "status_code": 400}
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_gdpr.py:498:31
    |
496 |             pass
497 |                     return {"error": "No active consent found", "status_code": 404}
498 |             except ValueError:
    |                               ^
499 |             pass
500 |                 return {"error": f"Invalid purpose: {purpose}", "status_code": 400}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:500:1
    |
498 |             except ValueError:
499 |             pass
500 |                 return {"error": f"Invalid purpose: {purpose}", "status_code": 400}
    | ^^^^^^^^^^^^^^^^
501 |
502 |         @self.app.post("/gdpr/request")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:502:9
    |
500 |                 return {"error": f"Invalid purpose: {purpose}", "status_code": 400}
501 |
502 |         @self.app.post("/gdpr/request")
    |         ^
503 |         async def submit_data_request(request_data: Dict[str, Any], request):
504 |             """Submit data subject rights request"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:518:13
    |
516 |                 "restriction",
517 |             ]:
518 |             pass
    |             ^^^^
519 |                 return {"error": "Invalid request type", "status_code": 400}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:519:1
    |
517 |             ]:
518 |             pass
519 |                 return {"error": "Invalid request type", "status_code": 400}
    | ^^^^^^^^^^^^^^^^
520 |
521 |             dsr = self.gdpr_manager.submit_data_subject_request(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:532:9
    |
530 |             }
531 |
532 |         @self.app.get("/gdpr/request/{request_id}")
    |         ^
533 |         async def get_request_status(request_id: str, request):
534 |             """Get data subject request status"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:539:13
    |
537 |             dsr = self.gdpr_manager.data_subject_requests.get(request_id)
538 |             if not dsr or dsr.user_id != user_id:
539 |             pass
    |             ^^^^
540 |                 return {"error": "Request not found", "status_code": 404}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:540:1
    |
538 |             if not dsr or dsr.user_id != user_id:
539 |             pass
540 |                 return {"error": "Request not found", "status_code": 404}
    | ^^^^^^^^^^^^^^^^
541 |
542 |             response = {
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_gdpr.py:553:13
    |
552 |             if dsr.status == "completed" and dsr.response_data:
553 |             pass
    |             ^^^^
554 |                 response["data"] = dsr.response_data
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:554:1
    |
552 |             if dsr.status == "completed" and dsr.response_data:
553 |             pass
554 |                 response["data"] = dsr.response_data
    | ^^^^^^^^^^^^^^^^
555 |
556 |             return response
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:556:13
    |
554 |                 response["data"] = dsr.response_data
555 |
556 |             return response
    |             ^
557 |
558 |         @self.app.get("/gdpr/processing-records")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:558:9
    |
556 |             return response
557 |
558 |         @self.app.get("/gdpr/processing-records")
    |         ^
559 |         async def get_processing_records():
560 |             """Get data processing records (public information)"""
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\enterprise_gdpr.py:565:9
    |
563 |         @self.app.get("/gdpr/my-data")
564 |         async def get_my_data(request):
565 |         pass
    |         ^^^^
566 |             """Get user's own data (simplified access request)"""
567 |             user_id = request.state.user.get("user_id")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_gdpr.py:566:1
    |
564 |         async def get_my_data(request):
565 |         pass
566 |             """Get user's own data (simplified access request)"""
    | ^^^^^^^^^^^^
567 |             user_id = request.state.user.get("user_id")
568 |             tenant_id = request.state.user.get("tenant_id")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_gdpr.py:572:1
    |
570 |             user_data = await self.gdpr_manager._collect_user_data(user_id, tenant_id)
571 |             return user_data
    |                             ^
    |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\enterprise_integration.py:62:9
   |
60 |         # Skip authentication for public endpoints
61 |         if request.url.path in self.public_endpoints:
62 |         pass
   |         ^^^^
63 |             return await call_next(request)
   |

invalid-syntax: Unexpected indentation
  --> backend\enterprise_integration.py:63:1
   |
61 |         if request.url.path in self.public_endpoints:
62 |         pass
63 |             return await call_next(request)
   | ^^^^^^^^^^^^
64 |
65 |         # Extract and validate JWT token
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\enterprise_integration.py:68:9
   |
66 |         auth_header = request.headers.get("Authorization")
67 |         if not auth_header or not auth_header.startswith("Bearer "):
68 |         pass
   |         ^^^^
69 |             return self._unauthorized_response(
70 |                 "Missing or invalid authorization header"
   |

invalid-syntax: Unexpected indentation
  --> backend\enterprise_integration.py:69:1
   |
67 |         if not auth_header or not auth_header.startswith("Bearer "):
68 |         pass
69 |             return self._unauthorized_response(
   | ^^^^^^^^^^^^
70 |                 "Missing or invalid authorization header"
71 |             )
   |

invalid-syntax: Expected an indented block after `try` statement
  --> backend\enterprise_integration.py:76:9
   |
75 |         try:
76 |         pass
   |         ^^^^
77 |             # Verify JWT token
78 |             user_info = await self.sso_manager.verify_jwt_token(token)
   |

invalid-syntax: Unexpected indentation
  --> backend\enterprise_integration.py:78:1
   |
76 |         pass
77 |             # Verify JWT token
78 |             user_info = await self.sso_manager.verify_jwt_token(token)
   | ^^^^^^^^^^^^
79 |             if not user_info:
80 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\enterprise_integration.py:80:13
   |
78 |             user_info = await self.sso_manager.verify_jwt_token(token)
79 |             if not user_info:
80 |             pass
   |             ^^^^
81 |                 return self._unauthorized_response("Invalid token")
   |

invalid-syntax: Unexpected indentation
  --> backend\enterprise_integration.py:81:1
   |
79 |             if not user_info:
80 |             pass
81 |                 return self._unauthorized_response("Invalid token")
   | ^^^^^^^^^^^^^^^^
82 |
83 |             # Check if user's tenant is active
   |

invalid-syntax: Expected a statement
  --> backend\enterprise_integration.py:84:13
   |
83 |             # Check if user's tenant is active
84 |             tenant = self.tenant_manager.get_tenant(user_info["tenant_id"])
   |             ^
85 |             if not tenant or tenant.status != "active":
86 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\enterprise_integration.py:86:13
   |
84 |             tenant = self.tenant_manager.get_tenant(user_info["tenant_id"])
85 |             if not tenant or tenant.status != "active":
86 |             pass
   |             ^^^^
87 |                 return self._unauthorized_response("Tenant not active")
   |

invalid-syntax: Unexpected indentation
  --> backend\enterprise_integration.py:87:1
   |
85 |             if not tenant or tenant.status != "active":
86 |             pass
87 |                 return self._unauthorized_response("Tenant not active")
   | ^^^^^^^^^^^^^^^^
88 |
89 |             # Get user permissions
   |

invalid-syntax: Expected a statement
  --> backend\enterprise_integration.py:90:13
   |
89 |             # Get user permissions
90 |             permissions = self.rbac_manager.get_user_permissions(
   |             ^
91 |                 user_info["user_id"], user_info["tenant_id"]
92 |             )
   |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:106:13
    |
104 |             # Check endpoint permissions
105 |             if not self._check_endpoint_permission(request, permissions):
106 |             pass
    |             ^^^^
107 |                 return self._forbidden_response("Insufficient permissions")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:107:1
    |
105 |             if not self._check_endpoint_permission(request, permissions):
106 |             pass
107 |                 return self._forbidden_response("Insufficient permissions")
    | ^^^^^^^^^^^^^^^^
108 |
109 |             # Log access for audit
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:110:13
    |
109 |             # Log access for audit
110 |             await self._log_access(request, user_info)
    |             ^
111 |
112 |         except jwt.ExpiredSignatureError:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:112:9
    |
110 |             await self._log_access(request, user_info)
111 |
112 |         except jwt.ExpiredSignatureError:
    |         ^
113 |         pass
114 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:112:42
    |
110 |             await self._log_access(request, user_info)
111 |
112 |         except jwt.ExpiredSignatureError:
    |                                          ^
113 |         pass
114 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:115:1
    |
113 |         pass
114 |         pass
115 |             return self._unauthorized_response("Token expired")
    | ^^^^^^^^^^^^
116 |         except jwt.InvalidTokenError:
117 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:116:9
    |
114 |         pass
115 |             return self._unauthorized_response("Token expired")
116 |         except jwt.InvalidTokenError:
    |         ^
117 |         pass
118 |             return self._unauthorized_response("Invalid token")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:116:38
    |
114 |         pass
115 |             return self._unauthorized_response("Token expired")
116 |         except jwt.InvalidTokenError:
    |                                      ^
117 |         pass
118 |             return self._unauthorized_response("Invalid token")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:118:1
    |
116 |         except jwt.InvalidTokenError:
117 |         pass
118 |             return self._unauthorized_response("Invalid token")
    | ^^^^^^^^^^^^
119 |         except Exception as e:
120 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:119:9
    |
117 |         pass
118 |             return self._unauthorized_response("Invalid token")
119 |         except Exception as e:
    |         ^
120 |         pass
121 |             logger.error(f"Authentication error: {str(e)}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:119:26
    |
117 |         pass
118 |             return self._unauthorized_response("Invalid token")
119 |         except Exception as e:
    |                          ^^
120 |         pass
121 |             logger.error(f"Authentication error: {str(e)}")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:119:31
    |
117 |         pass
118 |             return self._unauthorized_response("Invalid token")
119 |         except Exception as e:
    |                               ^
120 |         pass
121 |             logger.error(f"Authentication error: {str(e)}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:121:1
    |
119 |         except Exception as e:
120 |         pass
121 |             logger.error(f"Authentication error: {str(e)}")
    | ^^^^^^^^^^^^
122 |             return self._unauthorized_response("Authentication failed")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:124:9
    |
122 |             return self._unauthorized_response("Authentication failed")
123 |
124 |         return await call_next(request)
    |         ^
125 |
126 |     def _check_endpoint_permission(self, request: Request, permissions: set) -> bool:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:126:5
    |
124 |         return await call_next(request)
125 |
126 |     def _check_endpoint_permission(self, request: Request, permissions: set) -> bool:
    |     ^
127 |         """Check if user has permission for the endpoint"""
128 |         # method = request.method.lower()  # Removed unused variable
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:133:9
    |
131 |         # Admin endpoints require admin permissions
132 |         if path.startswith("/admin/"):
133 |         pass
    |         ^^^^
134 |             return "admin" in permissions or "super_admin" in permissions
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:134:1
    |
132 |         if path.startswith("/admin/"):
133 |         pass
134 |             return "admin" in permissions or "super_admin" in permissions
    | ^^^^^^^^^^^^
135 |
136 |         # GDPR endpoints
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:138:9
    |
136 |         # GDPR endpoints
137 |         if path.startswith("/gdpr/"):
138 |         pass
    |         ^^^^
139 |             return "gdpr_access" in permissions or "admin" in permissions
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:139:1
    |
137 |         if path.startswith("/gdpr/"):
138 |         pass
139 |             return "gdpr_access" in permissions or "admin" in permissions
    | ^^^^^^^^^^^^
140 |
141 |         # SOC2 endpoints
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:142:9
    |
141 |         # SOC2 endpoints
142 |         if path.startswith("/soc2/"):
    |         ^
143 |         pass
144 |             return "security_admin" in permissions or "admin" in permissions
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:143:9
    |
141 |         # SOC2 endpoints
142 |         if path.startswith("/soc2/"):
143 |         pass
    |         ^^^^
144 |             return "security_admin" in permissions or "admin" in permissions
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:144:1
    |
142 |         if path.startswith("/soc2/"):
143 |         pass
144 |             return "security_admin" in permissions or "admin" in permissions
    | ^^^^^^^^^^^^
145 |
146 |         # Tenant management
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:147:9
    |
146 |         # Tenant management
147 |         if path.startswith("/tenant/"):
    |         ^
148 |         pass
149 |             return "tenant_admin" in permissions or "admin" in permissions
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:148:9
    |
146 |         # Tenant management
147 |         if path.startswith("/tenant/"):
148 |         pass
    |         ^^^^
149 |             return "tenant_admin" in permissions or "admin" in permissions
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:149:1
    |
147 |         if path.startswith("/tenant/"):
148 |         pass
149 |             return "tenant_admin" in permissions or "admin" in permissions
    | ^^^^^^^^^^^^
150 |
151 |         # Default: allow if user has basic access
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:152:9
    |
151 |         # Default: allow if user has basic access
152 |         return "user" in permissions or len(permissions) > 0
    |         ^
153 |
154 |     def _unauthorized_response(self, message: str):
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:154:5
    |
152 |         return "user" in permissions or len(permissions) > 0
153 |
154 |     def _unauthorized_response(self, message: str):
    |     ^
155 |         """Return unauthorized response"""
156 |         from fastapi.responses import JSONResponse
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:188:1
    |
188 | class EnterpriseIntegration:
    | ^
189 |     pass
190 |     """Main enterprise integration class"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:248:9
    |
246 |         # CORS middleware for web frontend
247 |         if is_test_mode:
248 |         pass
    |         ^^^^
249 |             # In tests, allow all to ensure preflight requests succeed
250 |             self.app.add_middleware(
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:250:1
    |
248 |         pass
249 |             # In tests, allow all to ensure preflight requests succeed
250 |             self.app.add_middleware(
    | ^^^^^^^^^^^^
251 |                 CORSMiddleware,
252 |                 allow_origins=["*"],
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:257:9
    |
255 |                 allow_headers=["*"],
256 |             )
257 |         else:
    |         ^^^^
258 |         pass
259 |             self.app.add_middleware(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:257:13
    |
255 |                 allow_headers=["*"],
256 |             )
257 |         else:
    |             ^
258 |         pass
259 |             self.app.add_middleware(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:257:14
    |
255 |                 allow_headers=["*"],
256 |             )
257 |         else:
    |              ^
258 |         pass
259 |             self.app.add_middleware(
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:259:1
    |
257 |         else:
258 |         pass
259 |             self.app.add_middleware(
    | ^^^^^^^^^^^^
260 |                 CORSMiddleware,
261 |                 allow_origins=["http://localhost:3000", "https://*.your-domain.com"],
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:270:9
    |
268 |         # is_test_mode already computed above
269 |         if is_test_mode:
270 |         pass
    |         ^^^^
271 |             logger.info(
272 |                 "TEST_MODE enabled: Skipping enterprise authentication middleware"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:271:1
    |
269 |         if is_test_mode:
270 |         pass
271 |             logger.info(
    | ^^^^^^^^^^^^
272 |                 "TEST_MODE enabled: Skipping enterprise authentication middleware"
273 |             )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:274:9
    |
272 |                 "TEST_MODE enabled: Skipping enterprise authentication middleware"
273 |             )
274 |         else:
    |         ^
275 |         pass
276 |             # Enterprise authentication middleware
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:274:13
    |
272 |                 "TEST_MODE enabled: Skipping enterprise authentication middleware"
273 |             )
274 |         else:
    |             ^
275 |         pass
276 |             # Enterprise authentication middleware
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:274:14
    |
272 |                 "TEST_MODE enabled: Skipping enterprise authentication middleware"
273 |             )
274 |         else:
    |              ^
275 |         pass
276 |             # Enterprise authentication middleware
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:277:1
    |
275 |         pass
276 |             # Enterprise authentication middleware
277 |             self.app.add_middleware(
    | ^^^^^^^^^^^^
278 |                 EnterpriseAuthMiddleware,
279 |                 sso_manager=self.sso_manager,
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:284:5
    |
282 |             )
283 |
284 |     def _register_endpoints(self):
    |     ^
285 |         """Register all enterprise endpoints"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_integration.py:314:13
    |
312 |             """Enterprise health check endpoint"""
313 |             try:
314 |             pass
    |             ^^^^
315 |                 health_status = {
316 |                     "status": "healthy",
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:315:1
    |
313 |             try:
314 |             pass
315 |                 health_status = {
    | ^^^^^^^^^^^^^^^^
316 |                     "status": "healthy",
317 |                     "timestamp": datetime.utcnow().isoformat(),
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:335:41
    |
333 |                 ]
334 |
335 |                 if unhealthy_components:
    |                                         ^
336 |             pass
337 |                     health_status["status"] = "degraded"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:337:1
    |
335 |                 if unhealthy_components:
336 |             pass
337 |                     health_status["status"] = "degraded"
    | ^^^^^^^^^^^^^^^^^^^^
338 |                     health_status["unhealthy_components"] = unhealthy_components
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\enterprise_integration.py:340:1
    |
338 |                     health_status["unhealthy_components"] = unhealthy_components
339 |
340 |                 return health_status
    | ^^^^^^^^^^^^^^^^
341 |
342 |             except Exception as e:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:342:13
    |
340 |                 return health_status
341 |
342 |             except Exception as e:
    |             ^^^^^^
343 |             pass
344 |                 logger.error(f"Health check failed: {str(e)}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:342:30
    |
340 |                 return health_status
341 |
342 |             except Exception as e:
    |                              ^^
343 |             pass
344 |                 logger.error(f"Health check failed: {str(e)}")
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:342:35
    |
340 |                 return health_status
341 |
342 |             except Exception as e:
    |                                   ^
343 |             pass
344 |                 logger.error(f"Health check failed: {str(e)}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:344:1
    |
342 |             except Exception as e:
343 |             pass
344 |                 logger.error(f"Health check failed: {str(e)}")
    | ^^^^^^^^^^^^^^^^
345 |                 return {
346 |                     "status": "unhealthy",
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:351:5
    |
349 |                 }
350 |
351 |     async def _check_sso_health(self) -> Dict[str, Any]:
    |     ^
352 |         """Check SSO system health"""
353 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_integration.py:354:9
    |
352 |         """Check SSO system health"""
353 |         try:
354 |         pass
    |         ^^^^
355 |             # Test SSO provider connectivity
356 |             providers_healthy = True  # Would test actual providers
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:356:1
    |
354 |         pass
355 |             # Test SSO provider connectivity
356 |             providers_healthy = True  # Would test actual providers
    | ^^^^^^^^^^^^
357 |             return {
358 |                 "status": "healthy" if providers_healthy else "unhealthy",
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:362:9
    |
360 |                 "last_check": datetime.utcnow().isoformat(),
361 |             }
362 |         except Exception as e:
    |         ^^^^^^
363 |         pass
364 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:362:26
    |
360 |                 "last_check": datetime.utcnow().isoformat(),
361 |             }
362 |         except Exception as e:
    |                          ^^
363 |         pass
364 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:362:31
    |
360 |                 "last_check": datetime.utcnow().isoformat(),
361 |             }
362 |         except Exception as e:
    |                               ^
363 |         pass
364 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:365:1
    |
363 |         pass
364 |         pass
365 |             return {"status": "unhealthy", "error": str(e)}
    | ^^^^^^^^^^^^
366 |
367 |     async def _check_tenant_health(self) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:367:5
    |
365 |             return {"status": "unhealthy", "error": str(e)}
366 |
367 |     async def _check_tenant_health(self) -> Dict[str, Any]:
    |     ^
368 |         """Check tenant management health"""
369 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_integration.py:370:9
    |
368 |         """Check tenant management health"""
369 |         try:
370 |         pass
    |         ^^^^
371 |             tenants = self.tenant_manager.list_tenants()
372 |             return {
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:371:1
    |
369 |         try:
370 |         pass
371 |             tenants = self.tenant_manager.list_tenants()
    | ^^^^^^^^^^^^
372 |             return {
373 |                 "status": "healthy",
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:378:9
    |
376 |                 "last_check": datetime.utcnow().isoformat(),
377 |             }
378 |         except Exception as e:
    |         ^^^^^^
379 |         pass
380 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:378:26
    |
376 |                 "last_check": datetime.utcnow().isoformat(),
377 |             }
378 |         except Exception as e:
    |                          ^^
379 |         pass
380 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:378:31
    |
376 |                 "last_check": datetime.utcnow().isoformat(),
377 |             }
378 |         except Exception as e:
    |                               ^
379 |         pass
380 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:381:1
    |
379 |         pass
380 |         pass
381 |             return {"status": "unhealthy", "error": str(e)}
    | ^^^^^^^^^^^^
382 |
383 |     async def _check_rbac_health(self) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:383:5
    |
381 |             return {"status": "unhealthy", "error": str(e)}
382 |
383 |     async def _check_rbac_health(self) -> Dict[str, Any]:
    |     ^
384 |         """Check RBAC system health"""
385 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_integration.py:386:9
    |
384 |         """Check RBAC system health"""
385 |         try:
386 |         pass
    |         ^^^^
387 |             return {
388 |                 "status": "healthy",
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:387:1
    |
385 |         try:
386 |         pass
387 |             return {
    | ^^^^^^^^^^^^
388 |                 "status": "healthy",
389 |                 "roles_configured": len(self.rbac_manager.roles),
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:393:9
    |
391 |                 "last_check": datetime.utcnow().isoformat(),
392 |             }
393 |         except Exception as e:
    |         ^^^^^^
394 |         pass
395 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:393:26
    |
391 |                 "last_check": datetime.utcnow().isoformat(),
392 |             }
393 |         except Exception as e:
    |                          ^^
394 |         pass
395 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:393:31
    |
391 |                 "last_check": datetime.utcnow().isoformat(),
392 |             }
393 |         except Exception as e:
    |                               ^
394 |         pass
395 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:396:1
    |
394 |         pass
395 |         pass
396 |             return {"status": "unhealthy", "error": str(e)}
    | ^^^^^^^^^^^^
397 |
398 |     async def _check_gdpr_health(self) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:398:5
    |
396 |             return {"status": "unhealthy", "error": str(e)}
397 |
398 |     async def _check_gdpr_health(self) -> Dict[str, Any]:
    |     ^
399 |         """Check GDPR compliance health"""
400 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_integration.py:401:9
    |
399 |         """Check GDPR compliance health"""
400 |         try:
401 |         pass
    |         ^^^^
402 |             return {
403 |                 "status": "healthy",
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:402:1
    |
400 |         try:
401 |         pass
402 |             return {
    | ^^^^^^^^^^^^
403 |                 "status": "healthy",
404 |                 "processing_records": len(self.gdpr_manager.processing_records),
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:414:9
    |
412 |                 "last_check": datetime.utcnow().isoformat(),
413 |             }
414 |         except Exception as e:
    |         ^^^^^^
415 |         pass
416 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:414:26
    |
412 |                 "last_check": datetime.utcnow().isoformat(),
413 |             }
414 |         except Exception as e:
    |                          ^^
415 |         pass
416 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:414:31
    |
412 |                 "last_check": datetime.utcnow().isoformat(),
413 |             }
414 |         except Exception as e:
    |                               ^
415 |         pass
416 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:417:1
    |
415 |         pass
416 |         pass
417 |             return {"status": "unhealthy", "error": str(e)}
    | ^^^^^^^^^^^^
418 |
419 |     async def _check_soc2_health(self) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:419:5
    |
417 |             return {"status": "unhealthy", "error": str(e)}
418 |
419 |     async def _check_soc2_health(self) -> Dict[str, Any]:
    |     ^
420 |         """Check SOC2 compliance health"""
421 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_integration.py:422:9
    |
420 |         """Check SOC2 compliance health"""
421 |         try:
422 |         pass
    |         ^^^^
423 |             control_status = self.soc2_manager.get_control_testing_status()
424 |             return {
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:423:1
    |
421 |         try:
422 |         pass
423 |             control_status = self.soc2_manager.get_control_testing_status()
    | ^^^^^^^^^^^^
424 |             return {
425 |                 "status": "healthy",
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:431:9
    |
429 |                 "last_check": datetime.utcnow().isoformat(),
430 |             }
431 |         except Exception as e:
    |         ^^^^^^
432 |         pass
433 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:431:26
    |
429 |                 "last_check": datetime.utcnow().isoformat(),
430 |             }
431 |         except Exception as e:
    |                          ^^
432 |         pass
433 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_integration.py:431:31
    |
429 |                 "last_check": datetime.utcnow().isoformat(),
430 |             }
431 |         except Exception as e:
    |                               ^
432 |         pass
433 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:434:1
    |
432 |         pass
433 |         pass
434 |             return {"status": "unhealthy", "error": str(e)}
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:440:1
    |
440 | def get_current_user(request: Request) -> Dict[str, Any]:
    | ^
441 |     """Get current authenticated user from request"""
442 |     if hasattr(request.state, "user"):
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_integration.py:457:13
    |
455 |             request = None
456 |             for arg in args:
457 |             pass
    |             ^^^^
458 |                 if isinstance(arg, Request):
459 |                     request = arg
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:458:1
    |
456 |             for arg in args:
457 |             pass
458 |                 if isinstance(arg, Request):
    | ^^^^^^^^^^^^^^^^
459 |                     request = arg
460 |                     break
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:463:13
    |
462 |             if not request or not hasattr(request.state, "user"):
463 |             pass
    |             ^^^^
464 |                 raise HTTPException(status_code=401, detail="Not authenticated")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:464:1
    |
462 |             if not request or not hasattr(request.state, "user"):
463 |             pass
464 |                 raise HTTPException(status_code=401, detail="Not authenticated")
    | ^^^^^^^^^^^^^^^^
465 |
466 |             user_permissions = request.state.user.get("permissions", set())
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:468:13
    |
466 |             user_permissions = request.state.user.get("permissions", set())
467 |             if permission not in user_permissions and "admin" not in user_permissions:
468 |             pass
    |             ^^^^
469 |                 raise HTTPException(
470 |                     status_code=403, detail=f"Permission required: {permission}"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:469:1
    |
467 |             if permission not in user_permissions and "admin" not in user_permissions:
468 |             pass
469 |                 raise HTTPException(
    | ^^^^^^^^^^^^^^^^
470 |                     status_code=403, detail=f"Permission required: {permission}"
471 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:475:9
    |
473 |             return await func(*args, **kwargs)
474 |
475 |         return wrapper
    |         ^
476 |
477 |     return decorator
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:477:5
    |
475 |         return wrapper
476 |
477 |     return decorator
    |     ^
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:480:1
    |
480 | def require_role(role: str):
    | ^
481 |     """Decorator to require specific role"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_integration.py:489:13
    |
487 |             request = None
488 |             for arg in args:
489 |             pass
    |             ^^^^
490 |                 if isinstance(arg, Request):
491 |                     request = arg
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:490:1
    |
488 |             for arg in args:
489 |             pass
490 |                 if isinstance(arg, Request):
    | ^^^^^^^^^^^^^^^^
491 |                     request = arg
492 |                     break
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:495:13
    |
494 |             if not request or not hasattr(request.state, "user"):
495 |             pass
    |             ^^^^
496 |                 raise HTTPException(status_code=401, detail="Not authenticated")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:496:1
    |
494 |             if not request or not hasattr(request.state, "user"):
495 |             pass
496 |                 raise HTTPException(status_code=401, detail="Not authenticated")
    | ^^^^^^^^^^^^^^^^
497 |
498 |             user_roles = request.state.user.get("roles", [])
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_integration.py:500:13
    |
498 |             user_roles = request.state.user.get("roles", [])
499 |             if role not in user_roles and "admin" not in user_roles:
500 |             pass
    |             ^^^^
501 |                 raise HTTPException(status_code=403, detail=f"Role required: {role}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_integration.py:501:1
    |
499 |             if role not in user_roles and "admin" not in user_roles:
500 |             pass
501 |                 raise HTTPException(status_code=403, detail=f"Role required: {role}")
    | ^^^^^^^^^^^^^^^^
502 |
503 |             return await func(*args, **kwargs)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:505:9
    |
503 |             return await func(*args, **kwargs)
504 |
505 |         return wrapper
    |         ^
506 |
507 |     return decorator
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:507:5
    |
505 |         return wrapper
506 |
507 |     return decorator
    |     ^
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_integration.py:511:1
    |
510 | # Export main integration class and utilities
511 | __all__ = [
    | ^
512 |     "EnterpriseIntegration",
513 |     "EnterpriseAuthMiddleware",
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:218:9
    |
216 |         # Get existing permissions or create new
217 |         if key in self.user_permissions:
218 |         pass
    |         ^^^^
219 |             user_perms = self.user_permissions[key]
220 |             if role not in user_perms.roles:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:219:1
    |
217 |         if key in self.user_permissions:
218 |         pass
219 |             user_perms = self.user_permissions[key]
    | ^^^^^^^^^^^^
220 |             if role not in user_perms.roles:
221 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:221:13
    |
219 |             user_perms = self.user_permissions[key]
220 |             if role not in user_perms.roles:
221 |             pass
    |             ^^^^
222 |                 user_perms.roles.append(role)
223 |         else:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:222:1
    |
220 |             if role not in user_perms.roles:
221 |             pass
222 |                 user_perms.roles.append(role)
    | ^^^^^^^^^^^^^^^^
223 |         else:
224 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:223:9
    |
221 |             pass
222 |                 user_perms.roles.append(role)
223 |         else:
    |         ^^^^
224 |         pass
225 |             user_perms = UserPermissions(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:223:13
    |
221 |             pass
222 |                 user_perms.roles.append(role)
223 |         else:
    |             ^
224 |         pass
225 |             user_perms = UserPermissions(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:223:14
    |
221 |             pass
222 |                 user_perms.roles.append(role)
223 |         else:
    |              ^
224 |         pass
225 |             user_perms = UserPermissions(
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:225:1
    |
223 |         else:
224 |         pass
225 |             user_perms = UserPermissions(
    | ^^^^^^^^^^^^
226 |                 user_id=user_id,
227 |                 tenant_id=tenant_id,
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:237:9
    |
236 |         # Recalculate effective permissions
237 |         self._calculate_effective_permissions(user_perms)
    |         ^
238 |
239 |         logger.info(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:244:5
    |
242 |         return True
243 |
244 |     def remove_role(self, user_id: str, tenant_id: str, role: UserRole) -> bool:
    |     ^
245 |         """Remove a role from a user"""
246 |         key = f"{user_id}:{tenant_id}"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:249:9
    |
248 |         if key not in self.user_permissions:
249 |         pass
    |         ^^^^
250 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:250:1
    |
248 |         if key not in self.user_permissions:
249 |         pass
250 |             return False
    | ^^^^^^^^^^^^
251 |
252 |         user_perms = self.user_permissions[key]
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:254:9
    |
252 |         user_perms = self.user_permissions[key]
253 |         if role in user_perms.roles:
254 |         pass
    |         ^^^^
255 |             user_perms.roles.remove(role)
256 |             self._calculate_effective_permissions(user_perms)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:255:1
    |
253 |         if role in user_perms.roles:
254 |         pass
255 |             user_perms.roles.remove(role)
    | ^^^^^^^^^^^^
256 |             self._calculate_effective_permissions(user_perms)
257 |             logger.info(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:262:9
    |
260 |             return True
261 |
262 |         return False
    |         ^
263 |
264 |     def has_permission(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:264:5
    |
262 |         return False
263 |
264 |     def has_permission(
    |     ^
265 |         self, user_id: str, tenant_id: str, permission: Permission
266 |     ) -> bool:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:272:9
    |
271 |         if not user_perms:
272 |         pass
    |         ^^^^
273 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:273:1
    |
271 |         if not user_perms:
272 |         pass
273 |             return False
    | ^^^^^^^^^^^^
274 |
275 |         # Check if permissions have expired
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:277:9
    |
275 |         # Check if permissions have expired
276 |         if user_perms.expires_at and datetime.utcnow() > user_perms.expires_at:
277 |         pass
    |         ^^^^
278 |             logger.warning(f"Permissions expired for user {user_id}")
279 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:278:1
    |
276 |         if user_perms.expires_at and datetime.utcnow() > user_perms.expires_at:
277 |         pass
278 |             logger.warning(f"Permissions expired for user {user_id}")
    | ^^^^^^^^^^^^
279 |             return False
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:281:9
    |
279 |             return False
280 |
281 |         return permission in user_perms.effective_permissions
    |         ^
282 |
283 |     def get_user_permissions(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:283:5
    |
281 |         return permission in user_perms.effective_permissions
282 |
283 |     def get_user_permissions(
    |     ^
284 |         self, user_id: str, tenant_id: str
285 |     ) -> Optional[UserPermissions]:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_rbac.py:293:9
    |
291 |         """Check if a role name string is a valid UserRole."""
292 |         try:
293 |         pass
    |         ^^^^
294 |             UserRole(role_name)
295 |             return True
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:294:1
    |
292 |         try:
293 |         pass
294 |             UserRole(role_name)
    | ^^^^^^^^^^^^
295 |             return True
296 |         except ValueError:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:296:9
    |
294 |             UserRole(role_name)
295 |             return True
296 |         except ValueError:
    |         ^^^^^^
297 |         pass
298 |             return False
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_rbac.py:296:27
    |
294 |             UserRole(role_name)
295 |             return True
296 |         except ValueError:
    |                           ^
297 |         pass
298 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:298:1
    |
296 |         except ValueError:
297 |         pass
298 |             return False
    | ^^^^^^^^^^^^
299 |
300 |     def _calculate_effective_permissions(self, user_perms: UserPermissions):
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:300:5
    |
298 |             return False
299 |
300 |     def _calculate_effective_permissions(self, user_perms: UserPermissions):
    |     ^
301 |         """Calculate effective permissions from all assigned roles"""
302 |         effective_perms = set()
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_rbac.py:305:9
    |
304 |         for role in user_perms.roles:
305 |         pass
    |         ^^^^
306 |             if role in self.roles:
307 |                 role_perms = self.roles[role].permissions
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:306:1
    |
304 |         for role in user_perms.roles:
305 |         pass
306 |             if role in self.roles:
    | ^^^^^^^^^^^^
307 |                 role_perms = self.roles[role].permissions
308 |                 effective_perms.update(role_perms)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:312:68
    |
310 |                 # Handle role inheritance
311 |                 inherited_role = self.roles[role].inherits_from
312 |                 if inherited_role and inherited_role in self.roles:
    |                                                                    ^
313 |             pass
314 |                     inherited_perms = self.roles[inherited_role].permissions
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:314:1
    |
312 |                 if inherited_role and inherited_role in self.roles:
313 |             pass
314 |                     inherited_perms = self.roles[inherited_role].permissions
    | ^^^^^^^^^^^^^^^^^^^^
315 |                     effective_perms.update(inherited_perms)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:317:9
    |
315 |                     effective_perms.update(inherited_perms)
316 |
317 |         user_perms.effective_permissions = effective_perms
    |         ^
318 |
319 |     def create_custom_role(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:319:5
    |
317 |         user_perms.effective_permissions = effective_perms
318 |
319 |     def create_custom_role(
    |     ^
320 |         self,
321 |         role_name: str,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:328:9
    |
326 |         """Create a custom role"""
327 |         if role_name in self.custom_roles:
328 |         pass
    |         ^^^^
329 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:329:1
    |
327 |         if role_name in self.custom_roles:
328 |         pass
329 |             return False
    | ^^^^^^^^^^^^
330 |
331 |         custom_role = Role(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:342:5
    |
340 |         return True
341 |
342 |     def list_available_roles(self) -> List[Dict[str, Any]]:
    |     ^
343 |         """List all available roles"""
344 |         roles_list = []
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_rbac.py:348:9
    |
346 |         # Standard roles
347 |         for role in self.roles.values():
348 |         pass
    |         ^^^^
349 |             roles_list.append(
350 |                 {
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:349:1
    |
347 |         for role in self.roles.values():
348 |         pass
349 |             roles_list.append(
    | ^^^^^^^^^^^^
350 |                 {
351 |                     "name": role.name.value,
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_rbac.py:361:9
    |
359 |         # Custom roles
360 |         for role in self.custom_roles.values():
361 |         pass
    |         ^^^^
362 |             roles_list.append(
363 |                 {
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:362:1
    |
360 |         for role in self.custom_roles.values():
361 |         pass
362 |             roles_list.append(
    | ^^^^^^^^^^^^
363 |                 {
364 |                     "name": role.name,
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:372:9
    |
370 |             )
371 |
372 |         return roles_list
    |         ^
373 |
374 |     # --- Test-friendly wrapper methods expected by tests ---
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:375:5
    |
374 |     # --- Test-friendly wrapper methods expected by tests ---
375 |     def assign_role_to_user(
    |     ^
376 |         self, user_id: str, tenant_id: str, role: UserRole, granted_by: str
377 |     ) -> bool:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_rbac.py:401:9
    |
399 |         """
400 |         try:
401 |         pass
    |         ^^^^
402 |             if isinstance(role, UserRole):
403 |                 return self.roles.get(role, Role(role, "", "", set())).permissions
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:402:1
    |
400 |         try:
401 |         pass
402 |             if isinstance(role, UserRole):
    | ^^^^^^^^^^^^
403 |                 return self.roles.get(role, Role(role, "", "", set())).permissions
404 |             # Allow passing strings (tests may simulate invalid role)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:406:9
    |
404 |             # Allow passing strings (tests may simulate invalid role)
405 |             return set()
406 |         except Exception:
    |         ^^^^^^
407 |         pass
408 |             return set()
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_rbac.py:406:26
    |
404 |             # Allow passing strings (tests may simulate invalid role)
405 |             return set()
406 |         except Exception:
    |                          ^
407 |         pass
408 |             return set()
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:408:1
    |
406 |         except Exception:
407 |         pass
408 |             return set()
    | ^^^^^^^^^^^^
409 |
410 | """Test-friendly decorators and module-level manager.
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:410:1
    |
408 |             return set()
409 |
410 | """Test-friendly decorators and module-level manager.
    | ^
411 |
412 | The tests expect a module-level `rbac_manager` and decorators that call methods
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:433:13
    |
431 |             mgr = globals().get("rbac_manager")
432 |             if mgr is None:
433 |             pass
    |             ^^^^
434 |                 raise PermissionError("RBAC system not available")
435 |             if not mgr.check_user_permission(user_id, tenant_id, permission):
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:434:1
    |
432 |             if mgr is None:
433 |             pass
434 |                 raise PermissionError("RBAC system not available")
    | ^^^^^^^^^^^^^^^^
435 |             if not mgr.check_user_permission(user_id, tenant_id, permission):
436 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:436:13
    |
434 |                 raise PermissionError("RBAC system not available")
435 |             if not mgr.check_user_permission(user_id, tenant_id, permission):
436 |             pass
    |             ^^^^
437 |                 raise PermissionError(f"Permission {permission.value} required")
438 |             return func(user_id, tenant_id, *args, **kwargs)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:437:1
    |
435 |             if not mgr.check_user_permission(user_id, tenant_id, permission):
436 |             pass
437 |                 raise PermissionError(f"Permission {permission.value} required")
    | ^^^^^^^^^^^^^^^^
438 |             return func(user_id, tenant_id, *args, **kwargs)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:442:5
    |
440 |         return wrapper
441 |
442 |     return decorator
    |     ^
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:445:1
    |
445 | def require_role(role: UserRole):
    | ^
446 |     """Decorator to enforce a required role (test-friendly)."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:454:13
    |
452 |             mgr = globals().get("rbac_manager")
453 |             if mgr is None:
454 |             pass
    |             ^^^^
455 |                 raise PermissionError("RBAC system not available")
456 |             roles = mgr.get_user_roles(user_id, tenant_id)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:455:1
    |
453 |             if mgr is None:
454 |             pass
455 |                 raise PermissionError("RBAC system not available")
    | ^^^^^^^^^^^^^^^^
456 |             roles = mgr.get_user_roles(user_id, tenant_id)
457 |             if role not in roles:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:458:13
    |
456 |             roles = mgr.get_user_roles(user_id, tenant_id)
457 |             if role not in roles:
458 |             pass
    |             ^^^^
459 |                 raise PermissionError(f"Role {role.value} required")
460 |             return func(user_id, tenant_id, *args, **kwargs)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:459:1
    |
457 |             if role not in roles:
458 |             pass
459 |                 raise PermissionError(f"Role {role.value} required")
    | ^^^^^^^^^^^^^^^^
460 |             return func(user_id, tenant_id, *args, **kwargs)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:464:5
    |
462 |         return wrapper
463 |
464 |     return decorator
    |     ^
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:467:1
    |
467 | class AuditLogger:
    | ^
468 |     """Audit logging for RBAC operations"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:532:9
    |
531 |         if user_id:
532 |         pass
    |         ^^^^
533 |             filtered_log = [
534 |                 entry for entry in filtered_log if entry.get("user_id") == user_id
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:533:1
    |
531 |         if user_id:
532 |         pass
533 |             filtered_log = [
    | ^^^^^^^^^^^^
534 |                 entry for entry in filtered_log if entry.get("user_id") == user_id
535 |             ]
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:538:9
    |
537 |         if start_date:
538 |         pass
    |         ^^^^
539 |             filtered_log = [
540 |                 entry
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:539:1
    |
537 |         if start_date:
538 |         pass
539 |             filtered_log = [
    | ^^^^^^^^^^^^
540 |                 entry
541 |                 for entry in filtered_log
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:546:9
    |
545 |         if end_date:
546 |         pass
    |         ^^^^
547 |             filtered_log = [
548 |                 entry
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:547:1
    |
545 |         if end_date:
546 |         pass
547 |             filtered_log = [
    | ^^^^^^^^^^^^
548 |                 entry
549 |                 for entry in filtered_log
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:553:9
    |
551 |             ]
552 |
553 |         return filtered_log
    |         ^
554 |
555 |     # Backwards/compat method name expected by tests
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:556:5
    |
555 |     # Backwards/compat method name expected by tests
556 |     def get_audit_logs(
    |     ^
557 |         self, user_id: Optional[str] = None
558 |     ) -> List[Dict[str, Any]]:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:564:1
    |
563 | # FastAPI endpoints for RBAC management
564 | class RBACEndpoints:
    | ^
565 |     pass
566 |     """RBAC management API endpoints"""
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\enterprise_rbac.py:580:9
    |
578 |         @require_permission(Permission.view_users)
579 |         async def list_roles():
580 |         pass
    |         ^^^^
581 |             """List all available roles"""
582 |             return {"roles": self.rbac_manager.list_available_roles()}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:581:1
    |
579 |         async def list_roles():
580 |         pass
581 |             """List all available roles"""
    | ^^^^^^^^^^^^
582 |             return {"roles": self.rbac_manager.list_available_roles()}
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_rbac.py:594:13
    |
593 |             try:
594 |             pass
    |             ^^^^
595 |                 role = UserRole(role_name)
596 |                 granted_by = request.state.user.get("user_id")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:595:1
    |
593 |             try:
594 |             pass
595 |                 role = UserRole(role_name)
    | ^^^^^^^^^^^^^^^^
596 |                 granted_by = request.state.user.get("user_id")
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:602:28
    |
600 |                 )
601 |
602 |                 if success:
    |                            ^
603 |             pass
604 |                     self.audit_logger.log_role_assignment(
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:604:1
    |
602 |                 if success:
603 |             pass
604 |                     self.audit_logger.log_role_assignment(
    | ^^^^^^^^^^^^^^^^^^^^
605 |                         user_id, tenant_id, role, granted_by, "assigned"
606 |                     )
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\enterprise_rbac.py:608:1
    |
606 |                     )
607 |                     return {"message": f"Role {role_name} assigned to user {user_id}"}
608 |                 else:
    | ^^^^^^^^^^^^^^^^
609 |             pass
610 |                     return {"error": "Failed to assign role", "status_code": 400}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:608:17
    |
606 |                     )
607 |                     return {"message": f"Role {role_name} assigned to user {user_id}"}
608 |                 else:
    |                 ^^^^
609 |             pass
610 |                     return {"error": "Failed to assign role", "status_code": 400}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:608:21
    |
606 |                     )
607 |                     return {"message": f"Role {role_name} assigned to user {user_id}"}
608 |                 else:
    |                     ^
609 |             pass
610 |                     return {"error": "Failed to assign role", "status_code": 400}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:608:22
    |
606 |                     )
607 |                     return {"message": f"Role {role_name} assigned to user {user_id}"}
608 |                 else:
    |                      ^
609 |             pass
610 |                     return {"error": "Failed to assign role", "status_code": 400}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:610:1
    |
608 |                 else:
609 |             pass
610 |                     return {"error": "Failed to assign role", "status_code": 400}
    | ^^^^^^^^^^^^^^^^^^^^
611 |
612 |             except ValueError:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:612:13
    |
610 |                     return {"error": "Failed to assign role", "status_code": 400}
611 |
612 |             except ValueError:
    |             ^^^^^^
613 |             pass
614 |                 return {"error": f"Invalid role: {role_name}", "status_code": 400}
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_rbac.py:612:31
    |
610 |                     return {"error": "Failed to assign role", "status_code": 400}
611 |
612 |             except ValueError:
    |                               ^
613 |             pass
614 |                 return {"error": f"Invalid role: {role_name}", "status_code": 400}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:614:1
    |
612 |             except ValueError:
613 |             pass
614 |                 return {"error": f"Invalid role: {role_name}", "status_code": 400}
    | ^^^^^^^^^^^^^^^^
615 |
616 |         @self.app.get("/admin/users/{user_id}/permissions")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:616:9
    |
614 |                 return {"error": f"Invalid role: {role_name}", "status_code": 400}
615 |
616 |         @self.app.get("/admin/users/{user_id}/permissions")
    |         ^
617 |         @require_permission(Permission.view_users)
618 |         async def get_user_permissions(user_id: str, request):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_rbac.py:624:13
    |
623 |             if permissions:
624 |             pass
    |             ^^^^
625 |                 return {
626 |                     "user_id": user_id,
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:625:1
    |
623 |             if permissions:
624 |             pass
625 |                 return {
    | ^^^^^^^^^^^^^^^^
626 |                     "user_id": user_id,
627 |                     "tenant_id": tenant_id,
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:639:13
    |
637 |                     ),
638 |                 }
639 |             else:
    |             ^^^^
640 |             pass
641 |                 return {"error": "User permissions not found", "status_code": 404}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:639:17
    |
637 |                     ),
638 |                 }
639 |             else:
    |                 ^
640 |             pass
641 |                 return {"error": "User permissions not found", "status_code": 404}
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:639:18
    |
637 |                     ),
638 |                 }
639 |             else:
    |                  ^
640 |             pass
641 |                 return {"error": "User permissions not found", "status_code": 404}
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_rbac.py:641:1
    |
639 |             else:
640 |             pass
641 |                 return {"error": "User permissions not found", "status_code": 404}
    | ^^^^^^^^^^^^^^^^
642 |
643 |         @self.app.get("/admin/audit-log")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:643:9
    |
641 |                 return {"error": "User permissions not found", "status_code": 404}
642 |
643 |         @self.app.get("/admin/audit-log")
    |         ^
644 |         @require_permission(Permission.view_audit_logs)
645 |         async def get_audit_log(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_rbac.py:659:1
    |
658 | # Initialize module-level RBAC manager for tests to patch
659 | rbac_manager = RBACManager()
    | ^
    |

E501 Line too long (94 > 88)
   --> backend\enterprise_soc2.py:153:89
    |
151 |                 control_id="CC6.1",
152 |                 name="Logical Access Security",
153 |                 description="Logical access security controls to prevent unauthorized access",
    |                                                                                         ^^^^^^
154 |                 category=ControlCategory.CC6_LOGICAL_ACCESS,
155 |                 trust_services=[
    |

E501 Line too long (116 > 88)
   --> backend\enterprise_soc2.py:159:89
    |
157 |                     SOC2TrustService.CONFIDENTIALITY,
158 |                 ],
159 |                 control_objective="Restrict logical access to information and system resources to authorized users",
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
160 |                 control_activities=[
161 |                     "Multi-factor authentication for all users",
    |

E501 Line too long (92 > 88)
   --> backend\enterprise_soc2.py:185:89
    |
183 |                 category=ControlCategory.CC6_LOGICAL_ACCESS,
184 |                 trust_services=[SOC2TrustService.SECURITY],
185 |                 control_objective="Ensure proper user authentication and access management",
    |                                                                                         ^^^^
186 |                 control_activities=[
187 |                     "Strong password policies",
    |

E501 Line too long (89 > 88)
   --> backend\enterprise_soc2.py:243:89
    |
241 |                     SOC2TrustService.SECURITY,
242 |                 ],
243 |                 control_objective="Ensure system availability and operational integrity",
    |                                                                                         ^
244 |                 control_activities=[
245 |                     "System monitoring and alerting",
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:304:9
    |
302 |         """Update control status and findings"""
303 |         if control_id not in self.controls:
304 |         pass
    |         ^^^^
305 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:305:1
    |
303 |         if control_id not in self.controls:
304 |         pass
305 |             return False
    | ^^^^^^^^^^^^
306 |
307 |         control = self.controls[control_id]
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:312:9
    |
311 |         if deficiencies:
312 |         pass
    |         ^^^^
313 |             control.deficiencies = deficiencies
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:313:1
    |
311 |         if deficiencies:
312 |         pass
313 |             control.deficiencies = deficiencies
    | ^^^^^^^^^^^^
314 |
315 |         if evidence:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:316:9
    |
315 |         if evidence:
316 |         pass
    |         ^^^^
317 |             control.evidence = evidence
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:317:1
    |
315 |         if evidence:
316 |         pass
317 |             control.evidence = evidence
    | ^^^^^^^^^^^^
318 |
319 |         # Schedule next test based on frequency
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:320:9
    |
319 |         # Schedule next test based on frequency
320 |         if control.frequency == "quarterly":
    |         ^
321 |         pass
322 |             control.next_test_date = datetime.now(UTC) + timedelta(days=90)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:321:9
    |
319 |         # Schedule next test based on frequency
320 |         if control.frequency == "quarterly":
321 |         pass
    |         ^^^^
322 |             control.next_test_date = datetime.now(UTC) + timedelta(days=90)
323 |         elif control.frequency == "semi-annually":
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:322:1
    |
320 |         if control.frequency == "quarterly":
321 |         pass
322 |             control.next_test_date = datetime.now(UTC) + timedelta(days=90)
    | ^^^^^^^^^^^^
323 |         elif control.frequency == "semi-annually":
324 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:323:9
    |
321 |         pass
322 |             control.next_test_date = datetime.now(UTC) + timedelta(days=90)
323 |         elif control.frequency == "semi-annually":
    |         ^
324 |         pass
325 |             control.next_test_date = datetime.now(UTC) + timedelta(days=180)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_soc2.py:323:14
    |
321 |         pass
322 |             control.next_test_date = datetime.now(UTC) + timedelta(days=90)
323 |         elif control.frequency == "semi-annually":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
324 |         pass
325 |             control.next_test_date = datetime.now(UTC) + timedelta(days=180)
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_soc2.py:323:51
    |
321 |         pass
322 |             control.next_test_date = datetime.now(UTC) + timedelta(days=90)
323 |         elif control.frequency == "semi-annually":
    |                                                   ^
324 |         pass
325 |             control.next_test_date = datetime.now(UTC) + timedelta(days=180)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:325:1
    |
323 |         elif control.frequency == "semi-annually":
324 |         pass
325 |             control.next_test_date = datetime.now(UTC) + timedelta(days=180)
    | ^^^^^^^^^^^^
326 |         elif control.frequency == "annually":
327 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:326:9
    |
324 |         pass
325 |             control.next_test_date = datetime.now(UTC) + timedelta(days=180)
326 |         elif control.frequency == "annually":
    |         ^
327 |         pass
328 |             control.next_test_date = datetime.now(UTC) + timedelta(days=365)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_soc2.py:326:14
    |
324 |         pass
325 |             control.next_test_date = datetime.now(UTC) + timedelta(days=180)
326 |         elif control.frequency == "annually":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
327 |         pass
328 |             control.next_test_date = datetime.now(UTC) + timedelta(days=365)
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_soc2.py:326:46
    |
324 |         pass
325 |             control.next_test_date = datetime.now(UTC) + timedelta(days=180)
326 |         elif control.frequency == "annually":
    |                                              ^
327 |         pass
328 |             control.next_test_date = datetime.now(UTC) + timedelta(days=365)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:328:1
    |
326 |         elif control.frequency == "annually":
327 |         pass
328 |             control.next_test_date = datetime.now(UTC) + timedelta(days=365)
    | ^^^^^^^^^^^^
329 |
330 |         logger.info(f"Updated control {control_id} status to {status.value}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:330:9
    |
328 |             control.next_test_date = datetime.now(UTC) + timedelta(days=365)
329 |
330 |         logger.info(f"Updated control {control_id} status to {status.value}")
    |         ^
331 |         return True
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:333:5
    |
331 |         return True
332 |
333 |     def report_security_incident(
    |     ^
334 |         self,
335 |         title: str,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:361:9
    |
359 |         # Auto-acknowledge critical incidents
360 |         if severity == IncidentSeverity.CRITICAL:
361 |         pass
    |         ^^^^
362 |             self._acknowledge_incident(incident_id)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:362:1
    |
360 |         if severity == IncidentSeverity.CRITICAL:
361 |         pass
362 |             self._acknowledge_incident(incident_id)
    | ^^^^^^^^^^^^
363 |
364 |         return incident
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:366:5
    |
364 |         return incident
365 |
366 |     def _acknowledge_incident(self, incident_id: str):
    |     ^
367 |         """Acknowledge a security incident"""
368 |         if incident_id in self.incidents:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:369:9
    |
367 |         """Acknowledge a security incident"""
368 |         if incident_id in self.incidents:
369 |         pass
    |         ^^^^
370 |             self.incidents[incident_id].acknowledged_at = datetime.now(UTC)
371 |             self.incidents[incident_id].status = "investigating"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:370:1
    |
368 |         if incident_id in self.incidents:
369 |         pass
370 |             self.incidents[incident_id].acknowledged_at = datetime.now(UTC)
    | ^^^^^^^^^^^^
371 |             self.incidents[incident_id].status = "investigating"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:373:5
    |
371 |             self.incidents[incident_id].status = "investigating"
372 |
373 |     def resolve_incident(
    |     ^
374 |         self,
375 |         incident_id: str,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:382:9
    |
380 |         """Resolve a security incident"""
381 |         if incident_id not in self.incidents:
382 |         pass
    |         ^^^^
383 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:383:1
    |
381 |         if incident_id not in self.incidents:
382 |         pass
383 |             return False
    | ^^^^^^^^^^^^
384 |
385 |         incident = self.incidents[incident_id]
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:395:5
    |
393 |         return True
394 |
395 |     def conduct_access_review(
    |     ^
396 |         self,
397 |         user_id: str,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:453:9
    |
451 |         """Record vulnerability assessment findings"""
452 |         if assessment_id not in self.vulnerability_assessments:
453 |         pass
    |         ^^^^
454 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:454:1
    |
452 |         if assessment_id not in self.vulnerability_assessments:
453 |         pass
454 |             return False
    | ^^^^^^^^^^^^
455 |
456 |         assessment = self.vulnerability_assessments[assessment_id]
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:474:5
    |
472 |         return True
473 |
474 |     def _start_monitoring(self):
    |     ^
475 |         """Start continuous monitoring for SOC2 metrics"""
476 |         # Initialize monitoring metrics
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:513:9
    |
512 |         if uptime_percentage < 99.9:
513 |         pass
    |         ^^^^
514 |             logger.warning(f"System availability below target: {uptime_percentage}%")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:514:1
    |
512 |         if uptime_percentage < 99.9:
513 |         pass
514 |             logger.warning(f"System availability below target: {uptime_percentage}%")
    | ^^^^^^^^^^^^
515 |
516 |     def get_control_testing_status(self) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:516:5
    |
514 |             logger.warning(f"System availability below target: {uptime_percentage}%")
515 |
516 |     def get_control_testing_status(self) -> Dict[str, Any]:
    |     ^
517 |         """Get control testing status report"""
518 |         total_controls = len(self.controls)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:573:9
    |
571 |         avg_resolution_time = 0.0
572 |         if resolved_incidents:
573 |         pass
    |         ^^^^
574 |             total_time = sum(
575 |                 (incident.resolved_at - incident.reported_at).total_seconds() / 3600
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:574:1
    |
572 |         if resolved_incidents:
573 |         pass
574 |             total_time = sum(
    | ^^^^^^^^^^^^
575 |                 (incident.resolved_at - incident.reported_at).total_seconds() / 3600
576 |                 for incident in resolved_incidents
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:595:5
    |
593 |         }
594 |
595 |     def generate_soc2_report(self) -> Dict[str, Any]:
    |     ^
596 |         pass
597 |         """Generate comprehensive SOC2 compliance report"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_soc2.py:629:13
    |
627 |         def add_rec(condition, message):
628 |             if condition:
629 |             pass
    |             ^^^^
630 |                 recommendations.append(message)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:630:1
    |
628 |             if condition:
629 |             pass
630 |                 recommendations.append(message)
    | ^^^^^^^^^^^^^^^^
631 |
632 |         control_status = self.get_control_testing_status()
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:659:1
    |
658 | # FastAPI endpoints for SOC2 compliance
659 | class SOC2Endpoints:
    | ^
660 |     pass
661 |     """SOC2 compliance API endpoints"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_soc2.py:707:13
    |
706 |             try:
707 |             pass
    |             ^^^^
708 |                 severity = IncidentSeverity(severity_str)
709 |                 incident = self.soc2_manager.report_security_incident(
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:708:1
    |
706 |             try:
707 |             pass
708 |                 severity = IncidentSeverity(severity_str)
    | ^^^^^^^^^^^^^^^^
709 |                 incident = self.soc2_manager.report_security_incident(
710 |                     title, description, severity, affected_systems, user_id
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:718:13
    |
716 |                     "reported_at": incident.reported_at.isoformat(),
717 |                 }
718 |             except ValueError:
    |             ^^^^^^
719 |         pass
720 |             pass
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_soc2.py:718:31
    |
716 |                     "reported_at": incident.reported_at.isoformat(),
717 |                 }
718 |             except ValueError:
    |                               ^
719 |         pass
720 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:720:1
    |
718 |             except ValueError:
719 |         pass
720 |             pass
    | ^^^^^^^^^^^^
721 |                 return {
722 |                     "error": f"Invalid severity: {severity_str}",
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_soc2.py:721:1
    |
719 |         pass
720 |             pass
721 |                 return {
    | ^^^^^^^^^^^^^^^^
722 |                     "error": f"Invalid severity: {severity_str}",
723 |                     "status_code": 400,
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:726:9
    |
724 |                 }
725 |
726 |         @self.app.get("/soc2/incidents")
    |         ^
727 |         async def get_incidents(request: Request):
728 |             """Get security incidents"""
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_soc2.py:803:1
    |
801 |                 "scope": assessment.scope,
802 |             }
    |              ^
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:152:9
    |
150 |         """Create a new tenant"""
151 |         if not name or not isinstance(name, str):
152 |         pass
    |         ^^^^
153 |             raise ValueError("Tenant name must be a non-empty string.")
154 |         if not admin_email or "@" not in admin_email:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:153:1
    |
151 |         if not name or not isinstance(name, str):
152 |         pass
153 |             raise ValueError("Tenant name must be a non-empty string.")
    | ^^^^^^^^^^^^
154 |         if not admin_email or "@" not in admin_email:
155 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:155:9
    |
153 |             raise ValueError("Tenant name must be a non-empty string.")
154 |         if not admin_email or "@" not in admin_email:
155 |         pass
    |         ^^^^
156 |             raise ValueError("A valid admin email is required.")
157 |         if not isinstance(tier, TenantTier):
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:156:1
    |
154 |         if not admin_email or "@" not in admin_email:
155 |         pass
156 |             raise ValueError("A valid admin email is required.")
    | ^^^^^^^^^^^^
157 |         if not isinstance(tier, TenantTier):
158 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:158:9
    |
156 |             raise ValueError("A valid admin email is required.")
157 |         if not isinstance(tier, TenantTier):
158 |         pass
    |         ^^^^
159 |             raise ValueError(
160 |                 f"Invalid tenant tier provided. Must be one of {list(TenantTier)}."
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:159:1
    |
157 |         if not isinstance(tier, TenantTier):
158 |         pass
159 |             raise ValueError(
    | ^^^^^^^^^^^^
160 |                 f"Invalid tenant tier provided. Must be one of {list(TenantTier)}."
161 |             )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:163:9
    |
161 |             )
162 |
163 |         tenant_id = str(uuid.uuid4())
    |         ^
164 |
165 |         # Use custom limits or default tier limits
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:196:5
    |
194 |         return tenant
195 |
196 |     def get_tenant(self, tenant_id: str) -> Optional[TenantConfig]:
    |     ^
197 |         """Get tenant configuration"""
198 |         return self.tenants.get(tenant_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:208:9
    |
206 |         tenant = self.get_tenant(tenant_id)
207 |         if not tenant:
208 |         pass
    |         ^^^^
209 |             return False
210 |         if new_status not in {"active", "suspended", "terminated"}:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:209:1
    |
207 |         if not tenant:
208 |         pass
209 |             return False
    | ^^^^^^^^^^^^
210 |         if new_status not in {"active", "suspended", "terminated"}:
211 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:211:9
    |
209 |             return False
210 |         if new_status not in {"active", "suspended", "terminated"}:
211 |         pass
    |         ^^^^
212 |             return False
213 |         tenant.status = new_status
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:212:1
    |
210 |         if new_status not in {"active", "suspended", "terminated"}:
211 |         pass
212 |             return False
    | ^^^^^^^^^^^^
213 |         tenant.status = new_status
214 |         return True
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:213:9
    |
211 |         pass
212 |             return False
213 |         tenant.status = new_status
    |         ^
214 |         return True
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:216:5
    |
214 |         return True
215 |
216 |     def update_tenant_usage(
    |     ^
217 |         self,
218 |         tenant_id: str,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:229:9
    |
227 |         usage = self.get_tenant_usage(tenant_id)
228 |         if not usage:
229 |         pass
    |         ^^^^
230 |             return False
231 |         if current_users is not None:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:230:1
    |
228 |         if not usage:
229 |         pass
230 |             return False
    | ^^^^^^^^^^^^
231 |         if current_users is not None:
232 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:232:9
    |
230 |             return False
231 |         if current_users is not None:
232 |         pass
    |         ^^^^
233 |             usage.current_users = int(current_users)
234 |         if current_documents is not None:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:233:1
    |
231 |         if current_users is not None:
232 |         pass
233 |             usage.current_users = int(current_users)
    | ^^^^^^^^^^^^
234 |         if current_documents is not None:
235 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:234:9
    |
232 |         pass
233 |             usage.current_users = int(current_users)
234 |         if current_documents is not None:
    |         ^
235 |         pass
236 |             usage.current_documents = int(current_documents)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:235:9
    |
233 |             usage.current_users = int(current_users)
234 |         if current_documents is not None:
235 |         pass
    |         ^^^^
236 |             usage.current_documents = int(current_documents)
237 |         if storage_used_gb is not None:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:236:1
    |
234 |         if current_documents is not None:
235 |         pass
236 |             usage.current_documents = int(current_documents)
    | ^^^^^^^^^^^^
237 |         if storage_used_gb is not None:
238 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:237:9
    |
235 |         pass
236 |             usage.current_documents = int(current_documents)
237 |         if storage_used_gb is not None:
    |         ^
238 |         pass
239 |             usage.storage_used_gb = float(storage_used_gb)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:238:9
    |
236 |             usage.current_documents = int(current_documents)
237 |         if storage_used_gb is not None:
238 |         pass
    |         ^^^^
239 |             usage.storage_used_gb = float(storage_used_gb)
240 |         if api_calls_this_hour is not None:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:239:1
    |
237 |         if storage_used_gb is not None:
238 |         pass
239 |             usage.storage_used_gb = float(storage_used_gb)
    | ^^^^^^^^^^^^
240 |         if api_calls_this_hour is not None:
241 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:240:9
    |
238 |         pass
239 |             usage.storage_used_gb = float(storage_used_gb)
240 |         if api_calls_this_hour is not None:
    |         ^
241 |         pass
242 |             usage.api_calls_this_hour = int(api_calls_this_hour)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:241:9
    |
239 |             usage.storage_used_gb = float(storage_used_gb)
240 |         if api_calls_this_hour is not None:
241 |         pass
    |         ^^^^
242 |             usage.api_calls_this_hour = int(api_calls_this_hour)
243 |         if concurrent_requests is not None:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:242:1
    |
240 |         if api_calls_this_hour is not None:
241 |         pass
242 |             usage.api_calls_this_hour = int(api_calls_this_hour)
    | ^^^^^^^^^^^^
243 |         if concurrent_requests is not None:
244 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:243:9
    |
241 |         pass
242 |             usage.api_calls_this_hour = int(api_calls_this_hour)
243 |         if concurrent_requests is not None:
    |         ^
244 |         pass
245 |             usage.concurrent_requests = int(concurrent_requests)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:244:9
    |
242 |             usage.api_calls_this_hour = int(api_calls_this_hour)
243 |         if concurrent_requests is not None:
244 |         pass
    |         ^^^^
245 |             usage.concurrent_requests = int(concurrent_requests)
246 |         usage.last_updated = datetime.utcnow()
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:245:1
    |
243 |         if concurrent_requests is not None:
244 |         pass
245 |             usage.concurrent_requests = int(concurrent_requests)
    | ^^^^^^^^^^^^
246 |         usage.last_updated = datetime.utcnow()
247 |         return True
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:246:9
    |
244 |         pass
245 |             usage.concurrent_requests = int(concurrent_requests)
246 |         usage.last_updated = datetime.utcnow()
    |         ^
247 |         return True
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:249:5
    |
247 |         return True
248 |
249 |     def check_tenant_limits(self, tenant_id: str) -> tuple[bool, List[str]]:
    |     ^
250 |         """Check current usage against limits and return violations if any."""
251 |         tenant = self.get_tenant(tenant_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:254:9
    |
252 |         usage = self.get_tenant_usage(tenant_id)
253 |         if not tenant or not usage:
254 |         pass
    |         ^^^^
255 |             return False, ["Tenant not found"]
256 |         limits = tenant.limits
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:255:1
    |
253 |         if not tenant or not usage:
254 |         pass
255 |             return False, ["Tenant not found"]
    | ^^^^^^^^^^^^
256 |         limits = tenant.limits
257 |         violations: List[str] = []
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:259:9
    |
257 |         violations: List[str] = []
258 |         if usage.current_users > limits.max_users:
259 |         pass
    |         ^^^^
260 |             violations.append(
261 |                 f"Users {usage.current_users} exceeds limit {limits.max_users}"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:260:1
    |
258 |         if usage.current_users > limits.max_users:
259 |         pass
260 |             violations.append(
    | ^^^^^^^^^^^^
261 |                 f"Users {usage.current_users} exceeds limit {limits.max_users}"
262 |             )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:263:9
    |
261 |                 f"Users {usage.current_users} exceeds limit {limits.max_users}"
262 |             )
263 |         if usage.current_documents > limits.max_documents:
    |         ^
264 |         pass
265 |             violations.append(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:264:9
    |
262 |             )
263 |         if usage.current_documents > limits.max_documents:
264 |         pass
    |         ^^^^
265 |             violations.append(
266 |                 f"Documents {usage.current_documents} exceeds limit {limits.max_documents}"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:265:1
    |
263 |         if usage.current_documents > limits.max_documents:
264 |         pass
265 |             violations.append(
    | ^^^^^^^^^^^^
266 |                 f"Documents {usage.current_documents} exceeds limit {limits.max_documents}"
267 |             )
    |

E501 Line too long (91 > 88)
   --> backend\enterprise_tenant.py:266:89
    |
264 |         pass
265 |             violations.append(
266 |                 f"Documents {usage.current_documents} exceeds limit {limits.max_documents}"
    |                                                                                         ^^^
267 |             )
268 |         if usage.api_calls_this_hour > limits.max_api_calls_per_hour:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:268:9
    |
266 |                 f"Documents {usage.current_documents} exceeds limit {limits.max_documents}"
267 |             )
268 |         if usage.api_calls_this_hour > limits.max_api_calls_per_hour:
    |         ^
269 |         pass
270 |             violations.append(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:269:9
    |
267 |             )
268 |         if usage.api_calls_this_hour > limits.max_api_calls_per_hour:
269 |         pass
    |         ^^^^
270 |             violations.append(
271 |                 "API calls per hour exceed limit"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:270:1
    |
268 |         if usage.api_calls_this_hour > limits.max_api_calls_per_hour:
269 |         pass
270 |             violations.append(
    | ^^^^^^^^^^^^
271 |                 "API calls per hour exceed limit"
272 |             )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:273:9
    |
271 |                 "API calls per hour exceed limit"
272 |             )
273 |         if usage.concurrent_requests > limits.max_concurrent_requests:
    |         ^
274 |         pass
275 |             violations.append(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:274:9
    |
272 |             )
273 |         if usage.concurrent_requests > limits.max_concurrent_requests:
274 |         pass
    |         ^^^^
275 |             violations.append(
276 |                 "Concurrent requests exceed limit"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:275:1
    |
273 |         if usage.concurrent_requests > limits.max_concurrent_requests:
274 |         pass
275 |             violations.append(
    | ^^^^^^^^^^^^
276 |                 "Concurrent requests exceed limit"
277 |             )
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:278:9
    |
276 |                 "Concurrent requests exceed limit"
277 |             )
278 |         return len(violations) == 0, violations
    |         ^
279 |
280 |     def check_resource_limit(
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:280:5
    |
278 |         return len(violations) == 0, violations
279 |
280 |     def check_resource_limit(
    |     ^
281 |         self, tenant_id: str, resource_type: str, requested_amount: int = 1
282 |     ) -> bool:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:288:9
    |
287 |         if not tenant or not usage or tenant.status != "active":
288 |         pass
    |         ^^^^
289 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:289:1
    |
287 |         if not tenant or not usage or tenant.status != "active":
288 |         pass
289 |             return False
    | ^^^^^^^^^^^^
290 |
291 |         limits = tenant.limits
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:295:9
    |
293 |         # Check specific resource limits
294 |         if resource_type == "users":
295 |         pass
    |         ^^^^
296 |             return usage.current_users + requested_amount <= limits.max_users
297 |         elif resource_type == "documents":
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:296:1
    |
294 |         if resource_type == "users":
295 |         pass
296 |             return usage.current_users + requested_amount <= limits.max_users
    | ^^^^^^^^^^^^
297 |         elif resource_type == "documents":
298 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:297:9
    |
295 |         pass
296 |             return usage.current_users + requested_amount <= limits.max_users
297 |         elif resource_type == "documents":
    |         ^
298 |         pass
299 |             return usage.current_documents + requested_amount <= limits.max_documents
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_tenant.py:297:14
    |
295 |         pass
296 |             return usage.current_users + requested_amount <= limits.max_users
297 |         elif resource_type == "documents":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
298 |         pass
299 |             return usage.current_documents + requested_amount <= limits.max_documents
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_tenant.py:297:43
    |
295 |         pass
296 |             return usage.current_users + requested_amount <= limits.max_users
297 |         elif resource_type == "documents":
    |                                           ^
298 |         pass
299 |             return usage.current_documents + requested_amount <= limits.max_documents
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:299:1
    |
297 |         elif resource_type == "documents":
298 |         pass
299 |             return usage.current_documents + requested_amount <= limits.max_documents
    | ^^^^^^^^^^^^
300 |         elif resource_type == "api_calls":
301 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:300:9
    |
298 |         pass
299 |             return usage.current_documents + requested_amount <= limits.max_documents
300 |         elif resource_type == "api_calls":
    |         ^
301 |         pass
302 |             return (
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_tenant.py:300:14
    |
298 |         pass
299 |             return usage.current_documents + requested_amount <= limits.max_documents
300 |         elif resource_type == "api_calls":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
301 |         pass
302 |             return (
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_tenant.py:300:43
    |
298 |         pass
299 |             return usage.current_documents + requested_amount <= limits.max_documents
300 |         elif resource_type == "api_calls":
    |                                           ^
301 |         pass
302 |             return (
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:302:1
    |
300 |         elif resource_type == "api_calls":
301 |         pass
302 |             return (
    | ^^^^^^^^^^^^
303 |                 usage.api_calls_this_hour + requested_amount
304 |                 <= limits.max_api_calls_per_hour
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:306:9
    |
304 |                 <= limits.max_api_calls_per_hour
305 |             )
306 |         elif resource_type == "concurrent_requests":
    |         ^
307 |         pass
308 |             return (
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_tenant.py:306:14
    |
304 |                 <= limits.max_api_calls_per_hour
305 |             )
306 |         elif resource_type == "concurrent_requests":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
307 |         pass
308 |             return (
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_tenant.py:306:53
    |
304 |                 <= limits.max_api_calls_per_hour
305 |             )
306 |         elif resource_type == "concurrent_requests":
    |                                                     ^
307 |         pass
308 |             return (
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:308:1
    |
306 |         elif resource_type == "concurrent_requests":
307 |         pass
308 |             return (
    | ^^^^^^^^^^^^
309 |                 usage.concurrent_requests + requested_amount
310 |                 <= limits.max_concurrent_requests
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:313:9
    |
311 |             )
312 |
313 |         return True
    |         ^
314 |
315 |     def increment_usage(self, tenant_id: str, resource_type: str, amount: int = 1):
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:315:5
    |
313 |         return True
314 |
315 |     def increment_usage(self, tenant_id: str, resource_type: str, amount: int = 1):
    |     ^
316 |         """Increment usage counter for a tenant"""
317 |         usage = self.usage_metrics.get(tenant_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:319:9
    |
317 |         usage = self.usage_metrics.get(tenant_id)
318 |         if not usage:
319 |         pass
    |         ^^^^
320 |             return
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:320:1
    |
318 |         if not usage:
319 |         pass
320 |             return
    | ^^^^^^^^^^^^
321 |
322 |         if resource_type == "users":
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:323:9
    |
322 |         if resource_type == "users":
323 |         pass
    |         ^^^^
324 |             usage.current_users += amount
325 |         elif resource_type == "documents":
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:324:1
    |
322 |         if resource_type == "users":
323 |         pass
324 |             usage.current_users += amount
    | ^^^^^^^^^^^^
325 |         elif resource_type == "documents":
326 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:325:9
    |
323 |         pass
324 |             usage.current_users += amount
325 |         elif resource_type == "documents":
    |         ^
326 |         pass
327 |             usage.current_documents += amount
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_tenant.py:325:14
    |
323 |         pass
324 |             usage.current_users += amount
325 |         elif resource_type == "documents":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
326 |         pass
327 |             usage.current_documents += amount
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_tenant.py:325:43
    |
323 |         pass
324 |             usage.current_users += amount
325 |         elif resource_type == "documents":
    |                                           ^
326 |         pass
327 |             usage.current_documents += amount
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:327:1
    |
325 |         elif resource_type == "documents":
326 |         pass
327 |             usage.current_documents += amount
    | ^^^^^^^^^^^^
328 |         elif resource_type == "api_calls":
329 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:328:9
    |
326 |         pass
327 |             usage.current_documents += amount
328 |         elif resource_type == "api_calls":
    |         ^
329 |         pass
330 |             usage.api_calls_this_hour += amount
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_tenant.py:328:14
    |
326 |         pass
327 |             usage.current_documents += amount
328 |         elif resource_type == "api_calls":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
329 |         pass
330 |             usage.api_calls_this_hour += amount
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_tenant.py:328:43
    |
326 |         pass
327 |             usage.current_documents += amount
328 |         elif resource_type == "api_calls":
    |                                           ^
329 |         pass
330 |             usage.api_calls_this_hour += amount
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:330:1
    |
328 |         elif resource_type == "api_calls":
329 |         pass
330 |             usage.api_calls_this_hour += amount
    | ^^^^^^^^^^^^
331 |         elif resource_type == "concurrent_requests":
332 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:331:9
    |
329 |         pass
330 |             usage.api_calls_this_hour += amount
331 |         elif resource_type == "concurrent_requests":
    |         ^
332 |         pass
333 |             usage.concurrent_requests += amount
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_tenant.py:331:14
    |
329 |         pass
330 |             usage.api_calls_this_hour += amount
331 |         elif resource_type == "concurrent_requests":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
332 |         pass
333 |             usage.concurrent_requests += amount
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_tenant.py:331:53
    |
329 |         pass
330 |             usage.api_calls_this_hour += amount
331 |         elif resource_type == "concurrent_requests":
    |                                                     ^
332 |         pass
333 |             usage.concurrent_requests += amount
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:333:1
    |
331 |         elif resource_type == "concurrent_requests":
332 |         pass
333 |             usage.concurrent_requests += amount
    | ^^^^^^^^^^^^
334 |         elif resource_type == "storage":
335 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:334:9
    |
332 |         pass
333 |             usage.concurrent_requests += amount
334 |         elif resource_type == "storage":
    |         ^
335 |         pass
336 |             usage.storage_used_gb += amount
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\enterprise_tenant.py:334:14
    |
332 |         pass
333 |             usage.concurrent_requests += amount
334 |         elif resource_type == "storage":
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^
335 |         pass
336 |             usage.storage_used_gb += amount
    |

invalid-syntax: Expected an expression
   --> backend\enterprise_tenant.py:334:41
    |
332 |         pass
333 |             usage.concurrent_requests += amount
334 |         elif resource_type == "storage":
    |                                         ^
335 |         pass
336 |             usage.storage_used_gb += amount
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:336:1
    |
334 |         elif resource_type == "storage":
335 |         pass
336 |             usage.storage_used_gb += amount
    | ^^^^^^^^^^^^
337 |
338 |         usage.last_updated = datetime.utcnow()
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:338:9
    |
336 |             usage.storage_used_gb += amount
337 |
338 |         usage.last_updated = datetime.utcnow()
    |         ^
339 |
340 |     def reset_hourly_metrics(self, tenant_id: str):
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:340:5
    |
338 |         usage.last_updated = datetime.utcnow()
339 |
340 |     def reset_hourly_metrics(self, tenant_id: str):
    |     ^
341 |         """Reset hourly usage metrics (called by scheduler)"""
342 |         usage = self.usage_metrics.get(tenant_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:344:9
    |
342 |         usage = self.usage_metrics.get(tenant_id)
343 |         if usage:
344 |         pass
    |         ^^^^
345 |             usage.api_calls_this_hour = 0
346 |             usage.last_updated = datetime.utcnow()
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:345:1
    |
343 |         if usage:
344 |         pass
345 |             usage.api_calls_this_hour = 0
    | ^^^^^^^^^^^^
346 |             usage.last_updated = datetime.utcnow()
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:348:5
    |
346 |             usage.last_updated = datetime.utcnow()
347 |
348 |     def has_feature_access(self, tenant_id: str, feature: str) -> bool:
    |     ^
349 |         """Check if tenant has access to a specific feature"""
350 |         tenant = self.get_tenant(tenant_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:352:9
    |
350 |         tenant = self.get_tenant(tenant_id)
351 |         if not tenant:
352 |         pass
    |         ^^^^
353 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:353:1
    |
351 |         if not tenant:
352 |         pass
353 |             return False
    | ^^^^^^^^^^^^
354 |
355 |         return (
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:360:5
    |
358 |         )
359 |
360 |     def upgrade_tenant(self, tenant_id: str, new_tier: TenantTier) -> bool:
    |     ^
361 |         """Upgrade tenant to a new tier"""
362 |         tenant = self.get_tenant(tenant_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:364:9
    |
362 |         tenant = self.get_tenant(tenant_id)
363 |         if not tenant:
364 |         pass
    |         ^^^^
365 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:365:1
    |
363 |         if not tenant:
364 |         pass
365 |             return False
    | ^^^^^^^^^^^^
366 |
367 |         old_tier = tenant.tier
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:376:5
    |
374 |         return True
375 |
376 |     def suspend_tenant(self, tenant_id: str, reason: str = ""):
    |     ^
377 |         """Suspend tenant access"""
378 |         tenant = self.get_tenant(tenant_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:380:9
    |
378 |         tenant = self.get_tenant(tenant_id)
379 |         if tenant:
380 |         pass
    |         ^^^^
381 |             tenant.status = "suspended"
382 |             logger.warning(f"Suspended tenant {tenant_id}: {reason}")
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:381:1
    |
379 |         if tenant:
380 |         pass
381 |             tenant.status = "suspended"
    | ^^^^^^^^^^^^
382 |             logger.warning(f"Suspended tenant {tenant_id}: {reason}")
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:384:5
    |
382 |             logger.warning(f"Suspended tenant {tenant_id}: {reason}")
383 |
384 |     def list_tenants(
    |     ^
385 |         self,
386 |         *,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:393:9
    |
391 |         tenants = list(self.tenants.values())
392 |         if status_filter:
393 |         pass
    |         ^^^^
394 |             tenants = [t for t in tenants if t.status == status_filter]
395 |         if tier_filter is not None:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:394:1
    |
392 |         if status_filter:
393 |         pass
394 |             tenants = [t for t in tenants if t.status == status_filter]
    | ^^^^^^^^^^^^
395 |         if tier_filter is not None:
396 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:396:9
    |
394 |             tenants = [t for t in tenants if t.status == status_filter]
395 |         if tier_filter is not None:
396 |         pass
    |         ^^^^
397 |             tenants = [t for t in tenants if t.tier == tier_filter]
398 |         return tenants
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:397:1
    |
395 |         if tier_filter is not None:
396 |         pass
397 |             tenants = [t for t in tenants if t.tier == tier_filter]
    | ^^^^^^^^^^^^
398 |         return tenants
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:398:9
    |
396 |         pass
397 |             tenants = [t for t in tenants if t.tier == tier_filter]
398 |         return tenants
    |         ^
399 |
400 |     def delete_tenant(self, tenant_id: str) -> bool:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:400:5
    |
398 |         return tenants
399 |
400 |     def delete_tenant(self, tenant_id: str) -> bool:
    |     ^
401 |         """Delete a tenant and its usage metrics."""
402 |         existed = tenant_id in self.tenants
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:408:1
    |
408 | class TenantIsolation:
    | ^
409 |     """Provides data and resource isolation between tenants"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:417:9
    |
415 |         """Get isolated vault path for tenant. Enforce tenant_id presence."""
416 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
417 |         pass
    |         ^^^^
418 |             raise ValueError("Invalid or missing tenant_id for vault access")
419 |         return f"./vaults/tenant_{tenant_id}"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:418:1
    |
416 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
417 |         pass
418 |             raise ValueError("Invalid or missing tenant_id for vault access")
    | ^^^^^^^^^^^^
419 |         return f"./vaults/tenant_{tenant_id}"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:424:9
    |
422 |         """Get isolated cache path for tenant. Enforce tenant_id presence."""
423 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
424 |         pass
    |         ^^^^
425 |             raise ValueError("Invalid or missing tenant_id for cache access")
426 |         return f"./backend/cache/tenant_{tenant_id}"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:425:1
    |
423 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
424 |         pass
425 |             raise ValueError("Invalid or missing tenant_id for cache access")
    | ^^^^^^^^^^^^
426 |         return f"./backend/cache/tenant_{tenant_id}"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:428:5
    |
426 |         return f"./backend/cache/tenant_{tenant_id}"
427 |
428 |     def get_tenant_models_path(self, tenant_id: str) -> str:
    |     ^
429 |         """Get isolated models path for tenant. Enforce tenant_id presence."""
430 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:431:9
    |
429 |         """Get isolated models path for tenant. Enforce tenant_id presence."""
430 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
431 |         pass
    |         ^^^^
432 |             raise ValueError("Invalid or missing tenant_id for models access")
433 |         return f"./backend/models/tenant_{tenant_id}"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:432:1
    |
430 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
431 |         pass
432 |             raise ValueError("Invalid or missing tenant_id for models access")
    | ^^^^^^^^^^^^
433 |         return f"./backend/models/tenant_{tenant_id}"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:435:5
    |
433 |         return f"./backend/models/tenant_{tenant_id}"
434 |
435 |     def get_tenant_logs_path(self, tenant_id: str) -> str:
    |     ^
436 |         """Get isolated logs path for tenant. Enforce tenant_id presence."""
437 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:438:9
    |
436 |         """Get isolated logs path for tenant. Enforce tenant_id presence."""
437 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
438 |         pass
    |         ^^^^
439 |             raise ValueError("Invalid or missing tenant_id for logs access")
440 |         return f"./logs/tenant_{tenant_id}"
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:439:1
    |
437 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
438 |         pass
439 |             raise ValueError("Invalid or missing tenant_id for logs access")
    | ^^^^^^^^^^^^
440 |         return f"./logs/tenant_{tenant_id}"
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:442:5
    |
440 |         return f"./logs/tenant_{tenant_id}"
441 |
442 |     def filter_user_access(self, tenant_id: str, user_id: str, resource: str) -> bool:
    |     ^
443 |         """Check if user has access to resource within tenant. Enforce tenant isolation."""
444 |         tenant = self.tenant_manager.get_tenant(tenant_id)
    |

E501 Line too long (91 > 88)
   --> backend\enterprise_tenant.py:443:89
    |
442 |     def filter_user_access(self, tenant_id: str, user_id: str, resource: str) -> bool:
443 |         """Check if user has access to resource within tenant. Enforce tenant isolation."""
    |                                                                                         ^^^
444 |         tenant = self.tenant_manager.get_tenant(tenant_id)
445 |         if not tenant or tenant.status != "active":
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:446:9
    |
444 |         tenant = self.tenant_manager.get_tenant(tenant_id)
445 |         if not tenant or tenant.status != "active":
446 |         pass
    |         ^^^^
447 |             return False
448 |         # Only allow access if resource is strictly scoped to tenant
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:447:1
    |
445 |         if not tenant or tenant.status != "active":
446 |         pass
447 |             return False
    | ^^^^^^^^^^^^
448 |         # Only allow access if resource is strictly scoped to tenant
449 |         # (resource should be a path or identifier containing tenant_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:451:9
    |
449 |         # (resource should be a path or identifier containing tenant_id)
450 |         if tenant_id not in str(resource):
451 |         pass
    |         ^^^^
452 |             return False
453 |         return True
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:452:1
    |
450 |         if tenant_id not in str(resource):
451 |         pass
452 |             return False
    | ^^^^^^^^^^^^
453 |         return True
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:453:9
    |
451 |         pass
452 |             return False
453 |         return True
    |         ^
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:456:1
    |
456 | class BillingManager:
    | ^
457 |     """Enterprise billing and usage tracking"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:479:9
    |
478 |         if tenant_id not in self.usage_history:
479 |         pass
    |         ^^^^
480 |             self.usage_history[tenant_id] = []
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:480:1
    |
478 |         if tenant_id not in self.usage_history:
479 |         pass
480 |             self.usage_history[tenant_id] = []
    | ^^^^^^^^^^^^
481 |
482 |         self.usage_history[tenant_id].append(event)
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_tenant.py:493:9
    |
491 |         filtered_events = []
492 |         for event in events:
493 |         pass
    |         ^^^^
494 |             event_date = datetime.fromisoformat(event["timestamp"])
495 |             if start_date <= event_date <= end_date:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:494:1
    |
492 |         for event in events:
493 |         pass
494 |             event_date = datetime.fromisoformat(event["timestamp"])
    | ^^^^^^^^^^^^
495 |             if start_date <= event_date <= end_date:
496 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:496:13
    |
494 |             event_date = datetime.fromisoformat(event["timestamp"])
495 |             if start_date <= event_date <= end_date:
496 |             pass
    |             ^^^^
497 |                 filtered_events.append(event)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:497:1
    |
495 |             if start_date <= event_date <= end_date:
496 |             pass
497 |                 filtered_events.append(event)
    | ^^^^^^^^^^^^^^^^
498 |
499 |         # Aggregate usage by type
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:500:9
    |
499 |         # Aggregate usage by type
500 |         usage_summary = {}
    |         ^
501 |         for event in filtered_events:
502 |         pass
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\enterprise_tenant.py:502:9
    |
500 |         usage_summary = {}
501 |         for event in filtered_events:
502 |         pass
    |         ^^^^
503 |             event_type = event["event_type"]
504 |             if event_type not in usage_summary:
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:503:1
    |
501 |         for event in filtered_events:
502 |         pass
503 |             event_type = event["event_type"]
    | ^^^^^^^^^^^^
504 |             if event_type not in usage_summary:
505 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:505:13
    |
503 |             event_type = event["event_type"]
504 |             if event_type not in usage_summary:
505 |             pass
    |             ^^^^
506 |                 usage_summary[event_type] = 0
507 |             usage_summary[event_type] += event["quantity"]
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:506:1
    |
504 |             if event_type not in usage_summary:
505 |             pass
506 |                 usage_summary[event_type] = 0
    | ^^^^^^^^^^^^^^^^
507 |             usage_summary[event_type] += event["quantity"]
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:507:13
    |
505 |             pass
506 |                 usage_summary[event_type] = 0
507 |             usage_summary[event_type] += event["quantity"]
    |             ^
508 |
509 |         tenant = self.tenant_manager.get_tenant(tenant_id)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:509:9
    |
507 |             usage_summary[event_type] += event["quantity"]
508 |
509 |         tenant = self.tenant_manager.get_tenant(tenant_id)
    |         ^
510 |
511 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:522:1
    |
521 | # FastAPI middleware for multi-tenant isolation
522 | class MultiTenantMiddleware:
    | ^
523 |     pass
524 |     """Middleware to enforce tenant isolation"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:533:9
    |
531 |         tenant_id = self._extract_tenant_id(request)
532 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
533 |         pass
    |         ^^^^
534 |             return JSONResponse(
535 |                 status_code=400,
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:534:1
    |
532 |         if not tenant_id or not self.tenant_manager.get_tenant(tenant_id):
533 |         pass
534 |             return JSONResponse(
    | ^^^^^^^^^^^^
535 |                 status_code=400,
536 |                 content={"error": "Valid tenant ID required", "type": "tenant_error"},
    |

E501 Line too long (90 > 88)
   --> backend\enterprise_tenant.py:541:89
    |
539 |         request.state.tenant_id = tenant_id
540 |         # Check tenant status and limits
541 |         if not self.tenant_manager.check_resource_limit(tenant_id, "concurrent_requests"):
    |                                                                                         ^^
542 |         pass
543 |             return JSONResponse(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:542:9
    |
540 |         # Check tenant status and limits
541 |         if not self.tenant_manager.check_resource_limit(tenant_id, "concurrent_requests"):
542 |         pass
    |         ^^^^
543 |             return JSONResponse(
544 |                 status_code=429,
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:543:1
    |
541 |         if not self.tenant_manager.check_resource_limit(tenant_id, "concurrent_requests"):
542 |         pass
543 |             return JSONResponse(
    | ^^^^^^^^^^^^
544 |                 status_code=429,
545 |                 content={"error": "Concurrent request limit exceeded", "type": "rate_limit_error"},
    |

E501 Line too long (99 > 88)
   --> backend\enterprise_tenant.py:545:89
    |
543 |             return JSONResponse(
544 |                 status_code=429,
545 |                 content={"error": "Concurrent request limit exceeded", "type": "rate_limit_error"},
    |                                                                                         ^^^^^^^^^^^
546 |             )
547 |         self.tenant_manager.increment_usage(tenant_id, "concurrent_requests")
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\enterprise_tenant.py:549:9
    |
547 |         self.tenant_manager.increment_usage(tenant_id, "concurrent_requests")
548 |         try:
549 |         pass
    |         ^^^^
550 |             response = await call_next(request)
551 |             return response
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:550:1
    |
548 |         try:
549 |         pass
550 |             response = await call_next(request)
    | ^^^^^^^^^^^^
551 |             return response
552 |         finally:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:552:9
    |
550 |             response = await call_next(request)
551 |             return response
552 |         finally:
    |         ^
553 |         pass
554 |             self.tenant_manager.increment_usage(tenant_id, "concurrent_requests", -1)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:552:16
    |
550 |             response = await call_next(request)
551 |             return response
552 |         finally:
    |                ^
553 |         pass
554 |             self.tenant_manager.increment_usage(tenant_id, "concurrent_requests", -1)
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:552:17
    |
550 |             response = await call_next(request)
551 |             return response
552 |         finally:
    |                 ^
553 |         pass
554 |             self.tenant_manager.increment_usage(tenant_id, "concurrent_requests", -1)
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:554:1
    |
552 |         finally:
553 |         pass
554 |             self.tenant_manager.increment_usage(tenant_id, "concurrent_requests", -1)
    | ^^^^^^^^^^^^
555 |
556 |     def _extract_tenant_id(self, request) -> Optional[str]:
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:556:5
    |
554 |             self.tenant_manager.increment_usage(tenant_id, "concurrent_requests", -1)
555 |
556 |     def _extract_tenant_id(self, request) -> Optional[str]:
    |     ^
557 |         """Extract tenant ID from request"""
558 |         # Try to get from JWT token first
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\enterprise_tenant.py:560:9
    |
558 |         # Try to get from JWT token first
559 |         if hasattr(request.state, "user") and "tenant_id" in request.state.user:
560 |         pass
    |         ^^^^
561 |             return request.state.user["tenant_id"]
    |

invalid-syntax: Unexpected indentation
   --> backend\enterprise_tenant.py:561:1
    |
559 |         if hasattr(request.state, "user") and "tenant_id" in request.state.user:
560 |         pass
561 |             return request.state.user["tenant_id"]
    | ^^^^^^^^^^^^
562 |
563 |         # Fallback to header
    |

invalid-syntax: Expected a statement
   --> backend\enterprise_tenant.py:565:1
    |
563 |         # Fallback to header
564 |         return request.headers.get("X-Tenant-ID")
    |                                                  ^
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:122:9
    |
120 |         # Initialize python-magic if available
121 |         if MAGIC_AVAILABLE:
122 |         pass
    |         ^^^^
123 |             try:
124 |                 self.magic_mime = magic.Magic(mime=True)
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:123:1
    |
121 |         if MAGIC_AVAILABLE:
122 |         pass
123 |             try:
    | ^^^^^^^^^^^^
124 |                 self.magic_mime = magic.Magic(mime=True)
125 |                 self.magic_available = True
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\file_validation.py:127:13
    |
125 |                 self.magic_available = True
126 |             except Exception:
127 |             pass
    |             ^^^^
128 |                 print(
129 |                     "[FileValidator] Warning: python-magic available but failed to "
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:128:1
    |
126 |             except Exception:
127 |             pass
128 |                 print(
    | ^^^^^^^^^^^^^^^^
129 |                     "[FileValidator] Warning: python-magic available but failed to "
130 |                     "initialize"
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:133:9
    |
131 |                 )
132 |                 self.magic_available = False
133 |         else:
    |         ^^^^
134 |         pass
135 |             print(
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:133:13
    |
131 |                 )
132 |                 self.magic_available = False
133 |         else:
    |             ^
134 |         pass
135 |             print(
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:133:14
    |
131 |                 )
132 |                 self.magic_available = False
133 |         else:
    |              ^
134 |         pass
135 |             print(
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:135:1
    |
133 |         else:
134 |         pass
135 |             print(
    | ^^^^^^^^^^^^
136 |                 "[FileValidator] Info: python-magic not available, using basic "
137 |                 "validation"
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:141:5
    |
139 |             self.magic_available = False
140 |
141 |     def sanitize_filename(self, filename: str) -> str:
    |     ^
142 |         """
143 |         Sanitize filename to prevent security issues
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:152:9
    |
150 |         """
151 |         if not filename:
152 |         pass
    |         ^^^^
153 |             raise FileValidationError("Filename cannot be empty")
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:153:1
    |
151 |         if not filename:
152 |         pass
153 |             raise FileValidationError("Filename cannot be empty")
    | ^^^^^^^^^^^^
154 |
155 |         # Remove path components
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:171:9
    |
169 |         # Ensure it's not empty after sanitization
170 |         if not sanitized:
171 |         pass
    |         ^^^^
172 |             raise FileValidationError("Filename is invalid after sanitization")
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:172:1
    |
170 |         if not sanitized:
171 |         pass
172 |             raise FileValidationError("Filename is invalid after sanitization")
    | ^^^^^^^^^^^^
173 |
174 |         # Check for Windows reserved names
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:175:9
    |
174 |         # Check for Windows reserved names
175 |         name_without_ext = os.path.splitext(sanitized)[0].upper()
    |         ^
176 |         if name_without_ext in self.WINDOWS_RESERVED_NAMES:
177 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:177:9
    |
175 |         name_without_ext = os.path.splitext(sanitized)[0].upper()
176 |         if name_without_ext in self.WINDOWS_RESERVED_NAMES:
177 |         pass
    |         ^^^^
178 |             sanitized = f"file_{sanitized}"
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:178:1
    |
176 |         if name_without_ext in self.WINDOWS_RESERVED_NAMES:
177 |         pass
178 |             sanitized = f"file_{sanitized}"
    | ^^^^^^^^^^^^
179 |
180 |         # Check length
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:181:9
    |
180 |         # Check length
181 |         if len(sanitized) > self.MAX_FILENAME_LENGTH:
    |         ^
182 |         pass
183 |             name, ext = os.path.splitext(sanitized)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:182:9
    |
180 |         # Check length
181 |         if len(sanitized) > self.MAX_FILENAME_LENGTH:
182 |         pass
    |         ^^^^
183 |             name, ext = os.path.splitext(sanitized)
184 |             max_name_len = self.MAX_FILENAME_LENGTH - len(ext)
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:183:1
    |
181 |         if len(sanitized) > self.MAX_FILENAME_LENGTH:
182 |         pass
183 |             name, ext = os.path.splitext(sanitized)
    | ^^^^^^^^^^^^
184 |             max_name_len = self.MAX_FILENAME_LENGTH - len(ext)
185 |             sanitized = name[:max_name_len] + ext
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:187:9
    |
185 |             sanitized = name[:max_name_len] + ext
186 |
187 |         return sanitized
    |         ^
188 |
189 |     def validate_path(self, file_path: str) -> str:
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:189:5
    |
187 |         return sanitized
188 |
189 |     def validate_path(self, file_path: str) -> str:
    |     ^
190 |         """
191 |         Validate and sanitize file path to prevent path traversal
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:203:9
    |
201 |         """
202 |         if not file_path:
203 |         pass
    |         ^^^^
204 |             raise FileValidationError("File path cannot be empty")
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:204:1
    |
202 |         if not file_path:
203 |         pass
204 |             raise FileValidationError("File path cannot be empty")
    | ^^^^^^^^^^^^
205 |
206 |         # Convert to Path object for safer handling
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\file_validation.py:208:9
    |
206 |         # Convert to Path object for safer handling
207 |         try:
208 |         pass
    |         ^^^^
209 |             path = Path(file_path).resolve()
210 |         except Exception as e:
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:209:1
    |
207 |         try:
208 |         pass
209 |             path = Path(file_path).resolve()
    | ^^^^^^^^^^^^
210 |         except Exception as e:
211 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:210:9
    |
208 |         pass
209 |             path = Path(file_path).resolve()
210 |         except Exception as e:
    |         ^
211 |         pass
212 |             raise FileValidationError(f"Invalid file path: {e}") from e
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:210:26
    |
208 |         pass
209 |             path = Path(file_path).resolve()
210 |         except Exception as e:
    |                          ^^
211 |         pass
212 |             raise FileValidationError(f"Invalid file path: {e}") from e
    |

invalid-syntax: Expected an expression
   --> backend\file_validation.py:210:31
    |
208 |         pass
209 |             path = Path(file_path).resolve()
210 |         except Exception as e:
    |                               ^
211 |         pass
212 |             raise FileValidationError(f"Invalid file path: {e}") from e
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:212:1
    |
210 |         except Exception as e:
211 |         pass
212 |             raise FileValidationError(f"Invalid file path: {e}") from e
    | ^^^^^^^^^^^^
213 |
214 |         # Check for path traversal attempts
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:215:9
    |
214 |         # Check for path traversal attempts
215 |         import urllib.parse
    |         ^
216 |
217 |         # Decode URL encoding and normalize
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:236:9
    |
235 |         if any(traversal_indicators):
236 |         pass
    |         ^^^^
237 |             raise FileValidationError("Path traversal detected")
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:237:1
    |
235 |         if any(traversal_indicators):
236 |         pass
237 |             raise FileValidationError("Path traversal detected")
    | ^^^^^^^^^^^^
238 |
239 |         # Check path length
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:240:9
    |
239 |         # Check path length
240 |         if len(str(path)) > self.MAX_PATH_LENGTH:
    |         ^
241 |         pass
242 |             raise FileValidationError(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:241:9
    |
239 |         # Check path length
240 |         if len(str(path)) > self.MAX_PATH_LENGTH:
241 |         pass
    |         ^^^^
242 |             raise FileValidationError(
243 |                 f"Path too long (max {self.MAX_PATH_LENGTH} characters)"
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:242:1
    |
240 |         if len(str(path)) > self.MAX_PATH_LENGTH:
241 |         pass
242 |             raise FileValidationError(
    | ^^^^^^^^^^^^
243 |                 f"Path too long (max {self.MAX_PATH_LENGTH} characters)"
244 |             )
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:246:9
    |
244 |             )
245 |
246 |         return str(path)
    |         ^
247 |
248 |     def _detect_by_magic_bytes(self, file_content: bytes) -> Optional[Tuple[str, str]]:
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:248:5
    |
246 |         return str(path)
247 |
248 |     def _detect_by_magic_bytes(self, file_content: bytes) -> Optional[Tuple[str, str]]:
    |     ^
249 |         """Detect using leading magic bytes."""
250 |         for file_type, config in self.ALLOWED_TYPES.items():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\file_validation.py:251:9
    |
249 |         """Detect using leading magic bytes."""
250 |         for file_type, config in self.ALLOWED_TYPES.items():
251 |         pass
    |         ^^^^
252 |             for magic_bytes in config["magic_bytes"]:
253 |                 if file_content.startswith(magic_bytes):
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:252:1
    |
250 |         for file_type, config in self.ALLOWED_TYPES.items():
251 |         pass
252 |             for magic_bytes in config["magic_bytes"]:
    | ^^^^^^^^^^^^
253 |                 if file_content.startswith(magic_bytes):
254 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:253:57
    |
251 |         pass
252 |             for magic_bytes in config["magic_bytes"]:
253 |                 if file_content.startswith(magic_bytes):
    |                                                         ^
254 |             pass
255 |                     return file_type, config["mime_types"][0]
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:255:1
    |
253 |                 if file_content.startswith(magic_bytes):
254 |             pass
255 |                     return file_type, config["mime_types"][0]
    | ^^^^^^^^^^^^^^^^^^^^
256 |         return None
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:256:9
    |
254 |             pass
255 |                     return file_type, config["mime_types"][0]
256 |         return None
    |         ^
257 |
258 |     def _detect_by_python_magic(self, file_content: bytes) -> Optional[Tuple[str, str]]:
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:258:5
    |
256 |         return None
257 |
258 |     def _detect_by_python_magic(self, file_content: bytes) -> Optional[Tuple[str, str]]:
    |     ^
259 |         """Detect using python-magic, if available."""
260 |         if not self.magic_available:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:261:9
    |
259 |         """Detect using python-magic, if available."""
260 |         if not self.magic_available:
261 |         pass
    |         ^^^^
262 |             return None
263 |         try:
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:262:1
    |
260 |         if not self.magic_available:
261 |         pass
262 |             return None
    | ^^^^^^^^^^^^
263 |         try:
264 |         pass
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\file_validation.py:264:9
    |
262 |             return None
263 |         try:
264 |         pass
    |         ^^^^
265 |             detected_mime = self.magic_mime.from_buffer(file_content)
266 |         except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:265:1
    |
263 |         try:
264 |         pass
265 |             detected_mime = self.magic_mime.from_buffer(file_content)
    | ^^^^^^^^^^^^
266 |         except Exception:
267 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:266:9
    |
264 |         pass
265 |             detected_mime = self.magic_mime.from_buffer(file_content)
266 |         except Exception:
    |         ^
267 |         pass
268 |             return None
    |

invalid-syntax: Expected an expression
   --> backend\file_validation.py:266:26
    |
264 |         pass
265 |             detected_mime = self.magic_mime.from_buffer(file_content)
266 |         except Exception:
    |                          ^
267 |         pass
268 |             return None
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:268:1
    |
266 |         except Exception:
267 |         pass
268 |             return None
    | ^^^^^^^^^^^^
269 |         for file_type, config in self.ALLOWED_TYPES.items():
270 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:269:9
    |
267 |         pass
268 |             return None
269 |         for file_type, config in self.ALLOWED_TYPES.items():
    |         ^
270 |         pass
271 |             if detected_mime in config["mime_types"]:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\file_validation.py:270:9
    |
268 |             return None
269 |         for file_type, config in self.ALLOWED_TYPES.items():
270 |         pass
    |         ^^^^
271 |             if detected_mime in config["mime_types"]:
272 |                 return file_type, detected_mime
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:271:1
    |
269 |         for file_type, config in self.ALLOWED_TYPES.items():
270 |         pass
271 |             if detected_mime in config["mime_types"]:
    | ^^^^^^^^^^^^
272 |                 return file_type, detected_mime
273 |         return None
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:273:9
    |
271 |             if detected_mime in config["mime_types"]:
272 |                 return file_type, detected_mime
273 |         return None
    |         ^
274 |
275 |     def _detect_by_extension(self, filename: str) -> Optional[Tuple[str, str]]:
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:275:5
    |
273 |         return None
274 |
275 |     def _detect_by_extension(self, filename: str) -> Optional[Tuple[str, str]]:
    |     ^
276 |         """Detect using file extension."""
277 |         extension = Path(filename).suffix.lower()
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\file_validation.py:279:9
    |
277 |         extension = Path(filename).suffix.lower()
278 |         for file_type, config in self.ALLOWED_TYPES.items():
279 |         pass
    |         ^^^^
280 |             if extension in config["extensions"]:
281 |                 return file_type, config["mime_types"][0]
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:280:1
    |
278 |         for file_type, config in self.ALLOWED_TYPES.items():
279 |         pass
280 |             if extension in config["extensions"]:
    | ^^^^^^^^^^^^
281 |                 return file_type, config["mime_types"][0]
282 |         return None
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:284:5
    |
282 |         return None
283 |
284 |     def _detect_by_mimetypes(self, filename: str) -> Optional[Tuple[str, str]]:
    |     ^
285 |         """Detect using Python mimetypes as last resort."""
286 |         mime_type, _ = mimetypes.guess_type(filename)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:288:9
    |
286 |         mime_type, _ = mimetypes.guess_type(filename)
287 |         if not mime_type:
288 |         pass
    |         ^^^^
289 |             return None
290 |         for file_type, config in self.ALLOWED_TYPES.items():
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:289:1
    |
287 |         if not mime_type:
288 |         pass
289 |             return None
    | ^^^^^^^^^^^^
290 |         for file_type, config in self.ALLOWED_TYPES.items():
291 |         pass
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\file_validation.py:291:9
    |
289 |             return None
290 |         for file_type, config in self.ALLOWED_TYPES.items():
291 |         pass
    |         ^^^^
292 |             if mime_type in config["mime_types"]:
293 |                 return file_type, mime_type
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:292:1
    |
290 |         for file_type, config in self.ALLOWED_TYPES.items():
291 |         pass
292 |             if mime_type in config["mime_types"]:
    | ^^^^^^^^^^^^
293 |                 return file_type, mime_type
294 |         return None
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:294:9
    |
292 |             if mime_type in config["mime_types"]:
293 |                 return file_type, mime_type
294 |         return None
    |         ^
295 |
296 |     def detect_file_type(self, file_content: bytes, filename: str) -> Tuple[str, str]:
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:296:5
    |
294 |         return None
295 |
296 |     def detect_file_type(self, file_content: bytes, filename: str) -> Tuple[str, str]:
    |     ^
297 |         """
298 |         Detect file type using multiple methods
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:309:9
    |
307 |         detected = self._detect_by_magic_bytes(file_content)
308 |         if detected:
309 |         pass
    |         ^^^^
310 |             return detected
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:310:1
    |
308 |         if detected:
309 |         pass
310 |             return detected
    | ^^^^^^^^^^^^
311 |
312 |         detected = self._detect_by_python_magic(file_content)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:314:9
    |
312 |         detected = self._detect_by_python_magic(file_content)
313 |         if detected:
314 |         pass
    |         ^^^^
315 |             return detected
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:315:1
    |
313 |         if detected:
314 |         pass
315 |             return detected
    | ^^^^^^^^^^^^
316 |
317 |         detected = self._detect_by_extension(filename)
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:317:9
    |
315 |             return detected
316 |
317 |         detected = self._detect_by_extension(filename)
    |         ^
318 |         if detected:
319 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:319:9
    |
317 |         detected = self._detect_by_extension(filename)
318 |         if detected:
319 |         pass
    |         ^^^^
320 |             return detected
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:320:1
    |
318 |         if detected:
319 |         pass
320 |             return detected
    | ^^^^^^^^^^^^
321 |
322 |         detected = self._detect_by_mimetypes(filename)
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:322:9
    |
320 |             return detected
321 |
322 |         detected = self._detect_by_mimetypes(filename)
    |         ^
323 |         if detected:
324 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:324:9
    |
322 |         detected = self._detect_by_mimetypes(filename)
323 |         if detected:
324 |         pass
    |         ^^^^
325 |             return detected
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:325:1
    |
323 |         if detected:
324 |         pass
325 |             return detected
    | ^^^^^^^^^^^^
326 |
327 |         return self._raise_unsupported(filename)
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:327:9
    |
325 |             return detected
326 |
327 |         return self._raise_unsupported(filename)
    |         ^
328 |
329 |     def _raise_unsupported(self, filename: str) -> Tuple[str, str]:
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:329:5
    |
327 |         return self._raise_unsupported(filename)
328 |
329 |     def _raise_unsupported(self, filename: str) -> Tuple[str, str]:
    |     ^
330 |         """Helper to raise a consistent error when detection fails."""
331 |         raise FileValidationError(f"Unsupported file type for {filename}")
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:349:9
    |
348 |         if size_mb > max_size:
349 |         pass
    |         ^^^^
350 |             raise FileValidationError(
351 |                 f"File too large: {size_mb:.1f}MB (max {max_size}MB for {file_type} "
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:350:1
    |
348 |         if size_mb > max_size:
349 |         pass
350 |             raise FileValidationError(
    | ^^^^^^^^^^^^
351 |                 f"File too large: {size_mb:.1f}MB (max {max_size}MB for {file_type} "
352 |                 "files)"
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:355:5
    |
353 |             )
354 |
355 |     def check_dangerous_content(self, file_content: bytes, filename: str) -> None:
    |     ^
356 |         """
357 |         Check for potentially dangerous content
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:370:9
    |
368 |         extension = Path(filename).suffix.lower()
369 |         if extension in self.DANGEROUS_EXTENSIONS:
370 |         pass
    |         ^^^^
371 |             raise FileValidationError(f"Dangerous file extension: {extension}")
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:371:1
    |
369 |         if extension in self.DANGEROUS_EXTENSIONS:
370 |         pass
371 |             raise FileValidationError(f"Dangerous file extension: {extension}")
    | ^^^^^^^^^^^^
372 |
373 |         # Check for embedded executables in PDFs
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:375:9
    |
373 |         # Check for embedded executables in PDFs
374 |         if filename.lower().endswith('.pdf'):
375 |         pass
    |         ^^^^
376 |             dangerous_pdf_content = [
377 |                 b'/JavaScript', b'/JS', b'/AcroForm', b'/XFA',
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:376:1
    |
374 |         if filename.lower().endswith('.pdf'):
375 |         pass
376 |             dangerous_pdf_content = [
    | ^^^^^^^^^^^^
377 |                 b'/JavaScript', b'/JS', b'/AcroForm', b'/XFA',
378 |                 b'/EmbeddedFile', b'/Launch', b'/SubmitForm'
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\file_validation.py:381:13
    |
379 |             ]
380 |             for dangerous in dangerous_pdf_content:
381 |             pass
    |             ^^^^
382 |                 if dangerous in file_content:
383 |                     raise FileValidationError(
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:382:1
    |
380 |             for dangerous in dangerous_pdf_content:
381 |             pass
382 |                 if dangerous in file_content:
    | ^^^^^^^^^^^^^^^^
383 |                     raise FileValidationError(
384 |                         "PDF contains potentially dangerous content"
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:388:9
    |
387 |         # Check for null bytes (can indicate binary injection)
388 |         if b'\x00' in file_content[:1024] and not any(
    |         ^
389 |             file_content.startswith(magic)
390 |             for config in self.ALLOWED_TYPES.values()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:394:9
    |
392 |             if magic
393 |         ):
394 |         pass
    |         ^^^^
395 |             raise FileValidationError(
396 |                 "File contains null bytes (potential binary injection)"
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:395:1
    |
393 |         ):
394 |         pass
395 |             raise FileValidationError(
    | ^^^^^^^^^^^^
396 |                 "File contains null bytes (potential binary injection)"
397 |             )
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:399:5
    |
397 |             )
398 |
399 |     def validate_file(
    |     ^
400 |         self,
401 |         file_content: bytes,
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\file_validation.py:433:9
    |
432 |         try:
433 |         pass
    |         ^^^^
434 |             # 1. Sanitize filename
435 |             result['sanitized_filename'] = self.sanitize_filename(filename)
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:435:1
    |
433 |         pass
434 |             # 1. Sanitize filename
435 |             result['sanitized_filename'] = self.sanitize_filename(filename)
    | ^^^^^^^^^^^^
436 |
437 |             # 2. Validate path if provided
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:439:13
    |
437 |             # 2. Validate path if provided
438 |             if file_path:
439 |             pass
    |             ^^^^
440 |                 result['sanitized_path'] = self.validate_path(file_path)
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:440:1
    |
438 |             if file_path:
439 |             pass
440 |                 result['sanitized_path'] = self.validate_path(file_path)
    | ^^^^^^^^^^^^^^^^
441 |
442 |             # 3. Detect file type
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:449:13
    |
447 |             # 4. Check if file type is allowed
448 |             if file_type not in self.allowed_types:
449 |             pass
    |             ^^^^
450 |                 raise FileValidationError(f"File type '{file_type}' not allowed")
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:450:1
    |
448 |             if file_type not in self.allowed_types:
449 |             pass
450 |                 raise FileValidationError(f"File type '{file_type}' not allowed")
    | ^^^^^^^^^^^^^^^^
451 |
452 |             # 5. Validate file size
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:453:13
    |
452 |             # 5. Validate file size
453 |             self.validate_file_size(file_content, file_type)
    |             ^
454 |
455 |             # 6. Check for dangerous content
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:460:13
    |
458 |             # 7. Additional type-specific validation
459 |             if file_type == 'pdf':
460 |             pass
    |             ^^^^
461 |                 self._validate_pdf_content(file_content, result)
462 |             elif file_type == 'audio':
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:461:1
    |
459 |             if file_type == 'pdf':
460 |             pass
461 |                 self._validate_pdf_content(file_content, result)
    | ^^^^^^^^^^^^^^^^
462 |             elif file_type == 'audio':
463 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:462:13
    |
460 |             pass
461 |                 self._validate_pdf_content(file_content, result)
462 |             elif file_type == 'audio':
    |             ^
463 |             pass
464 |                 self._validate_audio_content(file_content, result)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\file_validation.py:462:18
    |
460 |             pass
461 |                 self._validate_pdf_content(file_content, result)
462 |             elif file_type == 'audio':
    |                  ^^^^^^^^^^^^^^^^^^^^
463 |             pass
464 |                 self._validate_audio_content(file_content, result)
    |

invalid-syntax: Expected an expression
   --> backend\file_validation.py:462:39
    |
460 |             pass
461 |                 self._validate_pdf_content(file_content, result)
462 |             elif file_type == 'audio':
    |                                       ^
463 |             pass
464 |                 self._validate_audio_content(file_content, result)
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:464:1
    |
462 |             elif file_type == 'audio':
463 |             pass
464 |                 self._validate_audio_content(file_content, result)
    | ^^^^^^^^^^^^^^^^
465 |
466 |             result['valid'] = True
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:466:13
    |
464 |                 self._validate_audio_content(file_content, result)
465 |
466 |             result['valid'] = True
    |             ^
467 |
468 |         except FileValidationError as e:
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:468:9
    |
466 |             result['valid'] = True
467 |
468 |         except FileValidationError as e:
    |         ^
469 |         pass
470 |             result['error'] = str(e)
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:468:36
    |
466 |             result['valid'] = True
467 |
468 |         except FileValidationError as e:
    |                                    ^^
469 |         pass
470 |             result['error'] = str(e)
    |

invalid-syntax: Expected an expression
   --> backend\file_validation.py:468:41
    |
466 |             result['valid'] = True
467 |
468 |         except FileValidationError as e:
    |                                         ^
469 |         pass
470 |             result['error'] = str(e)
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:470:1
    |
468 |         except FileValidationError as e:
469 |         pass
470 |             result['error'] = str(e)
    | ^^^^^^^^^^^^
471 |             raise
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:473:9
    |
471 |             raise
472 |
473 |         return result
    |         ^
474 |
475 |     def _validate_pdf_content(self, content: bytes, result: Dict) -> None:
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:475:5
    |
473 |         return result
474 |
475 |     def _validate_pdf_content(self, content: bytes, result: Dict) -> None:
    |     ^
476 |         """Additional PDF-specific validation"""
477 |         if not content.startswith(b'%PDF-'):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:478:9
    |
476 |         """Additional PDF-specific validation"""
477 |         if not content.startswith(b'%PDF-'):
478 |         pass
    |         ^^^^
479 |             result['warnings'].append("PDF header not found at beginning of file")
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:479:1
    |
477 |         if not content.startswith(b'%PDF-'):
478 |         pass
479 |             result['warnings'].append("PDF header not found at beginning of file")
    | ^^^^^^^^^^^^
480 |
481 |         # Check PDF version
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:483:9
    |
481 |         # Check PDF version
482 |         if len(content) > 8:
483 |         pass
    |         ^^^^
484 |             version_line = content[:20].decode('ascii', errors='ignore')
485 |             if '%PDF-1.4' in version_line or '%PDF-1.3' in version_line:
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:484:1
    |
482 |         if len(content) > 8:
483 |         pass
484 |             version_line = content[:20].decode('ascii', errors='ignore')
    | ^^^^^^^^^^^^
485 |             if '%PDF-1.4' in version_line or '%PDF-1.3' in version_line:
486 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\file_validation.py:486:13
    |
484 |             version_line = content[:20].decode('ascii', errors='ignore')
485 |             if '%PDF-1.4' in version_line or '%PDF-1.3' in version_line:
486 |             pass
    |             ^^^^
487 |                 result['warnings'].append(
488 |                     "Old PDF version detected (may have security issues)"
    |

invalid-syntax: Unexpected indentation
   --> backend\file_validation.py:487:1
    |
485 |             if '%PDF-1.4' in version_line or '%PDF-1.3' in version_line:
486 |             pass
487 |                 result['warnings'].append(
    | ^^^^^^^^^^^^^^^^
488 |                     "Old PDF version detected (may have security issues)"
489 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:491:5
    |
489 |                 )
490 |
491 |     def _validate_audio_content(self, content: bytes, result: Dict) -> None:
    |     ^
492 |         """Additional audio-specific validation"""
493 |         # Basic audio format validation
    |

invalid-syntax: Expected a statement
   --> backend\file_validation.py:500:1
    |
498 | # Helper functions for common validation scenarios
499 |
500 | def validate_base64_audio(audio_data: str, max_size_mb: float = 25) -> Dict[str, any]:
    | ^
501 |     """
502 |     Validate base64-encoded audio data
    |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\https_utils.py:27:9
   |
25 |     async def dispatch(self, request: Request, call_next):
26 |         if request.url.scheme == "http":
27 |         pass
   |         ^^^^
28 |             url = request.url.replace(scheme="https")
29 |             return RedirectResponse(url=str(url), status_code=307)
   |

invalid-syntax: Unexpected indentation
  --> backend\https_utils.py:28:1
   |
26 |         if request.url.scheme == "http":
27 |         pass
28 |             url = request.url.replace(scheme="https")
   | ^^^^^^^^^^^^
29 |             return RedirectResponse(url=str(url), status_code=307)
30 |         return await call_next(request)
   |

invalid-syntax: Expected a statement
  --> backend\https_utils.py:33:1
   |
33 | def get_ssl_config():
   | ^
34 |     """Get SSL config from environment variables"""
35 |     certfile = os.getenv("SSL_CERTFILE", None)
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\indexing.py:52:9
   |
50 |         # Prefer centralized settings when cache_dir not provided
51 |         if cache_dir is None:
52 |         pass
   |         ^^^^
53 |             try:
54 |                 cache_dir = str(get_settings().abs_cache_dir)
   |

invalid-syntax: Unexpected indentation
  --> backend\indexing.py:53:1
   |
51 |         if cache_dir is None:
52 |         pass
53 |             try:
   | ^^^^^^^^^^^^
54 |                 cache_dir = str(get_settings().abs_cache_dir)
55 |             except Exception:
   |

invalid-syntax: Expected an indented block after `except` clause
  --> backend\indexing.py:56:13
   |
54 |                 cache_dir = str(get_settings().abs_cache_dir)
55 |             except Exception:
56 |             pass
   |             ^^^^
57 |                 cache_dir = "backend/cache"
58 |         self.cache_dir = Path(cache_dir)
   |

invalid-syntax: Unexpected indentation
  --> backend\indexing.py:57:1
   |
55 |             except Exception:
56 |             pass
57 |                 cache_dir = "backend/cache"
   | ^^^^^^^^^^^^^^^^
58 |         self.cache_dir = Path(cache_dir)
59 |         self.cache_dir.mkdir(parents=True, exist_ok=True)
   |

invalid-syntax: Expected a statement
  --> backend\indexing.py:65:5
   |
63 |     # -------------------
64 |
65 |     def _hash_url(self, url: str) -> str:
   |     ^
66 |         return hashlib.md5(url.encode("utf-8"), usedforsecurity=False).hexdigest()
   |

invalid-syntax: Expected an indented block after `with` statement
  --> backend\indexing.py:72:9
   |
70 |         cache_path = self.cache_dir / f"{key}.txt"
71 |         with open(cache_path, "w", encoding="utf-8") as f:
72 |         pass
   |         ^^^^
73 |             f.write(text)
74 |         return cache_path
   |

invalid-syntax: Unexpected indentation
  --> backend\indexing.py:73:1
   |
71 |         with open(cache_path, "w", encoding="utf-8") as f:
72 |         pass
73 |             f.write(text)
   | ^^^^^^^^^^^^
74 |         return cache_path
   |

invalid-syntax: Expected a statement
  --> backend\indexing.py:76:5
   |
74 |         return cache_path
75 |
76 |     def _load_cached(self, key: str) -> Optional[str]:
   |     ^
77 |         """Load cached text if present; return None if missing or read fails."""
78 |         cache_path = self.cache_dir / f"{key}.txt"
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\indexing.py:80:9
   |
78 |         cache_path = self.cache_dir / f"{key}.txt"
79 |         if not cache_path.exists():
80 |         pass
   |         ^^^^
81 |             return None
   |

invalid-syntax: Unexpected indentation
  --> backend\indexing.py:81:1
   |
79 |         if not cache_path.exists():
80 |         pass
81 |             return None
   | ^^^^^^^^^^^^
82 |
83 |         def do_read():
   |

invalid-syntax: Expected an indented block after `with` statement
  --> backend\indexing.py:85:13
   |
83 |         def do_read():
84 |             with open(cache_path, "r", encoding="utf-8") as f:
85 |             pass
   |             ^^^^
86 |                 return f.read()
   |

invalid-syntax: Unexpected indentation
  --> backend\indexing.py:86:1
   |
84 |             with open(cache_path, "r", encoding="utf-8") as f:
85 |             pass
86 |                 return f.read()
   | ^^^^^^^^^^^^^^^^
87 |
88 |         return safe_call(
   |

invalid-syntax: Expected a statement
  --> backend\indexing.py:88:9
   |
86 |                 return f.read()
87 |
88 |         return safe_call(
   |         ^
89 |             do_read,
90 |             error_msg=f"[VaultIndexer] Error reading cache for {key}",
   |

invalid-syntax: Expected a statement
  --> backend\indexing.py:94:5
   |
92 |         )
93 |
94 |     def _read_markdown(self, md_path: str) -> Optional[str]:
   |     ^
95 |         """Read a Markdown file to string, returning None on failure.
   |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:101:9
    |
 99 |         path = Path(md_path)
100 |         if not path.exists():
101 |         pass
    |         ^^^^
102 |             return None
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:102:1
    |
100 |         if not path.exists():
101 |         pass
102 |             return None
    | ^^^^^^^^^^^^
103 |
104 |         def do_read_md():
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\indexing.py:106:13
    |
104 |         def do_read_md():
105 |             with open(path, "r", encoding="utf-8") as f:
106 |             pass
    |             ^^^^
107 |                 return f.read()
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:107:1
    |
105 |             with open(path, "r", encoding="utf-8") as f:
106 |             pass
107 |                 return f.read()
    | ^^^^^^^^^^^^^^^^
108 |
109 |         return safe_call(
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:109:9
    |
107 |                 return f.read()
108 |
109 |         return safe_call(
    |         ^
110 |             do_read_md,
111 |             error_msg=f"[VaultIndexer] Error reading markdown {md_path}",
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:115:5
    |
113 |         )
114 |
115 |     def _read_pdf(self, pdf_path: str) -> Optional[str]:
    |     ^
116 |         """Read and extract text from a PDF file; return None on failure or if missing.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:122:9
    |
120 |         path = Path(pdf_path)
121 |         if not path.exists():
122 |         pass
    |         ^^^^
123 |             return None
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:123:1
    |
121 |         if not path.exists():
122 |         pass
123 |             return None
    | ^^^^^^^^^^^^
124 |
125 |         def do_read_pdf():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\indexing.py:129:13
    |
127 |             pieces = []
128 |             for page in reader.pages:
129 |             pass
    |             ^^^^
130 |                 txt = page.extract_text() or ""
131 |                 txt = txt.strip()
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:130:1
    |
128 |             for page in reader.pages:
129 |             pass
130 |                 txt = page.extract_text() or ""
    | ^^^^^^^^^^^^^^^^
131 |                 txt = txt.strip()
132 |                 if txt:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:132:24
    |
130 |                 txt = page.extract_text() or ""
131 |                 txt = txt.strip()
132 |                 if txt:
    |                        ^
133 |             pass
134 |                     pieces.append(txt)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:134:1
    |
132 |                 if txt:
133 |             pass
134 |                     pieces.append(txt)
    | ^^^^^^^^^^^^^^^^^^^^
135 |             return "\n".join(pieces)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:135:13
    |
133 |             pass
134 |                     pieces.append(txt)
135 |             return "\n".join(pieces)
    |             ^
136 |
137 |         return safe_call(
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:137:9
    |
135 |             return "\n".join(pieces)
136 |
137 |         return safe_call(
    |         ^
138 |             do_read_pdf,
139 |             error_msg=f"[VaultIndexer] Error reading PDF {pdf_path}",
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:143:5
    |
141 |         )
142 |
143 |     def _fetch_web_content(self, url: str) -> Optional[str]:
    |     ^
144 |         """Fetch a URL and extract readable text using readability + BeautifulSoup.
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\indexing.py:150:9
    |
149 |         def do_fetch():
150 |         pass
    |         ^^^^
151 |             resp = requests.get(url, timeout=10)
152 |             resp.raise_for_status()
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:151:1
    |
149 |         def do_fetch():
150 |         pass
151 |             resp = requests.get(url, timeout=10)
    | ^^^^^^^^^^^^
152 |             resp.raise_for_status()
153 |             doc = Document(resp.text)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:169:5
    |
167 |     # -------------------
168 |
169 |     def index_vault(self, vault_path: str) -> Dict[str, int]:
    |     ^
170 |         """Index all Markdown and PDF files in a vault directory."""
171 |         results = {}
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\indexing.py:173:9
    |
171 |         results = {}
172 |         for root, _, files in os.walk(vault_path):
173 |         pass
    |         ^^^^
174 |             for file in files:
175 |                 full_path = os.path.join(root, file)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:174:1
    |
172 |         for root, _, files in os.walk(vault_path):
173 |         pass
174 |             for file in files:
    | ^^^^^^^^^^^^
175 |                 full_path = os.path.join(root, file)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:179:42
    |
177 |                 def do_index(f=file, fp=full_path):
178 |                     content = None
179 |                     if f.endswith(".md"):
    |                                          ^
180 |                 pass
181 |                         content = self._read_markdown(fp)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:181:1
    |
179 |                     if f.endswith(".md"):
180 |                 pass
181 |                         content = self._read_markdown(fp)
    | ^^^^^^^^^^^^^^^^^^^^^^^^
182 |                     elif f.endswith(".pdf"):
183 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:182:1
    |
180 |                 pass
181 |                         content = self._read_markdown(fp)
182 |                     elif f.endswith(".pdf"):
    | ^^^^^^^^^^^^^^^^^^^^
183 |                 pass
184 |                         content = self._read_pdf(fp)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:182:21
    |
180 |                 pass
181 |                         content = self._read_markdown(fp)
182 |                     elif f.endswith(".pdf"):
    |                     ^^^^
183 |                 pass
184 |                         content = self._read_pdf(fp)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\indexing.py:182:26
    |
180 |                 pass
181 |                         content = self._read_markdown(fp)
182 |                     elif f.endswith(".pdf"):
    |                          ^^^^^^^^^^^^^^^^^^
183 |                 pass
184 |                         content = self._read_pdf(fp)
    |

invalid-syntax: Expected an expression
   --> backend\indexing.py:182:45
    |
180 |                 pass
181 |                         content = self._read_markdown(fp)
182 |                     elif f.endswith(".pdf"):
    |                                             ^
183 |                 pass
184 |                         content = self._read_pdf(fp)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:184:1
    |
182 |                     elif f.endswith(".pdf"):
183 |                 pass
184 |                         content = self._read_pdf(fp)
    | ^^^^^^^^^^^^^^^^^^^^^^^^
185 |
186 |                     if content:
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:186:1
    |
184 |                         content = self._read_pdf(fp)
185 |
186 |                     if content:
    | ^^^^^^^^^^^^^^^^^^^^
187 |                 pass
188 |                         chunks = (
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:187:17
    |
186 |                     if content:
187 |                 pass
    |                 ^^^^
188 |                         chunks = (
189 |                             self.emb_mgr.chunk_text(content)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:188:1
    |
186 |                     if content:
187 |                 pass
188 |                         chunks = (
    | ^^^^^^^^^^^^^^^^^^^^^^^^
189 |                             self.emb_mgr.chunk_text(content)
190 |                             if getattr(self.emb_mgr, "chunk_text", None)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:193:84
    |
191 |                             else [content]
192 |                         )
193 |                         if chunks and getattr(self.emb_mgr, "add_documents", None):
    |                                                                                    ^
194 |                 pass
195 |                             self.emb_mgr.add_documents(chunks)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:195:1
    |
193 |                         if chunks and getattr(self.emb_mgr, "add_documents", None):
194 |                 pass
195 |                             self.emb_mgr.add_documents(chunks)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
196 |                         results[fp] = len(chunks)
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:196:1
    |
194 |                 pass
195 |                             self.emb_mgr.add_documents(chunks)
196 |                         results[fp] = len(chunks)
    | ^^^^^^^^^^^^^^^^^^^^^^^^
197 |
198 |                 safe_call(
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:201:9
    |
199 |                     do_index, error_msg=f"[VaultIndexer] Error indexing {full_path}"
200 |                 )
201 |         return results
    |         ^
202 |
203 |     def reindex_all(self, vault_path: str = "./vault") -> Dict[str, int]:
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:203:5
    |
201 |         return results
202 |
203 |     def reindex_all(self, vault_path: str = "./vault") -> Dict[str, int]:
    |     ^
204 |         """Alias for reindex, which performs a full re-scan and indexing."""
205 |         return self.reindex(vault_path)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:216:9
    |
214 |         # Always attempt to clear collection even if directory doesn't exist
215 |         if getattr(self.emb_mgr, "clear_collection", None):
216 |         pass
    |         ^^^^
217 |             safe_call(
218 |                 self.emb_mgr.clear_collection,
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:217:1
    |
215 |         if getattr(self.emb_mgr, "clear_collection", None):
216 |         pass
217 |             safe_call(
    | ^^^^^^^^^^^^
218 |                 self.emb_mgr.clear_collection,
219 |                 error_msg="[VaultIndexer] Error clearing collection",
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:221:9
    |
219 |                 error_msg="[VaultIndexer] Error clearing collection",
220 |             )
221 |         elif getattr(self.emb_mgr, "reset_db", None):
    |         ^^^^
222 |         pass
223 |             safe_call(
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\indexing.py:221:14
    |
219 |                 error_msg="[VaultIndexer] Error clearing collection",
220 |             )
221 |         elif getattr(self.emb_mgr, "reset_db", None):
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
222 |         pass
223 |             safe_call(
    |

invalid-syntax: Expected an expression
   --> backend\indexing.py:221:54
    |
219 |                 error_msg="[VaultIndexer] Error clearing collection",
220 |             )
221 |         elif getattr(self.emb_mgr, "reset_db", None):
    |                                                      ^
222 |         pass
223 |             safe_call(
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:223:1
    |
221 |         elif getattr(self.emb_mgr, "reset_db", None):
222 |         pass
223 |             safe_call(
    | ^^^^^^^^^^^^
224 |                 self.emb_mgr.reset_db, error_msg="[VaultIndexer] Error resetting DB"
225 |             )
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:227:9
    |
225 |             )
226 |
227 |         if not os.path.isdir(vault_path):
    |         ^
228 |         pass
229 |             return summary
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:228:9
    |
227 |         if not os.path.isdir(vault_path):
228 |         pass
    |         ^^^^
229 |             return summary
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:229:1
    |
227 |         if not os.path.isdir(vault_path):
228 |         pass
229 |             return summary
    | ^^^^^^^^^^^^
230 |
231 |         for root, _, files in os.walk(vault_path):
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:231:9
    |
229 |             return summary
230 |
231 |         for root, _, files in os.walk(vault_path):
    |         ^
232 |         pass
233 |             for file in files:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\indexing.py:232:9
    |
231 |         for root, _, files in os.walk(vault_path):
232 |         pass
    |         ^^^^
233 |             for file in files:
234 |                 full_path = os.path.join(root, file)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:233:1
    |
231 |         for root, _, files in os.walk(vault_path):
232 |         pass
233 |             for file in files:
    | ^^^^^^^^^^^^
234 |                 full_path = os.path.join(root, file)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:237:42
    |
236 |                 def do_index_file(f=file, fp=full_path):
237 |                     if f.endswith(".md"):
    |                                          ^
238 |                 pass
239 |                         content = self._read_markdown(fp)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:239:1
    |
237 |                     if f.endswith(".md"):
238 |                 pass
239 |                         content = self._read_markdown(fp)
    | ^^^^^^^^^^^^^^^^^^^^^^^^
240 |                     elif f.endswith(".pdf"):
241 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:240:1
    |
238 |                 pass
239 |                         content = self._read_markdown(fp)
240 |                     elif f.endswith(".pdf"):
    | ^^^^^^^^^^^^^^^^^^^^
241 |                 pass
242 |                         content = self._read_pdf(fp)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:240:21
    |
238 |                 pass
239 |                         content = self._read_markdown(fp)
240 |                     elif f.endswith(".pdf"):
    |                     ^^^^
241 |                 pass
242 |                         content = self._read_pdf(fp)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\indexing.py:240:26
    |
238 |                 pass
239 |                         content = self._read_markdown(fp)
240 |                     elif f.endswith(".pdf"):
    |                          ^^^^^^^^^^^^^^^^^^
241 |                 pass
242 |                         content = self._read_pdf(fp)
    |

invalid-syntax: Expected an expression
   --> backend\indexing.py:240:45
    |
238 |                 pass
239 |                         content = self._read_markdown(fp)
240 |                     elif f.endswith(".pdf"):
    |                                             ^
241 |                 pass
242 |                         content = self._read_pdf(fp)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:242:1
    |
240 |                     elif f.endswith(".pdf"):
241 |                 pass
242 |                         content = self._read_pdf(fp)
    | ^^^^^^^^^^^^^^^^^^^^^^^^
243 |                     else:
244 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:243:1
    |
241 |                 pass
242 |                         content = self._read_pdf(fp)
243 |                     else:
    | ^^^^^^^^^^^^^^^^^^^^
244 |                 pass
245 |                         return 0  # unsupported
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:243:21
    |
241 |                 pass
242 |                         content = self._read_pdf(fp)
243 |                     else:
    |                     ^^^^
244 |                 pass
245 |                         return 0  # unsupported
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:243:25
    |
241 |                 pass
242 |                         content = self._read_pdf(fp)
243 |                     else:
    |                         ^
244 |                 pass
245 |                         return 0  # unsupported
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:243:26
    |
241 |                 pass
242 |                         content = self._read_pdf(fp)
243 |                     else:
    |                          ^
244 |                 pass
245 |                         return 0  # unsupported
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:245:1
    |
243 |                     else:
244 |                 pass
245 |                         return 0  # unsupported
    | ^^^^^^^^^^^^^^^^^^^^^^^^
246 |
247 |                     if not content:
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:247:1
    |
245 |                         return 0  # unsupported
246 |
247 |                     if not content:
    | ^^^^^^^^^^^^^^^^^^^^
248 |                 pass
249 |                         return 0
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:248:17
    |
247 |                     if not content:
248 |                 pass
    |                 ^^^^
249 |                         return 0
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:249:1
    |
247 |                     if not content:
248 |                 pass
249 |                         return 0
    | ^^^^^^^^^^^^^^^^^^^^^^^^
250 |
251 |                     chunks = (
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:251:1
    |
249 |                         return 0
250 |
251 |                     chunks = (
    | ^^^^^^^^^^^^^^^^^^^^
252 |                         self.emb_mgr.chunk_text(content)
253 |                         if getattr(self.emb_mgr, "chunk_text", None)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:256:1
    |
254 |                         else [content]
255 |                     )
256 |                     if not chunks:
    | ^^^^^^^^^^^^^^^^^^^^
257 |                 pass
258 |                         return 0
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:256:35
    |
254 |                         else [content]
255 |                     )
256 |                     if not chunks:
    |                                   ^
257 |                 pass
258 |                         return 0
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:258:1
    |
256 |                     if not chunks:
257 |                 pass
258 |                         return 0
    | ^^^^^^^^^^^^^^^^^^^^^^^^
259 |
260 |                     if getattr(self.emb_mgr, "add_documents", None):
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:260:1
    |
258 |                         return 0
259 |
260 |                     if getattr(self.emb_mgr, "add_documents", None):
    | ^^^^^^^^^^^^^^^^^^^^
261 |                 pass
262 |                         self.emb_mgr.add_documents(chunks)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:261:17
    |
260 |                     if getattr(self.emb_mgr, "add_documents", None):
261 |                 pass
    |                 ^^^^
262 |                         self.emb_mgr.add_documents(chunks)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:262:1
    |
260 |                     if getattr(self.emb_mgr, "add_documents", None):
261 |                 pass
262 |                         self.emb_mgr.add_documents(chunks)
    | ^^^^^^^^^^^^^^^^^^^^^^^^
263 |
264 |                     summary["files"] += 1
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\indexing.py:264:1
    |
262 |                         self.emb_mgr.add_documents(chunks)
263 |
264 |                     summary["files"] += 1
    | ^^^^^^^^^^^^^^^^^^^^
265 |                     summary["chunks"] += len(chunks)
266 |                     return len(chunks)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:265:1
    |
264 |                     summary["files"] += 1
265 |                     summary["chunks"] += len(chunks)
    | ^^^^^^^^^^^^^^^^^^^^
266 |                     return len(chunks)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:268:17
    |
266 |                     return len(chunks)
267 |
268 |                 safe_call(
    |                 ^
269 |                     do_index_file,
270 |                     error_msg=f"[VaultIndexer] Error indexing {full_path}",
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:273:9
    |
271 |                 )
272 |
273 |         return summary
    |         ^
274 |
275 |     # -------------------
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:279:5
    |
277 |     # -------------------
278 |
279 |     def index_pdf(self, pdf_path: str) -> int:
    |     ^
280 |         """Extract and embed a PDF."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:286:13
    |
284 |             text = self._read_pdf(pdf_path)
285 |             if not text:
286 |             pass
    |             ^^^^
287 |                 return 0
288 |             cache_key = self._hash_url(pdf_path)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:287:1
    |
285 |             if not text:
286 |             pass
287 |                 return 0
    | ^^^^^^^^^^^^^^^^
288 |             cache_key = self._hash_url(pdf_path)
289 |             cached_path = self._cache_file(cache_key, text)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:302:5
    |
300 |     # -------------------
301 |
302 |     def fetch_web_page(self, url: str, force: bool = False) -> Optional[str]:
    |     ^
303 |         """Fetch and sanitize a web page with caching."""
304 |         cache_key = self._hash_url(url)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:308:9
    |
307 |         if cache_path.exists() and not force:
308 |         pass
    |         ^^^^
309 |             def do_read():
310 |                 return cache_path.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:309:1
    |
307 |         if cache_path.exists() and not force:
308 |         pass
309 |             def do_read():
    | ^^^^^^^^^^^^
310 |                 return cache_path.read_text(encoding="utf-8")
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:328:13
    |
326 |             text = soup.get_text(separator=" ", strip=True)
327 |             if text:
328 |             pass
    |             ^^^^
329 |                 self._cache_file(cache_key, text)
330 |                 return text
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:329:1
    |
327 |             if text:
328 |             pass
329 |                 self._cache_file(cache_key, text)
    | ^^^^^^^^^^^^^^^^
330 |                 return text
331 |             return None
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:333:9
    |
331 |             return None
332 |
333 |         return safe_call(
    |         ^
334 |             do_fetch, error_msg=f"[VaultIndexer] Failed to fetch {url}", default=None
335 |         )
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:337:5
    |
335 |         )
336 |
337 |     def index_web_page(self, url: str, force: bool = False) -> int:
    |     ^
338 |         """Fetch and embed a web page."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:343:13
    |
341 |             text = self.fetch_web_page(url, force=force)
342 |             if not text:
343 |             pass
    |             ^^^^
344 |                 return 0
345 |             cache_key = self._hash_url(url)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:344:1
    |
342 |             if not text:
343 |             pass
344 |                 return 0
    | ^^^^^^^^^^^^^^^^
345 |             cache_key = self._hash_url(url)
346 |             cached_path = self._cache_file(cache_key, text)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:355:5
    |
353 |         )
354 |
355 |     def index_web_content(self, url: str) -> Dict[str, Any]:
    |     ^
356 |         """Fetch or load cached web content, chunk it, and add documents.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:365:9
    |
364 |         if not content:
365 |         pass
    |         ^^^^
366 |             return {"url": url, "chunks": 0, "error": "Failed to fetch content"}
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:366:1
    |
364 |         if not content:
365 |         pass
366 |             return {"url": url, "chunks": 0, "error": "Failed to fetch content"}
    | ^^^^^^^^^^^^
367 |
368 |         chunks = (
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:374:9
    |
372 |         )
373 |         if chunks and getattr(self.emb_mgr, "add_documents", None):
374 |         pass
    |         ^^^^
375 |             self.emb_mgr.add_documents(chunks)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:375:1
    |
373 |         if chunks and getattr(self.emb_mgr, "add_documents", None):
374 |         pass
375 |             self.emb_mgr.add_documents(chunks)
    | ^^^^^^^^^^^^
376 |
377 |         return {"url": url, "chunks": len(chunks or [])}
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:377:9
    |
375 |             self.emb_mgr.add_documents(chunks)
376 |
377 |         return {"url": url, "chunks": len(chunks or [])}
    |         ^
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:380:1
    |
380 | class IndexingService:
    | ^
381 |     """
382 |     Wrapper service that manages embeddings and vault indexing.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:392:9
    |
390 |     ):
391 |         if emb_mgr is None:
392 |         pass
    |         ^^^^
393 |             emb_mgr = EmbeddingsManager()
394 |         if cache_dir is None:
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:393:1
    |
391 |         if emb_mgr is None:
392 |         pass
393 |             emb_mgr = EmbeddingsManager()
    | ^^^^^^^^^^^^
394 |         if cache_dir is None:
395 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:395:9
    |
393 |             emb_mgr = EmbeddingsManager()
394 |         if cache_dir is None:
395 |         pass
    |         ^^^^
396 |             try:
397 |                 cache_dir = str(get_settings().abs_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:396:1
    |
394 |         if cache_dir is None:
395 |         pass
396 |             try:
    | ^^^^^^^^^^^^
397 |                 cache_dir = str(get_settings().abs_cache_dir)
398 |             except Exception:
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\indexing.py:399:13
    |
397 |                 cache_dir = str(get_settings().abs_cache_dir)
398 |             except Exception:
399 |             pass
    |             ^^^^
400 |                 cache_dir = "backend/cache"
401 |         self.emb_mgr = emb_mgr
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:400:1
    |
398 |             except Exception:
399 |             pass
400 |                 cache_dir = "backend/cache"
    | ^^^^^^^^^^^^^^^^
401 |         self.emb_mgr = emb_mgr
402 |         self.vault_indexer = VaultIndexer(emb_mgr=self.emb_mgr, cache_dir=cache_dir)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:401:9
    |
399 |             pass
400 |                 cache_dir = "backend/cache"
401 |         self.emb_mgr = emb_mgr
    |         ^
402 |         self.vault_indexer = VaultIndexer(emb_mgr=self.emb_mgr, cache_dir=cache_dir)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:404:5
    |
402 |         self.vault_indexer = VaultIndexer(emb_mgr=self.emb_mgr, cache_dir=cache_dir)
403 |
404 |     def index_file(self, file_path: str) -> int:
    |     ^
405 |         return self.vault_indexer.index_file(file_path)
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\indexing.py:426:9
    |
424 |         """
425 |         try:
426 |         pass
    |         ^^^^
427 |             from .embeddings import EmbeddingsManager as _EM
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:427:1
    |
425 |         try:
426 |         pass
427 |             from .embeddings import EmbeddingsManager as _EM
    | ^^^^^^^^^^^^
428 |
429 |             emb = getattr(_EM, "from_settings", None)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\indexing.py:431:13
    |
429 |             emb = getattr(_EM, "from_settings", None)
430 |             if callable(emb):
431 |             pass
    |             ^^^^
432 |                 emb_mgr = emb()
433 |             else:
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:432:1
    |
430 |             if callable(emb):
431 |             pass
432 |                 emb_mgr = emb()
    | ^^^^^^^^^^^^^^^^
433 |             else:
434 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:433:13
    |
431 |             pass
432 |                 emb_mgr = emb()
433 |             else:
    |             ^^^^
434 |             pass
435 |                 emb_mgr = _EM()
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:433:17
    |
431 |             pass
432 |                 emb_mgr = emb()
433 |             else:
    |                 ^
434 |             pass
435 |                 emb_mgr = _EM()
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:433:18
    |
431 |             pass
432 |                 emb_mgr = emb()
433 |             else:
    |                  ^
434 |             pass
435 |                 emb_mgr = _EM()
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:435:1
    |
433 |             else:
434 |             pass
435 |                 emb_mgr = _EM()
    | ^^^^^^^^^^^^^^^^
436 |         except Exception:
437 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:436:9
    |
434 |             pass
435 |                 emb_mgr = _EM()
436 |         except Exception:
    |         ^
437 |         pass
438 |             emb_mgr = EmbeddingsManager()
    |

invalid-syntax: Expected an expression
   --> backend\indexing.py:436:26
    |
434 |             pass
435 |                 emb_mgr = _EM()
436 |         except Exception:
    |                          ^
437 |         pass
438 |             emb_mgr = EmbeddingsManager()
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:438:1
    |
436 |         except Exception:
437 |         pass
438 |             emb_mgr = EmbeddingsManager()
    | ^^^^^^^^^^^^
439 |         try:
440 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:439:9
    |
437 |         pass
438 |             emb_mgr = EmbeddingsManager()
439 |         try:
    |         ^
440 |         pass
441 |             cache_dir = str(get_settings().abs_cache_dir)
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\indexing.py:440:9
    |
438 |             emb_mgr = EmbeddingsManager()
439 |         try:
440 |         pass
    |         ^^^^
441 |             cache_dir = str(get_settings().abs_cache_dir)
442 |         except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:441:1
    |
439 |         try:
440 |         pass
441 |             cache_dir = str(get_settings().abs_cache_dir)
    | ^^^^^^^^^^^^
442 |         except Exception:
443 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:442:9
    |
440 |         pass
441 |             cache_dir = str(get_settings().abs_cache_dir)
442 |         except Exception:
    |         ^
443 |         pass
444 |             cache_dir = "backend/cache"
    |

invalid-syntax: Expected an expression
   --> backend\indexing.py:442:26
    |
440 |         pass
441 |             cache_dir = str(get_settings().abs_cache_dir)
442 |         except Exception:
    |                          ^
443 |         pass
444 |             cache_dir = "backend/cache"
    |

invalid-syntax: Unexpected indentation
   --> backend\indexing.py:444:1
    |
442 |         except Exception:
443 |         pass
444 |             cache_dir = "backend/cache"
    | ^^^^^^^^^^^^
445 |         return cls(emb_mgr=emb_mgr, cache_dir=cache_dir)
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:445:9
    |
443 |         pass
444 |             cache_dir = "backend/cache"
445 |         return cls(emb_mgr=emb_mgr, cache_dir=cache_dir)
    |         ^
    |

invalid-syntax: Expected a statement
   --> backend\indexing.py:446:1
    |
444 |             cache_dir = "backend/cache"
445 |         return cls(emb_mgr=emb_mgr, cache_dir=cache_dir)
    |                                                         ^
    |

invalid-syntax: Expected an indented block after function definition
  --> backend\llm_router.py:54:9
   |
52 |         # Load LLaMA with error boundary
53 |         def do_load_llama():
54 |         pass
   |         ^^^^
55 |             if Llama and os.path.exists(llama_model_path):
56 |                 return Llama(model_path=llama_model_path, n_ctx=2048, n_threads=4)
   |

invalid-syntax: Unexpected indentation
  --> backend\llm_router.py:55:1
   |
53 |         def do_load_llama():
54 |         pass
55 |             if Llama and os.path.exists(llama_model_path):
   | ^^^^^^^^^^^^
56 |                 return Llama(model_path=llama_model_path, n_ctx=2048, n_threads=4)
57 |             return None
   |

invalid-syntax: Expected an indented block after function definition
  --> backend\llm_router.py:67:9
   |
65 |         # Load GPT4All with error boundary
66 |         def do_load_gpt4all():
67 |         pass
   |         ^^^^
68 |             if GPT4All and os.path.exists(gpt4all_model_path):
69 |                 return GPT4All(model_name=gpt4all_model_path)
   |

invalid-syntax: Unexpected indentation
  --> backend\llm_router.py:68:1
   |
66 |         def do_load_gpt4all():
67 |         pass
68 |             if GPT4All and os.path.exists(gpt4all_model_path):
   | ^^^^^^^^^^^^
69 |                 return GPT4All(model_name=gpt4all_model_path)
70 |             return None
   |

invalid-syntax: Expected a statement
  --> backend\llm_router.py:81:5
   |
79 |     # Memory Handling
80 |     # -------------------
81 |     def add_to_memory(self, role: str, content: str):
   |     ^
82 |         if not self.session_memory:
83 |         pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\llm_router.py:83:9
   |
81 |     def add_to_memory(self, role: str, content: str):
82 |         if not self.session_memory:
83 |         pass
   |         ^^^^
84 |             return
85 |         self.memory.append({"role": role, "content": content})
   |

invalid-syntax: Unexpected indentation
  --> backend\llm_router.py:84:1
   |
82 |         if not self.session_memory:
83 |         pass
84 |             return
   | ^^^^^^^^^^^^
85 |         self.memory.append({"role": role, "content": content})
86 |         if len(self.memory) > self.memory_limit:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\llm_router.py:87:9
   |
85 |         self.memory.append({"role": role, "content": content})
86 |         if len(self.memory) > self.memory_limit:
87 |         pass
   |         ^^^^
88 |             self.memory.pop(0)
   |

invalid-syntax: Unexpected indentation
  --> backend\llm_router.py:88:1
   |
86 |         if len(self.memory) > self.memory_limit:
87 |         pass
88 |             self.memory.pop(0)
   | ^^^^^^^^^^^^
89 |
90 |     def build_context(self, prompt: str, extra_context: Optional[str] = None) -> str:
   |

invalid-syntax: Expected a statement
  --> backend\llm_router.py:90:5
   |
88 |             self.memory.pop(0)
89 |
90 |     def build_context(self, prompt: str, extra_context: Optional[str] = None) -> str:
   |     ^
91 |         base = prompt if not extra_context else f"{extra_context}\n{prompt}"
92 |         if not self.session_memory or not self.memory:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\llm_router.py:93:9
   |
91 |         base = prompt if not extra_context else f"{extra_context}\n{prompt}"
92 |         if not self.session_memory or not self.memory:
93 |         pass
   |         ^^^^
94 |             return base
95 |         memory_str = "\n".join([f"{m['role']}: {m['content']}" for m in self.memory])
   |

invalid-syntax: Unexpected indentation
  --> backend\llm_router.py:94:1
   |
92 |         if not self.session_memory or not self.memory:
93 |         pass
94 |             return base
   | ^^^^^^^^^^^^
95 |         memory_str = "\n".join([f"{m['role']}: {m['content']}" for m in self.memory])
96 |         return f"{memory_str}\nUser: {base}"
   |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:101:5
    |
 99 |     # Model Selection
100 |     # -------------------
101 |     def choose_model(self, prompt: str, prefer_fast: Optional[bool] = None) -> str:
    |     ^
102 |         pf = self.prefer_fast if prefer_fast is None else prefer_fast
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:105:9
    |
104 |         if pf:
105 |         pass
    |         ^^^^
106 |             # Prefer llama when fast responses are requested if it's available
107 |             # (or can be lazily created)
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:108:1
    |
106 |             # Prefer llama when fast responses are requested if it's available
107 |             # (or can be lazily created)
108 |             if Llama is not None:
    | ^^^^^^^^^^^^
109 |             pass
110 |                 return "llama"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:109:13
    |
107 |             # (or can be lazily created)
108 |             if Llama is not None:
109 |             pass
    |             ^^^^
110 |                 return "llama"
111 |         else:
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:110:1
    |
108 |             if Llama is not None:
109 |             pass
110 |                 return "llama"
    | ^^^^^^^^^^^^^^^^
111 |         else:
112 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:111:9
    |
109 |             pass
110 |                 return "llama"
111 |         else:
    |         ^
112 |         pass
113 |             # When not preferring fast, lean toward GPT4All if available
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:111:13
    |
109 |             pass
110 |                 return "llama"
111 |         else:
    |             ^
112 |         pass
113 |             # When not preferring fast, lean toward GPT4All if available
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:111:14
    |
109 |             pass
110 |                 return "llama"
111 |         else:
    |              ^
112 |         pass
113 |             # When not preferring fast, lean toward GPT4All if available
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:114:1
    |
112 |         pass
113 |             # When not preferring fast, lean toward GPT4All if available
114 |             if GPT4All is not None:
    | ^^^^^^^^^^^^
115 |             pass
116 |                 return "gpt4all"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:115:13
    |
113 |             # When not preferring fast, lean toward GPT4All if available
114 |             if GPT4All is not None:
115 |             pass
    |             ^^^^
116 |                 return "gpt4all"
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:116:1
    |
114 |             if GPT4All is not None:
115 |             pass
116 |                 return "gpt4all"
    | ^^^^^^^^^^^^^^^^
117 |
118 |         # Heuristic based on prompt length if explicit preference didn't decide
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:119:9
    |
118 |         # Heuristic based on prompt length if explicit preference didn't decide
119 |         if len(prompt.split()) > 30 and GPT4All is not None:
    |         ^
120 |         pass
121 |             return "gpt4all"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:120:9
    |
118 |         # Heuristic based on prompt length if explicit preference didn't decide
119 |         if len(prompt.split()) > 30 and GPT4All is not None:
120 |         pass
    |         ^^^^
121 |             return "gpt4all"
122 |         # Fallbacks
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:121:1
    |
119 |         if len(prompt.split()) > 30 and GPT4All is not None:
120 |         pass
121 |             return "gpt4all"
    | ^^^^^^^^^^^^
122 |         # Fallbacks
123 |         if Llama is not None:
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:123:9
    |
121 |             return "gpt4all"
122 |         # Fallbacks
123 |         if Llama is not None:
    |         ^
124 |         pass
125 |             return "llama"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:124:9
    |
122 |         # Fallbacks
123 |         if Llama is not None:
124 |         pass
    |         ^^^^
125 |             return "llama"
126 |         if GPT4All is not None:
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:125:1
    |
123 |         if Llama is not None:
124 |         pass
125 |             return "llama"
    | ^^^^^^^^^^^^
126 |         if GPT4All is not None:
127 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:126:9
    |
124 |         pass
125 |             return "llama"
126 |         if GPT4All is not None:
    |         ^
127 |         pass
128 |             return "gpt4all"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:127:9
    |
125 |             return "llama"
126 |         if GPT4All is not None:
127 |         pass
    |         ^^^^
128 |             return "gpt4all"
129 |         return "llama"  # Default fallback
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:128:1
    |
126 |         if GPT4All is not None:
127 |         pass
128 |             return "gpt4all"
    | ^^^^^^^^^^^^
129 |         return "llama"  # Default fallback
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:129:9
    |
127 |         pass
128 |             return "gpt4all"
129 |         return "llama"  # Default fallback
    |         ^
130 |
131 |     # -------------------
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:134:5
    |
132 |     # Generation
133 |     # -------------------
134 |     def _invoke_llama(self, prompt: str, max_tokens: int) -> str:
    |     ^
135 |         """Invoke the LLaMA model."""
136 |     # This complex logic accommodates unittest.mock behavior in tests.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:139:9
    |
137 |     # A cleaner future approach might be a dedicated, patchable method.
138 |         if callable(self.llama):
139 |         pass
    |         ^^^^
140 |             # Honor a mocked side_effect if present in tests
141 |             _side_effect = getattr(self.llama, "side_effect", None)
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:141:1
    |
139 |         pass
140 |             # Honor a mocked side_effect if present in tests
141 |             _side_effect = getattr(self.llama, "side_effect", None)
    | ^^^^^^^^^^^^
142 |             if _side_effect:
143 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:143:13
    |
141 |             _side_effect = getattr(self.llama, "side_effect", None)
142 |             if _side_effect:
143 |             pass
    |             ^^^^
144 |                 raise _side_effect
145 |             output = self.llama(
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:144:1
    |
142 |             if _side_effect:
143 |             pass
144 |                 raise _side_effect
    | ^^^^^^^^^^^^^^^^
145 |             output = self.llama(
146 |                 prompt=prompt,
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:151:9
    |
149 |             )
150 |             return output["choices"][0]["text"].strip()
151 |         output = self.llama(
    |         ^
152 |             prompt=prompt,
153 |             max_tokens=max_tokens,
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:158:5
    |
156 |         return output["choices"][0]["text"].strip()
157 |
158 |     def _invoke_gpt4all(self, prompt: str, max_tokens: int) -> str:
    |     ^
159 |         """Invoke the GPT4All model."""
160 |         return self.gpt4all.generate(prompt, max_tokens=max_tokens)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:177:13
    |
175 |             # Try lazy instantiation if class is available but instance missing
176 |             if model_choice == "gpt4all" and self.gpt4all is None and GPT4All:
177 |             pass
    |             ^^^^
178 |                 self.gpt4all = GPT4All(model_name=self._gpt4all_model_path)
179 |             if model_choice == "llama" and self.llama is None and Llama:
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:178:1
    |
176 |             if model_choice == "gpt4all" and self.gpt4all is None and GPT4All:
177 |             pass
178 |                 self.gpt4all = GPT4All(model_name=self._gpt4all_model_path)
    | ^^^^^^^^^^^^^^^^
179 |             if model_choice == "llama" and self.llama is None and Llama:
180 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:180:13
    |
178 |                 self.gpt4all = GPT4All(model_name=self._gpt4all_model_path)
179 |             if model_choice == "llama" and self.llama is None and Llama:
180 |             pass
    |             ^^^^
181 |                 self.llama = Llama(
182 |                     model_path=self._llama_model_path, n_ctx=2048, n_threads=4
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:181:1
    |
179 |             if model_choice == "llama" and self.llama is None and Llama:
180 |             pass
181 |                 self.llama = Llama(
    | ^^^^^^^^^^^^^^^^
182 |                     model_path=self._llama_model_path, n_ctx=2048, n_threads=4
183 |                 )
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\llm_router.py:186:13
    |
185 |             if model_choice == "llama" and self.llama:
186 |             pass
    |             ^^^^
187 |                 return self._invoke_llama(full_context, max_tokens)
188 |             elif model_choice == "gpt4all" and self.gpt4all:
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:187:1
    |
185 |             if model_choice == "llama" and self.llama:
186 |             pass
187 |                 return self._invoke_llama(full_context, max_tokens)
    | ^^^^^^^^^^^^^^^^
188 |             elif model_choice == "gpt4all" and self.gpt4all:
189 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:188:13
    |
186 |             pass
187 |                 return self._invoke_llama(full_context, max_tokens)
188 |             elif model_choice == "gpt4all" and self.gpt4all:
    |             ^
189 |             pass
190 |                 return self._invoke_gpt4all(full_context, max_tokens)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\llm_router.py:188:18
    |
186 |             pass
187 |                 return self._invoke_llama(full_context, max_tokens)
188 |             elif model_choice == "gpt4all" and self.gpt4all:
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
189 |             pass
190 |                 return self._invoke_gpt4all(full_context, max_tokens)
    |

invalid-syntax: Expected an expression
   --> backend\llm_router.py:188:61
    |
186 |             pass
187 |                 return self._invoke_llama(full_context, max_tokens)
188 |             elif model_choice == "gpt4all" and self.gpt4all:
    |                                                             ^
189 |             pass
190 |                 return self._invoke_gpt4all(full_context, max_tokens)
    |

invalid-syntax: Unexpected indentation
   --> backend\llm_router.py:190:1
    |
188 |             elif model_choice == "gpt4all" and self.gpt4all:
189 |             pass
190 |                 return self._invoke_gpt4all(full_context, max_tokens)
    | ^^^^^^^^^^^^^^^^
191 |
192 |             return "No model available."
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:192:13
    |
190 |                 return self._invoke_gpt4all(full_context, max_tokens)
191 |
192 |             return "No model available."
    |             ^
193 |
194 |         text = safe_call(
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:194:9
    |
192 |             return "No model available."
193 |
194 |         text = safe_call(
    |         ^
195 |             do_generate,
196 |             error_msg="[HybridLLMRouter] Error during generation",
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:207:5
    |
205 |     # Introspection helpers for tests
206 |     # -------------------
207 |     def get_available_models(self) -> Dict[str, bool]:
    |     ^
208 |         pass
209 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\llm_router.py:216:1
    |
214 |     def clear_memory(self):
215 |         self.memory.clear()
    |                            ^
    |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\modelmanager.py:37:9
   |
35 |         env_path = Path(env_file)
36 |         if env_path.exists():
37 |         pass
   |         ^^^^
38 |             load_dotenv(env_path)
39 |         else:
   |

invalid-syntax: Unexpected indentation
  --> backend\modelmanager.py:38:1
   |
36 |         if env_path.exists():
37 |         pass
38 |             load_dotenv(env_path)
   | ^^^^^^^^^^^^
39 |         else:
40 |         pass
   |

invalid-syntax: Expected a statement
  --> backend\modelmanager.py:39:9
   |
37 |         pass
38 |             load_dotenv(env_path)
39 |         else:
   |         ^^^^
40 |         pass
41 |             print(
   |

invalid-syntax: Expected a statement
  --> backend\modelmanager.py:39:13
   |
37 |         pass
38 |             load_dotenv(env_path)
39 |         else:
   |             ^
40 |         pass
41 |             print(
   |

invalid-syntax: Expected a statement
  --> backend\modelmanager.py:39:14
   |
37 |         pass
38 |             load_dotenv(env_path)
39 |         else:
   |              ^
40 |         pass
41 |             print(
   |

invalid-syntax: Unexpected indentation
  --> backend\modelmanager.py:41:1
   |
39 |         else:
40 |         pass
41 |             print(
   | ^^^^^^^^^^^^
42 |                 f"[ModelManager] Warning: {env_file} not found, relying on system env vars."
43 |             )
   |

E501 Line too long (92 > 88)
  --> backend\modelmanager.py:42:89
   |
40 |         pass
41 |             print(
42 |                 f"[ModelManager] Warning: {env_file} not found, relying on system env vars."
   |                                                                                         ^^^^
43 |             )
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\modelmanager.py:52:9
   |
50 |         self.hf_token = hf_token or os.getenv("HF_TOKEN")
51 |         if self.hf_token:
52 |         pass
   |         ^^^^
53 |             try:
54 |                 huggingface_hub.login(token=self.hf_token)
   |

invalid-syntax: Unexpected indentation
  --> backend\modelmanager.py:53:1
   |
51 |         if self.hf_token:
52 |         pass
53 |             try:
   | ^^^^^^^^^^^^
54 |                 huggingface_hub.login(token=self.hf_token)
55 |             except Exception:
   |

invalid-syntax: Expected an indented block after `except` clause
  --> backend\modelmanager.py:56:13
   |
54 |                 huggingface_hub.login(token=self.hf_token)
55 |             except Exception:
56 |             pass
   |             ^^^^
57 |                 # Allow tests to proceed even if login fails
58 |         else:
   |

invalid-syntax: Expected a statement
  --> backend\modelmanager.py:58:9
   |
56 |             pass
57 |                 # Allow tests to proceed even if login fails
58 |         else:
   |         ^
59 |         pass
60 |             print(
   |

invalid-syntax: Expected a statement
  --> backend\modelmanager.py:58:13
   |
56 |             pass
57 |                 # Allow tests to proceed even if login fails
58 |         else:
   |             ^
59 |         pass
60 |             print(
   |

invalid-syntax: Expected a statement
  --> backend\modelmanager.py:58:14
   |
56 |             pass
57 |                 # Allow tests to proceed even if login fails
58 |         else:
   |              ^
59 |         pass
60 |             print(
   |

invalid-syntax: Unexpected indentation
  --> backend\modelmanager.py:60:1
   |
58 |         else:
59 |         pass
60 |             print(
   | ^^^^^^^^^^^^
61 |                 "[ModelManager] Warning: No Hugging Face token provided or found in environment!"
62 |             )
   |

E501 Line too long (97 > 88)
  --> backend\modelmanager.py:61:89
   |
59 |         pass
60 |             print(
61 |                 "[ModelManager] Warning: No Hugging Face token provided or found in environment!"
   |                                                                                         ^^^^^^^^^
62 |             )
   |

invalid-syntax: Expected a statement
  --> backend\modelmanager.py:65:9
   |
64 |         # Models directory
65 |         self.models_dir = models_dir
   |         ^
66 |         Path(self.models_dir).mkdir(exist_ok=True)
67 |         self.loaded_models = {}
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\modelmanager.py:78:9
   |
76 |         # Minimal working set optimized for NVIDIA GeForce GT 1030 (2GB VRAM)
77 |         if minimal_models is None:
78 |         pass
   |         ^^^^
79 |             # Select lightweight, quantized models suitable for low-end GPU
80 |             minimal_models = [
   |

invalid-syntax: Unexpected indentation
  --> backend\modelmanager.py:80:1
   |
78 |         pass
79 |             # Select lightweight, quantized models suitable for low-end GPU
80 |             minimal_models = [
   | ^^^^^^^^^^^^
81 |                 "deepseek-ai/Janus-Pro-1B",  # 1B params - very lightweight
82 |                 "unsloth/Qwen2.5-Omni-3B-GGUF",  # 3B quantized - good balance
   |

invalid-syntax: Expected a statement
  --> backend\modelmanager.py:85:9
   |
83 |                 "ggml-org/Qwen2.5-Omni-3B-GGUF",  # Alternative 3B GGUF format
84 |             ]
85 |         self._minimal_models = minimal_models
   |         ^
86 |
87 |         # Download minimal working set on init (unless disabled)
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\modelmanager.py:94:9
   |
92 |             "on",
93 |         }:
94 |         pass
   |         ^^^^
95 |             self._download_minimal_models()
   |

invalid-syntax: Unexpected indentation
  --> backend\modelmanager.py:95:1
   |
93 |         }:
94 |         pass
95 |             self._download_minimal_models()
   | ^^^^^^^^^^^^
96 |
97 |         # Check for newer models once per day
   |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:98:9
    |
 97 |         # Check for newer models once per day
 98 |         self._check_and_update_models()
    |         ^
 99 |
100 |         # Dynamically discover local models by file extension
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:103:9
    |
101 |         models_path = Path(self.models_dir)
102 |         if models_path.exists() and models_path.is_dir():
103 |         pass
    |         ^^^^
104 |             for model_file in models_path.rglob("*"):
105 |                 if model_file.is_file() and model_file.suffix in {".bin", ".gguf"}:
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:104:1
    |
102 |         if models_path.exists() and models_path.is_dir():
103 |         pass
104 |             for model_file in models_path.rglob("*"):
    | ^^^^^^^^^^^^
105 |                 if model_file.is_file() and model_file.suffix in {".bin", ".gguf"}:
106 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:105:84
    |
103 |         pass
104 |             for model_file in models_path.rglob("*"):
105 |                 if model_file.is_file() and model_file.suffix in {".bin", ".gguf"}:
    |                                                                                    ^
106 |             pass
107 |                     model_key = model_file.stem.lower()
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:107:1
    |
105 |                 if model_file.is_file() and model_file.suffix in {".bin", ".gguf"}:
106 |             pass
107 |                     model_key = model_file.stem.lower()
    | ^^^^^^^^^^^^^^^^^^^^
108 |                     if model_key not in self.available_models:
109 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\modelmanager.py:109:1
    |
107 |                     model_key = model_file.stem.lower()
108 |                     if model_key not in self.available_models:
109 |                 pass
    | ^^^^^^^^^^^^^^^^
110 |                         self.available_models[model_key] = f"local:{model_file.name}"
111 |         # Initialize LLM router for tests that expect it on init
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:110:1
    |
108 |                     if model_key not in self.available_models:
109 |                 pass
110 |                         self.available_models[model_key] = f"local:{model_file.name}"
    | ^^^^^^^^^^^^^^^^^^^^^^^^
111 |         # Initialize LLM router for tests that expect it on init
112 |         try:
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:112:9
    |
110 |                         self.available_models[model_key] = f"local:{model_file.name}"
111 |         # Initialize LLM router for tests that expect it on init
112 |         try:
    |         ^
113 |         pass
114 |             self.llm_router = HybridLLMRouter()
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\modelmanager.py:113:9
    |
111 |         # Initialize LLM router for tests that expect it on init
112 |         try:
113 |         pass
    |         ^^^^
114 |             self.llm_router = HybridLLMRouter()
115 |         except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:114:1
    |
112 |         try:
113 |         pass
114 |             self.llm_router = HybridLLMRouter()
    | ^^^^^^^^^^^^
115 |         except Exception:
116 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:115:9
    |
113 |         pass
114 |             self.llm_router = HybridLLMRouter()
115 |         except Exception:
    |         ^
116 |         pass
117 |             self.llm_router = None
    |

invalid-syntax: Expected an expression
   --> backend\modelmanager.py:115:26
    |
113 |         pass
114 |             self.llm_router = HybridLLMRouter()
115 |         except Exception:
    |                          ^
116 |         pass
117 |             self.llm_router = None
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:117:1
    |
115 |         except Exception:
116 |         pass
117 |             self.llm_router = None
    | ^^^^^^^^^^^^
118 |
119 |         # Default model
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:120:9
    |
119 |         # Default model
120 |         self.default_model = default_model
    |         ^
121 |         # Store the original default for test compatibility
122 |         self._original_default = default_model
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:124:9
    |
122 |         self._original_default = default_model
123 |         if self.default_model not in self.available_models:
124 |         pass
    |         ^^^^
125 |             if self.available_models:
126 |                 # For tests, preserve original default if it's explicitly set and non-default
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:125:1
    |
123 |         if self.default_model not in self.available_models:
124 |         pass
125 |             if self.available_models:
    | ^^^^^^^^^^^^
126 |                 # For tests, preserve original default if it's explicitly set and non-default
127 |                 if (
    |

E501 Line too long (93 > 88)
   --> backend\modelmanager.py:126:89
    |
124 |         pass
125 |             if self.available_models:
126 |                 # For tests, preserve original default if it's explicitly set and non-default
    |                                                                                         ^^^^^
127 |                 if (
128 |                     default_model != "gpt4all-lora"
    |

E501 Line too long (109 > 88)
   --> backend\modelmanager.py:131:89
    |
129 |                 ):  # Only fallback for actual default, not test values
130 |                     print(
131 |                         f"[ModelManager] Default model '{default_model}' not found, but preserving for tests"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^
132 |                     )
133 |                 else:
    |

invalid-syntax: Expected an indented block after `else` clause
   --> backend\modelmanager.py:133:22
    |
131 |                         f"[ModelManager] Default model '{default_model}' not found, but preserving for tests"
132 |                     )
133 |                 else:
    |                      ^
134 |             pass
135 |                     self.default_model = next(iter(self.available_models))
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:135:1
    |
133 |                 else:
134 |             pass
135 |                     self.default_model = next(iter(self.available_models))
    | ^^^^^^^^^^^^^^^^^^^^
136 |                     print(
137 |                         f"[ModelManager] Default model not found. Using: {self.default_model}"
    |

E501 Line too long (94 > 88)
   --> backend\modelmanager.py:137:89
    |
135 |                     self.default_model = next(iter(self.available_models))
136 |                     print(
137 |                         f"[ModelManager] Default model not found. Using: {self.default_model}"
    |                                                                                         ^^^^^^
138 |                     )
139 |             else:
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:139:13
    |
137 |                         f"[ModelManager] Default model not found. Using: {self.default_model}"
138 |                     )
139 |             else:
    |             ^
140 |             pass
141 |                 # Keep provided default even if not in available list to satisfy tests
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:139:17
    |
137 |                         f"[ModelManager] Default model not found. Using: {self.default_model}"
138 |                     )
139 |             else:
    |                 ^
140 |             pass
141 |                 # Keep provided default even if not in available list to satisfy tests
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:139:18
    |
137 |                         f"[ModelManager] Default model not found. Using: {self.default_model}"
138 |                     )
139 |             else:
    |                  ^
140 |             pass
141 |                 # Keep provided default even if not in available list to satisfy tests
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:144:5
    |
142 |                 # This default can be used to initialize a router without model files
143 |
144 |     def _download_minimal_models(self):
    |     ^
145 |         pass
146 |         for model in self._minimal_models:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\modelmanager.py:150:13
    |
148 |             self._automated_download = True
149 |             try:
150 |             pass
    |             ^^^^
151 |                 self.download_model(model, revision="latest")
152 |             except Exception as e:
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:151:1
    |
149 |             try:
150 |             pass
151 |                 self.download_model(model, revision="latest")
    | ^^^^^^^^^^^^^^^^
152 |             except Exception as e:
153 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:152:13
    |
150 |             pass
151 |                 self.download_model(model, revision="latest")
152 |             except Exception as e:
    |             ^^^^^^
153 |             pass
154 |                 import logging
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:152:30
    |
150 |             pass
151 |                 self.download_model(model, revision="latest")
152 |             except Exception as e:
    |                              ^^
153 |             pass
154 |                 import logging
    |

invalid-syntax: Expected an expression
   --> backend\modelmanager.py:152:35
    |
150 |             pass
151 |                 self.download_model(model, revision="latest")
152 |             except Exception as e:
    |                                   ^
153 |             pass
154 |                 import logging
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:154:1
    |
152 |             except Exception as e:
153 |             pass
154 |                 import logging
    | ^^^^^^^^^^^^^^^^
155 |
156 |                 logging.error(f"Failed to download minimal model {model}: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:157:13
    |
156 |                 logging.error(f"Failed to download minimal model {model}: {e}")
157 |             finally:
    |             ^^^^^^^
158 |             pass
159 |                 if hasattr(self, "_automated_download"):
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:157:20
    |
156 |                 logging.error(f"Failed to download minimal model {model}: {e}")
157 |             finally:
    |                    ^
158 |             pass
159 |                 if hasattr(self, "_automated_download"):
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:157:21
    |
156 |                 logging.error(f"Failed to download minimal model {model}: {e}")
157 |             finally:
    |                     ^
158 |             pass
159 |                 if hasattr(self, "_automated_download"):
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:159:1
    |
157 |             finally:
158 |             pass
159 |                 if hasattr(self, "_automated_download"):
    | ^^^^^^^^^^^^^^^^
160 |                     delattr(self, "_automated_download")
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:162:5
    |
160 |                     delattr(self, "_automated_download")
161 |
162 |     def _check_and_update_models(self):
    |     ^
163 |         import time
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:168:9
    |
166 |         last_check = 0
167 |         if self._last_model_check_file.exists():
168 |         pass
    |         ^^^^
169 |             try:
170 |                 last_check = float(self._last_model_check_file.read_text())
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:169:1
    |
167 |         if self._last_model_check_file.exists():
168 |         pass
169 |             try:
    | ^^^^^^^^^^^^
170 |                 last_check = float(self._last_model_check_file.read_text())
171 |             except Exception:
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\modelmanager.py:172:13
    |
170 |                 last_check = float(self._last_model_check_file.read_text())
171 |             except Exception:
172 |             pass
    |             ^^^^
173 |                 last_check = 0
174 |         # If it's been more than check_interval_hours, check for updates
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:173:1
    |
171 |             except Exception:
172 |             pass
173 |                 last_check = 0
    | ^^^^^^^^^^^^^^^^
174 |         # If it's been more than check_interval_hours, check for updates
175 |         if now - last_check > self._check_interval_hours * 3600:
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:175:9
    |
173 |                 last_check = 0
174 |         # If it's been more than check_interval_hours, check for updates
175 |         if now - last_check > self._check_interval_hours * 3600:
    |         ^
176 |         pass
177 |             if str(os.getenv("SKIP_MODEL_DOWNLOADS", "0")).lower() not in {
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:176:9
    |
174 |         # If it's been more than check_interval_hours, check for updates
175 |         if now - last_check > self._check_interval_hours * 3600:
176 |         pass
    |         ^^^^
177 |             if str(os.getenv("SKIP_MODEL_DOWNLOADS", "0")).lower() not in {
178 |                 "1",
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:177:1
    |
175 |         if now - last_check > self._check_interval_hours * 3600:
176 |         pass
177 |             if str(os.getenv("SKIP_MODEL_DOWNLOADS", "0")).lower() not in {
    | ^^^^^^^^^^^^
178 |                 "1",
179 |                 "true",
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:186:5
    |
184 |             self._last_model_check_file.write_text(str(now))
185 |
186 |     def _update_models(self):
    |     ^
187 |         # For each model, check for newer revision and download if available
188 |         for _, model in self.available_models.items():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\modelmanager.py:189:9
    |
187 |         # For each model, check for newer revision and download if available
188 |         for _, model in self.available_models.items():
189 |         pass
    |         ^^^^
190 |             # Mark as automated download to bypass strict revision checking
191 |             self._automated_download = True
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:191:1
    |
189 |         pass
190 |             # Mark as automated download to bypass strict revision checking
191 |             self._automated_download = True
    | ^^^^^^^^^^^^
192 |             try:
193 |             pass
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\modelmanager.py:193:13
    |
191 |             self._automated_download = True
192 |             try:
193 |             pass
    |             ^^^^
194 |                 # In production, query Hugging Face for latest revision
195 |                 self.download_model(model, revision="latest")
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:195:1
    |
193 |             pass
194 |                 # In production, query Hugging Face for latest revision
195 |                 self.download_model(model, revision="latest")
    | ^^^^^^^^^^^^^^^^
196 |             except Exception as e:
197 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:196:13
    |
194 |                 # In production, query Hugging Face for latest revision
195 |                 self.download_model(model, revision="latest")
196 |             except Exception as e:
    |             ^^^^^^
197 |         pass
198 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:196:30
    |
194 |                 # In production, query Hugging Face for latest revision
195 |                 self.download_model(model, revision="latest")
196 |             except Exception as e:
    |                              ^^
197 |         pass
198 |             pass
    |

invalid-syntax: Expected an expression
   --> backend\modelmanager.py:196:35
    |
194 |                 # In production, query Hugging Face for latest revision
195 |                 self.download_model(model, revision="latest")
196 |             except Exception as e:
    |                                   ^
197 |         pass
198 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:197:9
    |
195 |                 self.download_model(model, revision="latest")
196 |             except Exception as e:
197 |         pass
    |         ^
198 |             pass
199 |                 import logging
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:198:1
    |
196 |             except Exception as e:
197 |         pass
198 |             pass
    | ^^^^^^^^^^^^
199 |                 import logging
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:199:1
    |
197 |         pass
198 |             pass
199 |                 import logging
    | ^^^^^^^^^^^^^^^^
200 |
201 |                 logging.error(f"Failed to update model {model}: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:202:13
    |
201 |                 logging.error(f"Failed to update model {model}: {e}")
202 |             finally:
    |             ^
203 |             pass
204 |                 if hasattr(self, "_automated_download"):
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:202:20
    |
201 |                 logging.error(f"Failed to update model {model}: {e}")
202 |             finally:
    |                    ^
203 |             pass
204 |                 if hasattr(self, "_automated_download"):
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:202:21
    |
201 |                 logging.error(f"Failed to update model {model}: {e}")
202 |             finally:
    |                     ^
203 |             pass
204 |                 if hasattr(self, "_automated_download"):
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:204:1
    |
202 |             finally:
203 |             pass
204 |                 if hasattr(self, "_automated_download"):
    | ^^^^^^^^^^^^^^^^
205 |                     delattr(self, "_automated_download")
206 |         # Optionally, remove older versions and keep only the most recent
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:209:5
    |
207 |         # (Implementation depends on model storage format)
208 |
209 |     def _load_models_file(self, models_file: str):
    |     ^
210 |         models_path = Path(models_file)
211 |         # Ensure parent directory exists if a nested path is provided
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\modelmanager.py:213:9
    |
211 |         # Ensure parent directory exists if a nested path is provided
212 |         try:
213 |         pass
    |         ^^^^
214 |             if models_path.parent and str(models_path.parent) not in ("", "."):
215 |                 models_path.parent.mkdir(parents=True, exist_ok=True)
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:214:1
    |
212 |         try:
213 |         pass
214 |             if models_path.parent and str(models_path.parent) not in ("", "."):
    | ^^^^^^^^^^^^
215 |                 models_path.parent.mkdir(parents=True, exist_ok=True)
216 |         except Exception:
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:216:9
    |
214 |             if models_path.parent and str(models_path.parent) not in ("", "."):
215 |                 models_path.parent.mkdir(parents=True, exist_ok=True)
216 |         except Exception:
    |         ^^^^^^
217 |         pass
218 |             pass
    |

invalid-syntax: Expected an expression
   --> backend\modelmanager.py:216:26
    |
214 |             if models_path.parent and str(models_path.parent) not in ("", "."):
215 |                 models_path.parent.mkdir(parents=True, exist_ok=True)
216 |         except Exception:
    |                          ^
217 |         pass
218 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:218:1
    |
216 |         except Exception:
217 |         pass
218 |             pass
    | ^^^^^^^^^^^^
219 |         if not models_path.exists():
220 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:219:9
    |
217 |         pass
218 |             pass
219 |         if not models_path.exists():
    |         ^
220 |         pass
221 |             return {}
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:220:9
    |
218 |             pass
219 |         if not models_path.exists():
220 |         pass
    |         ^^^^
221 |             return {}
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:221:1
    |
219 |         if not models_path.exists():
220 |         pass
221 |             return {}
    | ^^^^^^^^^^^^
222 |
223 |         available_models = {}
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:223:9
    |
221 |             return {}
222 |
223 |         available_models = {}
    |         ^
224 |
225 |         def do_load():
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\modelmanager.py:227:13
    |
225 |         def do_load():
226 |             with open(models_path, "r", encoding="utf-8") as f:
227 |             pass
    |             ^^^^
228 |                 for line in f:
229 |                     line = line.strip()
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:228:1
    |
226 |             with open(models_path, "r", encoding="utf-8") as f:
227 |             pass
228 |                 for line in f:
    | ^^^^^^^^^^^^^^^^
229 |                     line = line.strip()
230 |                     if not line or line.startswith("#"):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:230:57
    |
228 |                 for line in f:
229 |                     line = line.strip()
230 |                     if not line or line.startswith("#"):
    |                                                         ^
231 |                 pass
232 |                         continue
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:232:1
    |
230 |                     if not line or line.startswith("#"):
231 |                 pass
232 |                         continue
    | ^^^^^^^^^^^^^^^^^^^^^^^^
233 |                     key = line.split("/")[-1].lower()
234 |                     available_models[key] = line
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\modelmanager.py:233:1
    |
231 |                 pass
232 |                         continue
233 |                     key = line.split("/")[-1].lower()
    | ^^^^^^^^^^^^^^^^^^^^
234 |                     available_models[key] = line
235 |             print(
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:234:1
    |
232 |                         continue
233 |                     key = line.split("/")[-1].lower()
234 |                     available_models[key] = line
    | ^^^^^^^^^^^^^^^^^^^^
235 |             print(
236 |                 f"[ModelManager] Loaded {len(available_models)} models from {models_file}"
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:235:13
    |
233 |                     key = line.split("/")[-1].lower()
234 |                     available_models[key] = line
235 |             print(
    |             ^
236 |                 f"[ModelManager] Loaded {len(available_models)} models from {models_file}"
237 |             )
    |

E501 Line too long (90 > 88)
   --> backend\modelmanager.py:236:89
    |
234 |                     available_models[key] = line
235 |             print(
236 |                 f"[ModelManager] Loaded {len(available_models)} models from {models_file}"
    |                                                                                         ^^
237 |             )
238 |             return available_models
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:240:9
    |
238 |             return available_models
239 |
240 |         return safe_call(
    |         ^
241 |             do_load,
242 |             error_msg=f"[ModelManager] Error loading models from {models_file}",
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:246:5
    |
244 |         )
245 |
246 |     def download_model(
    |     ^
247 |         self,
248 |         model_name: str,
    |

E501 Line too long (105 > 88)
   --> backend\modelmanager.py:254:89
    |
252 |         max_retries: int = 3,
253 |     ):
254 |         # If model_name looks like a repo id (org/name), go through hf_hub_download API expected by tests
    |                                                                                         ^^^^^^^^^^^^^^^^^
255 |         if "/" in model_name:
256 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:256:9
    |
254 |         # If model_name looks like a repo id (org/name), go through hf_hub_download API expected by tests
255 |         if "/" in model_name:
256 |         pass
    |         ^^^^
257 |             # Handle "latest" revision by using a safe default
258 |             if revision == "latest":
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:258:1
    |
256 |         pass
257 |             # Handle "latest" revision by using a safe default
258 |             if revision == "latest":
    | ^^^^^^^^^^^^
259 |             pass
260 |                 # Only allow 'main' for automated downloads, never for manual
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:259:13
    |
257 |             # Handle "latest" revision by using a safe default
258 |             if revision == "latest":
259 |             pass
    |             ^^^^
260 |                 # Only allow 'main' for automated downloads, never for manual
261 |                 if hasattr(self, "_automated_download"):
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:261:1
    |
259 |             pass
260 |                 # Only allow 'main' for automated downloads, never for manual
261 |                 if hasattr(self, "_automated_download"):
    | ^^^^^^^^^^^^^^^^
262 |             pass
263 |                     revision = "main"  # In production, query HF API for actual latest
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:261:57
    |
259 |             pass
260 |                 # Only allow 'main' for automated downloads, never for manual
261 |                 if hasattr(self, "_automated_download"):
    |                                                         ^
262 |             pass
263 |                     revision = "main"  # In production, query HF API for actual latest
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:263:1
    |
261 |                 if hasattr(self, "_automated_download"):
262 |             pass
263 |                     revision = "main"  # In production, query HF API for actual latest
    | ^^^^^^^^^^^^^^^^^^^^
264 |                 else:
265 |             pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\modelmanager.py:264:1
    |
262 |             pass
263 |                     revision = "main"  # In production, query HF API for actual latest
264 |                 else:
    | ^^^^^^^^^^^^^^^^
265 |             pass
266 |                     raise ValueError(
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:264:17
    |
262 |             pass
263 |                     revision = "main"  # In production, query HF API for actual latest
264 |                 else:
    |                 ^^^^
265 |             pass
266 |                     raise ValueError(
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:264:21
    |
262 |             pass
263 |                     revision = "main"  # In production, query HF API for actual latest
264 |                 else:
    |                     ^
265 |             pass
266 |                     raise ValueError(
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:264:22
    |
262 |             pass
263 |                     revision = "main"  # In production, query HF API for actual latest
264 |                 else:
    |                      ^
265 |             pass
266 |                     raise ValueError(
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:266:1
    |
264 |                 else:
265 |             pass
266 |                     raise ValueError(
    | ^^^^^^^^^^^^^^^^^^^^
267 |                         "Revision 'latest' is only allowed for automated downloads. "
268 |                         "Please specify a pinned revision (commit hash or tag)."
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:271:13
    |
269 |                     )
270 |             # Enforce revision pinning for security (except for our automated downloads)
271 |             if revision is None or (
    |             ^
272 |                 revision == "main" and not hasattr(self, "_automated_download")
273 |             ):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:273:15
    |
271 |             if revision is None or (
272 |                 revision == "main" and not hasattr(self, "_automated_download")
273 |             ):
    |               ^
274 |         pass
275 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:274:9
    |
272 |                 revision == "main" and not hasattr(self, "_automated_download")
273 |             ):
274 |         pass
    |         ^
275 |             pass
276 |                 raise ValueError(
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:275:1
    |
273 |             ):
274 |         pass
275 |             pass
    | ^^^^^^^^^^^^
276 |                 raise ValueError(
277 |                     "Revision must be explicitly pinned for secure model downloads (not 'main')."
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:276:1
    |
274 |         pass
275 |             pass
276 |                 raise ValueError(
    | ^^^^^^^^^^^^^^^^
277 |                     "Revision must be explicitly pinned for secure model downloads (not 'main')."
278 |                 )
    |

E501 Line too long (97 > 88)
   --> backend\modelmanager.py:277:89
    |
275 |             pass
276 |                 raise ValueError(
277 |                     "Revision must be explicitly pinned for secure model downloads (not 'main')."
    |                                                                                         ^^^^^^^^^
278 |                 )
279 |             # Bandit B615: Always require revision pinning for Hugging Face downloads
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:280:13
    |
278 |                 )
279 |             # Bandit B615: Always require revision pinning for Hugging Face downloads
280 |             try:
    |             ^
281 |             pass
282 |                 path = huggingface_hub.hf_hub_download(  # nosec
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\modelmanager.py:281:13
    |
279 |             # Bandit B615: Always require revision pinning for Hugging Face downloads
280 |             try:
281 |             pass
    |             ^^^^
282 |                 path = huggingface_hub.hf_hub_download(  # nosec
283 |                     repo_id=model_name,
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:282:1
    |
280 |             try:
281 |             pass
282 |                 path = huggingface_hub.hf_hub_download(  # nosec
    | ^^^^^^^^^^^^^^^^
283 |                     repo_id=model_name,
284 |                     filename=filename,
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:290:13
    |
288 |                 )
289 |                 return {"status": "downloaded", "path": path}
290 |             except Exception as e:
    |             ^
291 |             pass
292 |                 return {"status": "error", "error": str(e)}
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:290:30
    |
288 |                 )
289 |                 return {"status": "downloaded", "path": path}
290 |             except Exception as e:
    |                              ^^
291 |             pass
292 |                 return {"status": "error", "error": str(e)}
    |

invalid-syntax: Expected an expression
   --> backend\modelmanager.py:290:35
    |
288 |                 )
289 |                 return {"status": "downloaded", "path": path}
290 |             except Exception as e:
    |                                   ^
291 |             pass
292 |                 return {"status": "error", "error": str(e)}
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:292:1
    |
290 |             except Exception as e:
291 |             pass
292 |                 return {"status": "error", "error": str(e)}
    | ^^^^^^^^^^^^^^^^
293 |
294 |         # Otherwise treat as local file in models_dir
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:295:9
    |
294 |         # Otherwise treat as local file in models_dir
295 |         model_path = Path(self.models_dir) / model_name
    |         ^
296 |         if model_path.exists():
297 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:297:9
    |
295 |         model_path = Path(self.models_dir) / model_name
296 |         if model_path.exists():
297 |         pass
    |         ^^^^
298 |             return {"status": "exists", "path": str(model_path)}
299 |         try:
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:298:1
    |
296 |         if model_path.exists():
297 |         pass
298 |             return {"status": "exists", "path": str(model_path)}
    | ^^^^^^^^^^^^
299 |         try:
300 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:299:9
    |
297 |         pass
298 |             return {"status": "exists", "path": str(model_path)}
299 |         try:
    |         ^
300 |         pass
301 |             model_path.parent.mkdir(parents=True, exist_ok=True)
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\modelmanager.py:300:9
    |
298 |             return {"status": "exists", "path": str(model_path)}
299 |         try:
300 |         pass
    |         ^^^^
301 |             model_path.parent.mkdir(parents=True, exist_ok=True)
302 |             # Simulate retrieval or presence
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:301:1
    |
299 |         try:
300 |         pass
301 |             model_path.parent.mkdir(parents=True, exist_ok=True)
    | ^^^^^^^^^^^^
302 |             # Simulate retrieval or presence
303 |             model_path.touch()
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:305:9
    |
303 |             model_path.touch()
304 |             return {"status": "success", "path": str(model_path)}
305 |         except Exception as e:
    |         ^
306 |         pass
307 |             return {"status": "error", "error": str(e)}
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:305:26
    |
303 |             model_path.touch()
304 |             return {"status": "success", "path": str(model_path)}
305 |         except Exception as e:
    |                          ^^
306 |         pass
307 |             return {"status": "error", "error": str(e)}
    |

invalid-syntax: Expected an expression
   --> backend\modelmanager.py:305:31
    |
303 |             model_path.touch()
304 |             return {"status": "success", "path": str(model_path)}
305 |         except Exception as e:
    |                               ^
306 |         pass
307 |             return {"status": "error", "error": str(e)}
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:307:1
    |
305 |         except Exception as e:
306 |         pass
307 |             return {"status": "error", "error": str(e)}
    | ^^^^^^^^^^^^
308 |
309 |     def load_model(self, model_name: str = None):
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:309:5
    |
307 |             return {"status": "error", "error": str(e)}
308 |
309 |     def load_model(self, model_name: str = None):
    |     ^
310 |         if not model_name:
311 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:311:9
    |
309 |     def load_model(self, model_name: str = None):
310 |         if not model_name:
311 |         pass
    |         ^^^^
312 |             model_name = self.default_model
313 |         if not model_name:
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:312:1
    |
310 |         if not model_name:
311 |         pass
312 |             model_name = self.default_model
    | ^^^^^^^^^^^^
313 |         if not model_name:
314 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:314:9
    |
312 |             model_name = self.default_model
313 |         if not model_name:
314 |         pass
    |         ^^^^
315 |             raise ValueError("No default model available to load.")
316 |         if model_name in self.loaded_models:
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:315:1
    |
313 |         if not model_name:
314 |         pass
315 |             raise ValueError("No default model available to load.")
    | ^^^^^^^^^^^^
316 |         if model_name in self.loaded_models:
317 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:316:9
    |
314 |         pass
315 |             raise ValueError("No default model available to load.")
316 |         if model_name in self.loaded_models:
    |         ^
317 |         pass
318 |             return self.loaded_models[model_name]
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:317:9
    |
315 |             raise ValueError("No default model available to load.")
316 |         if model_name in self.loaded_models:
317 |         pass
    |         ^^^^
318 |             return self.loaded_models[model_name]
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:318:1
    |
316 |         if model_name in self.loaded_models:
317 |         pass
318 |             return self.loaded_models[model_name]
    | ^^^^^^^^^^^^
319 |
320 |         def do_download():
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:320:9
    |
318 |             return self.loaded_models[model_name]
319 |
320 |         def do_download():
    |         ^
321 |             result = self.download_model(model_name)
322 |             if isinstance(result, dict) and "path" in result:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:323:13
    |
321 |             result = self.download_model(model_name)
322 |             if isinstance(result, dict) and "path" in result:
323 |             pass
    |             ^^^^
324 |                 return result["path"]
325 |             return result
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:324:1
    |
322 |             if isinstance(result, dict) and "path" in result:
323 |             pass
324 |                 return result["path"]
    | ^^^^^^^^^^^^^^^^
325 |             return result
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:327:9
    |
325 |             return result
326 |
327 |         model_path = safe_call(
    |         ^
328 |             do_download,
329 |             error_msg=f"[ModelManager] Could not download {model_name}, checking offline cache...",
    |

E501 Line too long (99 > 88)
   --> backend\modelmanager.py:329:89
    |
327 |         model_path = safe_call(
328 |             do_download,
329 |             error_msg=f"[ModelManager] Could not download {model_name}, checking offline cache...",
    |                                                                                         ^^^^^^^^^^^
330 |             default=str(Path(self.models_dir) / model_name),
331 |         )
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:334:9
    |
332 |         # Ensure model_path is a Path object
333 |         if not isinstance(model_path, Path):
334 |         pass
    |         ^^^^
335 |             model_path = Path(model_path)
336 |         if not model_path.exists():
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:335:1
    |
333 |         if not isinstance(model_path, Path):
334 |         pass
335 |             model_path = Path(model_path)
    | ^^^^^^^^^^^^
336 |         if not model_path.exists():
337 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:336:9
    |
334 |         pass
335 |             model_path = Path(model_path)
336 |         if not model_path.exists():
    |         ^
337 |         pass
338 |             raise RuntimeError(f"No offline model available for {model_name}")
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:337:9
    |
335 |             model_path = Path(model_path)
336 |         if not model_path.exists():
337 |         pass
    |         ^^^^
338 |             raise RuntimeError(f"No offline model available for {model_name}")
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:338:1
    |
336 |         if not model_path.exists():
337 |         pass
338 |             raise RuntimeError(f"No offline model available for {model_name}")
    | ^^^^^^^^^^^^
339 |
340 |         # Robust error boundary for model instantiation
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:341:9
    |
340 |         # Robust error boundary for model instantiation
341 |         def do_instantiate():
    |         ^
342 |         pass
343 |             # If the model_path is a file, use it directly. Otherwise, assume it's a directory.
    |

invalid-syntax: Expected an indented block after function definition
   --> backend\modelmanager.py:342:9
    |
340 |         # Robust error boundary for model instantiation
341 |         def do_instantiate():
342 |         pass
    |         ^^^^
343 |             # If the model_path is a file, use it directly. Otherwise, assume it's a directory.
344 |             if model_path.is_file():
    |

E501 Line too long (95 > 88)
   --> backend\modelmanager.py:343:89
    |
341 |         def do_instantiate():
342 |         pass
343 |             # If the model_path is a file, use it directly. Otherwise, assume it's a directory.
    |                                                                                         ^^^^^^^
344 |             if model_path.is_file():
345 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:344:1
    |
342 |         pass
343 |             # If the model_path is a file, use it directly. Otherwise, assume it's a directory.
344 |             if model_path.is_file():
    | ^^^^^^^^^^^^
345 |             pass
346 |                 return HybridLLMRouter(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:345:13
    |
343 |             # If the model_path is a file, use it directly. Otherwise, assume it's a directory.
344 |             if model_path.is_file():
345 |             pass
    |             ^^^^
346 |                 return HybridLLMRouter(
347 |                     llama_model_path=str(model_path),
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:346:1
    |
344 |             if model_path.is_file():
345 |             pass
346 |                 return HybridLLMRouter(
    | ^^^^^^^^^^^^^^^^
347 |                     llama_model_path=str(model_path),
348 |                     gpt4all_model_path=str(model_path),  # GPT4All can also load gguf
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:350:13
    |
348 |                     gpt4all_model_path=str(model_path),  # GPT4All can also load gguf
349 |                 )
350 |             else:
    |             ^
351 |             pass
352 |                 return HybridLLMRouter(
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:350:17
    |
348 |                     gpt4all_model_path=str(model_path),  # GPT4All can also load gguf
349 |                 )
350 |             else:
    |                 ^
351 |             pass
352 |                 return HybridLLMRouter(
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:350:18
    |
348 |                     gpt4all_model_path=str(model_path),  # GPT4All can also load gguf
349 |                 )
350 |             else:
    |                  ^
351 |             pass
352 |                 return HybridLLMRouter(
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:352:1
    |
350 |             else:
351 |             pass
352 |                 return HybridLLMRouter(
    | ^^^^^^^^^^^^^^^^
353 |                     llama_model_path=str(model_path / "model.bin"),
354 |                     gpt4all_model_path=str(model_path / "gpt4all.bin"),
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:357:9
    |
355 |                 )
356 |
357 |         llm = safe_call(
    |         ^
358 |             do_instantiate,
359 |             error_msg=f"[ModelManager] Error instantiating HybridLLMRouter for {model_name}",
    |

E501 Line too long (93 > 88)
   --> backend\modelmanager.py:359:89
    |
357 |         llm = safe_call(
358 |             do_instantiate,
359 |             error_msg=f"[ModelManager] Error instantiating HybridLLMRouter for {model_name}",
    |                                                                                         ^^^^^
360 |             default=None,
361 |         )
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:363:9
    |
361 |         )
362 |         if llm is None:
363 |         pass
    |         ^^^^
364 |             raise RuntimeError(f"Failed to instantiate model router for {model_name}")
365 |         self.loaded_models[model_name] = llm
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:364:1
    |
362 |         if llm is None:
363 |         pass
364 |             raise RuntimeError(f"Failed to instantiate model router for {model_name}")
    | ^^^^^^^^^^^^
365 |         self.loaded_models[model_name] = llm
366 |         return llm
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:365:9
    |
363 |         pass
364 |             raise RuntimeError(f"Failed to instantiate model router for {model_name}")
365 |         self.loaded_models[model_name] = llm
    |         ^
366 |         return llm
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:368:5
    |
366 |         return llm
367 |
368 |     @classmethod
    |     ^
369 |     def from_settings(cls) -> "ModelManager":
370 |         pass
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\modelmanager.py:376:9
    |
374 |         """
375 |         try:
376 |         pass
    |         ^^^^
377 |             s = get_settings()
378 |             return cls(
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:377:1
    |
375 |         try:
376 |         pass
377 |             s = get_settings()
    | ^^^^^^^^^^^^
378 |             return cls(
379 |                 models_dir=str(s.abs_models_dir),
    |

E501 Line too long (99 > 88)
   --> backend\modelmanager.py:382:89
    |
380 |                 default_model=s.model_backend,
381 |                 hf_token=os.getenv("HF_TOKEN"),  # Still use env for token
382 |                 minimal_models=[],  # Disable automatic downloads for settings-based initialization
    |                                                                                         ^^^^^^^^^^^
383 |             )
384 |         except Exception:
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:384:9
    |
382 |                 minimal_models=[],  # Disable automatic downloads for settings-based initialization
383 |             )
384 |         except Exception:
    |         ^^^^^^
385 |         pass
386 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\modelmanager.py:384:26
    |
382 |                 minimal_models=[],  # Disable automatic downloads for settings-based initialization
383 |             )
384 |         except Exception:
    |                          ^
385 |         pass
386 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:388:1
    |
386 |         pass
387 |             # Fallback to default initialization
388 |             return cls(minimal_models=[])
    | ^^^^^^^^^^^^
389 |
390 |     # -------------------
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:393:5
    |
391 |     # Test-facing helper APIs
392 |     # -------------------
393 |     def list_available_models(self):
    |     ^
394 |         return (
395 |             list(self.available_models.keys())
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:411:9
    |
409 |         # Initialize router on first use
410 |         if not hasattr(self, "llm_router") or self.llm_router is None:
411 |         pass
    |         ^^^^
412 |             self.llm_router = HybridLLMRouter()
413 |         kwargs = {"prefer_fast": prefer_fast, "max_tokens": max_tokens}
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:412:1
    |
410 |         if not hasattr(self, "llm_router") or self.llm_router is None:
411 |         pass
412 |             self.llm_router = HybridLLMRouter()
    | ^^^^^^^^^^^^
413 |         kwargs = {"prefer_fast": prefer_fast, "max_tokens": max_tokens}
414 |         if context is not None:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:415:9
    |
413 |         kwargs = {"prefer_fast": prefer_fast, "max_tokens": max_tokens}
414 |         if context is not None:
415 |         pass
    |         ^^^^
416 |             kwargs["context"] = context
417 |         return self.llm_router.generate(prompt, **kwargs)
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:416:1
    |
414 |         if context is not None:
415 |         pass
416 |             kwargs["context"] = context
    | ^^^^^^^^^^^^
417 |         return self.llm_router.generate(prompt, **kwargs)
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:417:9
    |
415 |         pass
416 |             kwargs["context"] = context
417 |         return self.llm_router.generate(prompt, **kwargs)
    |         ^
418 |
419 |     def get_model_info(self):
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:419:5
    |
417 |         return self.llm_router.generate(prompt, **kwargs)
418 |
419 |     def get_model_info(self):
    |     ^
420 |         if not hasattr(self, "llm_router") or self.llm_router is None:
421 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\modelmanager.py:421:9
    |
419 |     def get_model_info(self):
420 |         if not hasattr(self, "llm_router") or self.llm_router is None:
421 |         pass
    |         ^^^^
422 |             self.llm_router = HybridLLMRouter()
423 |         return {
    |

invalid-syntax: Unexpected indentation
   --> backend\modelmanager.py:422:1
    |
420 |         if not hasattr(self, "llm_router") or self.llm_router is None:
421 |         pass
422 |             self.llm_router = HybridLLMRouter()
    | ^^^^^^^^^^^^
423 |         return {
424 |             "available_models": self.llm_router.get_available_models(),
    |

invalid-syntax: Expected a statement
   --> backend\modelmanager.py:427:1
    |
425 |             "default_model": self.default_model,
426 |         }
    |          ^
    |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\openspec_governance.py:37:9
   |
35 |         proposal_file = self.change_path / "proposal.md"
36 |         if not proposal_file.exists():
37 |         pass
   |         ^^^^
38 |             return {"error": "proposal.md not found"}
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:38:1
   |
36 |         if not proposal_file.exists():
37 |         pass
38 |             return {"error": "proposal.md not found"}
   | ^^^^^^^^^^^^
39 |
40 |         try:
   |

invalid-syntax: Expected an indented block after `try` statement
  --> backend\openspec_governance.py:41:9
   |
40 |         try:
41 |         pass
   |         ^^^^
42 |             content = proposal_file.read_text(encoding="utf-8")
43 |             return self._parse_proposal(content)
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:42:1
   |
40 |         try:
41 |         pass
42 |             content = proposal_file.read_text(encoding="utf-8")
   | ^^^^^^^^^^^^
43 |             return self._parse_proposal(content)
44 |         except Exception as e:
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:44:9
   |
42 |             content = proposal_file.read_text(encoding="utf-8")
43 |             return self._parse_proposal(content)
44 |         except Exception as e:
   |         ^^^^^^
45 |         pass
46 |             return {"error": f"Failed to parse proposal: {str(e)}"}
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:44:26
   |
42 |             content = proposal_file.read_text(encoding="utf-8")
43 |             return self._parse_proposal(content)
44 |         except Exception as e:
   |                          ^^
45 |         pass
46 |             return {"error": f"Failed to parse proposal: {str(e)}"}
   |

invalid-syntax: Expected an expression
  --> backend\openspec_governance.py:44:31
   |
42 |             content = proposal_file.read_text(encoding="utf-8")
43 |             return self._parse_proposal(content)
44 |         except Exception as e:
   |                               ^
45 |         pass
46 |             return {"error": f"Failed to parse proposal: {str(e)}"}
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:46:1
   |
44 |         except Exception as e:
45 |         pass
46 |             return {"error": f"Failed to parse proposal: {str(e)}"}
   | ^^^^^^^^^^^^
47 |
48 |     def get_tasks(self) -> Dict[str, Any]:
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:48:5
   |
46 |             return {"error": f"Failed to parse proposal: {str(e)}"}
47 |
48 |     def get_tasks(self) -> Dict[str, Any]:
   |     ^
49 |         """Parse and return tasks.md content with completion status"""
50 |         tasks_file = self.change_path / "tasks.md"
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\openspec_governance.py:52:9
   |
50 |         tasks_file = self.change_path / "tasks.md"
51 |         if not tasks_file.exists():
52 |         pass
   |         ^^^^
53 |             return {"error": "tasks.md not found"}
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:53:1
   |
51 |         if not tasks_file.exists():
52 |         pass
53 |             return {"error": "tasks.md not found"}
   | ^^^^^^^^^^^^
54 |
55 |         try:
   |

invalid-syntax: Expected an indented block after `try` statement
  --> backend\openspec_governance.py:56:9
   |
55 |         try:
56 |         pass
   |         ^^^^
57 |             content = tasks_file.read_text(encoding="utf-8")
58 |             return self._parse_tasks(content)
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:57:1
   |
55 |         try:
56 |         pass
57 |             content = tasks_file.read_text(encoding="utf-8")
   | ^^^^^^^^^^^^
58 |             return self._parse_tasks(content)
59 |         except Exception as e:
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:59:9
   |
57 |             content = tasks_file.read_text(encoding="utf-8")
58 |             return self._parse_tasks(content)
59 |         except Exception as e:
   |         ^
60 |         pass
61 |             return {"error": f"Failed to parse tasks: {str(e)}"}
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:59:26
   |
57 |             content = tasks_file.read_text(encoding="utf-8")
58 |             return self._parse_tasks(content)
59 |         except Exception as e:
   |                          ^^
60 |         pass
61 |             return {"error": f"Failed to parse tasks: {str(e)}"}
   |

invalid-syntax: Expected an expression
  --> backend\openspec_governance.py:59:31
   |
57 |             content = tasks_file.read_text(encoding="utf-8")
58 |             return self._parse_tasks(content)
59 |         except Exception as e:
   |                               ^
60 |         pass
61 |             return {"error": f"Failed to parse tasks: {str(e)}"}
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:61:1
   |
59 |         except Exception as e:
60 |         pass
61 |             return {"error": f"Failed to parse tasks: {str(e)}"}
   | ^^^^^^^^^^^^
62 |
63 |     def validate(self) -> Dict[str, Any]:
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:63:5
   |
61 |             return {"error": f"Failed to parse tasks: {str(e)}"}
62 |
63 |     def validate(self) -> Dict[str, Any]:
   |     ^
64 |         """Validate the change proposal"""
65 |         validation_results = {
   |

invalid-syntax: Expected an indented block after `for` statement
  --> backend\openspec_governance.py:75:9
   |
73 |         required_files = ["proposal.md", "tasks.md"]
74 |         for filename in required_files:
75 |         pass
   |         ^^^^
76 |             if not (self.change_path / filename).exists():
77 |                 validation_results["errors"].append(
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:76:1
   |
74 |         for filename in required_files:
75 |         pass
76 |             if not (self.change_path / filename).exists():
   | ^^^^^^^^^^^^
77 |                 validation_results["errors"].append(
78 |                     f"Missing required file: {filename}"
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\openspec_governance.py:85:9
   |
83 |         proposal = self.get_proposal()
84 |         if "error" in proposal:
85 |         pass
   |         ^^^^
86 |             validation_results["errors"].append(
87 |                 f"Proposal validation: {proposal['error']}"
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:86:1
   |
84 |         if "error" in proposal:
85 |         pass
86 |             validation_results["errors"].append(
   | ^^^^^^^^^^^^
87 |                 f"Proposal validation: {proposal['error']}"
88 |             )
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:90:9
   |
88 |             )
89 |             validation_results["valid"] = False
90 |         else:
   |         ^
91 |         pass
92 |             if not proposal.get("why"):
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:90:13
   |
88 |             )
89 |             validation_results["valid"] = False
90 |         else:
   |             ^
91 |         pass
92 |             if not proposal.get("why"):
   |

invalid-syntax: Expected a statement
  --> backend\openspec_governance.py:90:14
   |
88 |             )
89 |             validation_results["valid"] = False
90 |         else:
   |              ^
91 |         pass
92 |             if not proposal.get("why"):
   |

invalid-syntax: Unexpected indentation
  --> backend\openspec_governance.py:92:1
   |
90 |         else:
91 |         pass
92 |             if not proposal.get("why"):
   | ^^^^^^^^^^^^
93 |                 validation_results["warnings"].append(
94 |                     "Proposal missing 'Why' section"
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\openspec_governance.py:97:13
   |
95 |                 )
96 |             if not proposal.get("what_changes"):
97 |             pass
   |             ^^^^
98 |                 validation_results["warnings"].append(
99 |                     "Proposal missing 'What Changes' section"
   |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:98:1
    |
 96 |             if not proposal.get("what_changes"):
 97 |             pass
 98 |                 validation_results["warnings"].append(
    | ^^^^^^^^^^^^^^^^
 99 |                     "Proposal missing 'What Changes' section"
100 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:101:13
    |
 99 |                     "Proposal missing 'What Changes' section"
100 |                 )
101 |             if not proposal.get("impact"):
    |             ^
102 |             pass
103 |                 validation_results["warnings"].append(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:102:13
    |
100 |                 )
101 |             if not proposal.get("impact"):
102 |             pass
    |             ^^^^
103 |                 validation_results["warnings"].append(
104 |                     "Proposal missing 'Impact' section"
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:103:1
    |
101 |             if not proposal.get("impact"):
102 |             pass
103 |                 validation_results["warnings"].append(
    | ^^^^^^^^^^^^^^^^
104 |                     "Proposal missing 'Impact' section"
105 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:108:9
    |
107 |         # Validate tasks format
108 |         tasks = self.get_tasks()
    |         ^
109 |         if "error" in tasks:
110 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:110:9
    |
108 |         tasks = self.get_tasks()
109 |         if "error" in tasks:
110 |         pass
    |         ^^^^
111 |             validation_results["errors"].append(f"Tasks validation: {tasks['error']}")
112 |             validation_results["valid"] = False
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:111:1
    |
109 |         if "error" in tasks:
110 |         pass
111 |             validation_results["errors"].append(f"Tasks validation: {tasks['error']}")
    | ^^^^^^^^^^^^
112 |             validation_results["valid"] = False
113 |         else:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:113:9
    |
111 |             validation_results["errors"].append(f"Tasks validation: {tasks['error']}")
112 |             validation_results["valid"] = False
113 |         else:
    |         ^
114 |         pass
115 |             total_tasks = tasks.get("total_tasks", 0)
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:113:13
    |
111 |             validation_results["errors"].append(f"Tasks validation: {tasks['error']}")
112 |             validation_results["valid"] = False
113 |         else:
    |             ^
114 |         pass
115 |             total_tasks = tasks.get("total_tasks", 0)
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:113:14
    |
111 |             validation_results["errors"].append(f"Tasks validation: {tasks['error']}")
112 |             validation_results["valid"] = False
113 |         else:
    |              ^
114 |         pass
115 |             total_tasks = tasks.get("total_tasks", 0)
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:115:1
    |
113 |         else:
114 |         pass
115 |             total_tasks = tasks.get("total_tasks", 0)
    | ^^^^^^^^^^^^
116 |             if total_tasks == 0:
117 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:117:13
    |
115 |             total_tasks = tasks.get("total_tasks", 0)
116 |             if total_tasks == 0:
117 |             pass
    |             ^^^^
118 |                 validation_results["warnings"].append("No tasks defined")
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:118:1
    |
116 |             if total_tasks == 0:
117 |             pass
118 |                 validation_results["warnings"].append("No tasks defined")
    | ^^^^^^^^^^^^^^^^
119 |
120 |             completion_rate = tasks.get("completion_rate", 0)
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:120:13
    |
118 |                 validation_results["warnings"].append("No tasks defined")
119 |
120 |             completion_rate = tasks.get("completion_rate", 0)
    |             ^
121 |             completed = tasks.get("completed_tasks", 0)
122 |             validation_results["info"].append(
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:126:9
    |
124 |             )
125 |
126 |         return validation_results
    |         ^
127 |
128 |     def get_status(self) -> str:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:128:5
    |
126 |         return validation_results
127 |
128 |     def get_status(self) -> str:
    |     ^
129 |         """Determine change status based on content and completion"""
130 |         if not self.exists():
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:131:9
    |
129 |         """Determine change status based on content and completion"""
130 |         if not self.exists():
131 |         pass
    |         ^^^^
132 |             return "not_found"
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:132:1
    |
130 |         if not self.exists():
131 |         pass
132 |             return "not_found"
    | ^^^^^^^^^^^^
133 |
134 |         tasks = self.get_tasks()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:136:9
    |
134 |         tasks = self.get_tasks()
135 |         if "error" in tasks:
136 |         pass
    |         ^^^^
137 |             return "invalid"
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:137:1
    |
135 |         if "error" in tasks:
136 |         pass
137 |             return "invalid"
    | ^^^^^^^^^^^^
138 |
139 |         completion_rate = tasks.get("completion_rate", 0)
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:139:9
    |
137 |             return "invalid"
138 |
139 |         completion_rate = tasks.get("completion_rate", 0)
    |         ^
140 |         if completion_rate == 100:
141 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:141:9
    |
139 |         completion_rate = tasks.get("completion_rate", 0)
140 |         if completion_rate == 100:
141 |         pass
    |         ^^^^
142 |             return "completed"
143 |         elif completion_rate > 0:
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:142:1
    |
140 |         if completion_rate == 100:
141 |         pass
142 |             return "completed"
    | ^^^^^^^^^^^^
143 |         elif completion_rate > 0:
144 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:143:9
    |
141 |         pass
142 |             return "completed"
143 |         elif completion_rate > 0:
    |         ^
144 |         pass
145 |             return "in_progress"
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\openspec_governance.py:143:14
    |
141 |         pass
142 |             return "completed"
143 |         elif completion_rate > 0:
    |              ^^^^^^^^^^^^^^^^^^^
144 |         pass
145 |             return "in_progress"
    |

invalid-syntax: Expected an expression
   --> backend\openspec_governance.py:143:34
    |
141 |         pass
142 |             return "completed"
143 |         elif completion_rate > 0:
    |                                  ^
144 |         pass
145 |             return "in_progress"
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:145:1
    |
143 |         elif completion_rate > 0:
144 |         pass
145 |             return "in_progress"
    | ^^^^^^^^^^^^
146 |         else:
147 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:146:9
    |
144 |         pass
145 |             return "in_progress"
146 |         else:
    |         ^
147 |         pass
148 |             return "pending"
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:146:13
    |
144 |         pass
145 |             return "in_progress"
146 |         else:
    |             ^
147 |         pass
148 |             return "pending"
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:146:14
    |
144 |         pass
145 |             return "in_progress"
146 |         else:
    |              ^
147 |         pass
148 |             return "pending"
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:148:1
    |
146 |         else:
147 |         pass
148 |             return "pending"
    | ^^^^^^^^^^^^
149 |
150 |     def _parse_checklist_items(self, lines: List[str]) -> List[Dict[str, Any]]:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:150:5
    |
148 |             return "pending"
149 |
150 |     def _parse_checklist_items(self, lines: List[str]) -> List[Dict[str, Any]]:
    |     ^
151 |         """Parse markdown checklist items into a structured list."""
152 |         items: List[Dict[str, Any]] = []
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\openspec_governance.py:154:9
    |
152 |         items: List[Dict[str, Any]] = []
153 |         for raw in lines:
154 |         pass
    |         ^^^^
155 |             s = raw.strip()
156 |             if s.startswith("- [ ]") or s.startswith("- [x]"):
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:155:1
    |
153 |         for raw in lines:
154 |         pass
155 |             s = raw.strip()
    | ^^^^^^^^^^^^
156 |             if s.startswith("- [ ]") or s.startswith("- [x]"):
157 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:157:13
    |
155 |             s = raw.strip()
156 |             if s.startswith("- [ ]") or s.startswith("- [x]"):
157 |             pass
    |             ^^^^
158 |                 items.append(
159 |                     {
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:158:1
    |
156 |             if s.startswith("- [ ]") or s.startswith("- [x]"):
157 |             pass
158 |                 items.append(
    | ^^^^^^^^^^^^^^^^
159 |                     {
160 |                         "text": s[5:].strip(),
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:164:9
    |
162 |                     }
163 |                 )
164 |         return items
    |         ^
165 |
166 |     def _finalize_section(
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:166:5
    |
164 |         return items
165 |
166 |     def _finalize_section(
    |     ^
167 |         self,
168 |         result: Dict[str, Any],
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:174:9
    |
172 |         """Finalize and store the current section into the result map."""
173 |         if current_section and current_content:
174 |         pass
    |         ^^^^
175 |             section_text = "\n".join(current_content).strip()
176 |             if current_section == "acceptance_criteria":
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:175:1
    |
173 |         if current_section and current_content:
174 |         pass
175 |             section_text = "\n".join(current_content).strip()
    | ^^^^^^^^^^^^
176 |             if current_section == "acceptance_criteria":
177 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:177:13
    |
175 |             section_text = "\n".join(current_content).strip()
176 |             if current_section == "acceptance_criteria":
177 |             pass
    |             ^^^^
178 |                 result[current_section] = self._parse_checklist_items(current_content)
179 |             else:
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:178:1
    |
176 |             if current_section == "acceptance_criteria":
177 |             pass
178 |                 result[current_section] = self._parse_checklist_items(current_content)
    | ^^^^^^^^^^^^^^^^
179 |             else:
180 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:179:13
    |
177 |             pass
178 |                 result[current_section] = self._parse_checklist_items(current_content)
179 |             else:
    |             ^^^^
180 |             pass
181 |                 result[current_section] = section_text
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:179:17
    |
177 |             pass
178 |                 result[current_section] = self._parse_checklist_items(current_content)
179 |             else:
    |                 ^
180 |             pass
181 |                 result[current_section] = section_text
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:179:18
    |
177 |             pass
178 |                 result[current_section] = self._parse_checklist_items(current_content)
179 |             else:
    |                  ^
180 |             pass
181 |                 result[current_section] = section_text
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:181:1
    |
179 |             else:
180 |             pass
181 |                 result[current_section] = section_text
    | ^^^^^^^^^^^^^^^^
182 |
183 |     def _parse_proposal(self, content: str) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:183:5
    |
181 |                 result[current_section] = section_text
182 |
183 |     def _parse_proposal(self, content: str) -> Dict[str, Any]:
    |     ^
184 |         """Parse proposal.md markdown content"""
185 |         result = {
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\openspec_governance.py:200:9
    |
199 |         for line in lines:
200 |         pass
    |         ^^^^
201 |             s = line.strip()
202 |             if s.startswith("# "):
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:201:1
    |
199 |         for line in lines:
200 |         pass
201 |             s = line.strip()
    | ^^^^^^^^^^^^
202 |             if s.startswith("# "):
203 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:203:13
    |
201 |             s = line.strip()
202 |             if s.startswith("# "):
203 |             pass
    |             ^^^^
204 |                 result["title"] = s[2:].strip()
205 |             elif s.startswith("## "):
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:204:1
    |
202 |             if s.startswith("# "):
203 |             pass
204 |                 result["title"] = s[2:].strip()
    | ^^^^^^^^^^^^^^^^
205 |             elif s.startswith("## "):
206 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:205:13
    |
203 |             pass
204 |                 result["title"] = s[2:].strip()
205 |             elif s.startswith("## "):
    |             ^^^^
206 |             pass
207 |                 # Save previous section
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\openspec_governance.py:205:18
    |
203 |             pass
204 |                 result["title"] = s[2:].strip()
205 |             elif s.startswith("## "):
    |                  ^^^^^^^^^^^^^^^^^^^
206 |             pass
207 |                 # Save previous section
    |

invalid-syntax: Expected an expression
   --> backend\openspec_governance.py:205:38
    |
203 |             pass
204 |                 result["title"] = s[2:].strip()
205 |             elif s.startswith("## "):
    |                                      ^
206 |             pass
207 |                 # Save previous section
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:208:1
    |
206 |             pass
207 |                 # Save previous section
208 |                 self._finalize_section(result, current_section, current_content)
    | ^^^^^^^^^^^^^^^^
209 |
210 |                 # Start new section
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:214:13
    |
212 |                 current_section = section_name
213 |                 current_content = []
214 |             else:
    |             ^
215 |             pass
216 |                 if current_section:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:214:17
    |
212 |                 current_section = section_name
213 |                 current_content = []
214 |             else:
    |                 ^
215 |             pass
216 |                 if current_section:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:214:18
    |
212 |                 current_section = section_name
213 |                 current_content = []
214 |             else:
    |                  ^
215 |             pass
216 |                 if current_section:
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:216:1
    |
214 |             else:
215 |             pass
216 |                 if current_section:
    | ^^^^^^^^^^^^^^^^
217 |                     current_content.append(s)
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:220:9
    |
219 |         # Handle last section
220 |         self._finalize_section(result, current_section, current_content)
    |         ^
221 |
222 |         return result
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:224:5
    |
222 |         return result
223 |
224 |     def _parse_tasks(self, content: str) -> Dict[str, Any]:
    |     ^
225 |         """Parse tasks.md content and calculate completion status"""
226 |         result = {
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\openspec_governance.py:239:9
    |
238 |         for line in lines:
239 |         pass
    |         ^^^^
240 |             line_stripped = line.strip()
241 |             if line_stripped.startswith("## "):
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:240:1
    |
238 |         for line in lines:
239 |         pass
240 |             line_stripped = line.strip()
    | ^^^^^^^^^^^^
241 |             if line_stripped.startswith("## "):
242 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:242:13
    |
240 |             line_stripped = line.strip()
241 |             if line_stripped.startswith("## "):
242 |             pass
    |             ^^^^
243 |                 # Save previous section
244 |                 if current_section and current_tasks:
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:244:1
    |
242 |             pass
243 |                 # Save previous section
244 |                 if current_section and current_tasks:
    | ^^^^^^^^^^^^^^^^
245 |             pass
246 |                     result["task_sections"].append(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:244:54
    |
242 |             pass
243 |                 # Save previous section
244 |                 if current_section and current_tasks:
    |                                                      ^
245 |             pass
246 |                     result["task_sections"].append(
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:246:1
    |
244 |                 if current_section and current_tasks:
245 |             pass
246 |                     result["task_sections"].append(
    | ^^^^^^^^^^^^^^^^^^^^
247 |                         {
248 |                             "name": current_section,
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\openspec_governance.py:254:1
    |
253 |                 # Start new section
254 |                 current_section = line_stripped[3:].strip()
    | ^^^^^^^^^^^^^^^^
255 |                 current_tasks = []
256 |             elif line_stripped.startswith("- [ ]") or line_stripped.startswith("- [x]"):
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:255:1
    |
253 |                 # Start new section
254 |                 current_section = line_stripped[3:].strip()
255 |                 current_tasks = []
    | ^^^^^^^^^^^^^^^^
256 |             elif line_stripped.startswith("- [ ]") or line_stripped.startswith("- [x]"):
257 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:256:13
    |
254 |                 current_section = line_stripped[3:].strip()
255 |                 current_tasks = []
256 |             elif line_stripped.startswith("- [ ]") or line_stripped.startswith("- [x]"):
    |             ^
257 |             pass
258 |                 # Task item
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\openspec_governance.py:256:18
    |
254 |                 current_section = line_stripped[3:].strip()
255 |                 current_tasks = []
256 |             elif line_stripped.startswith("- [ ]") or line_stripped.startswith("- [x]"):
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
257 |             pass
258 |                 # Task item
    |

invalid-syntax: Expected an expression
   --> backend\openspec_governance.py:256:89
    |
254 |                 current_section = line_stripped[3:].strip()
255 |                 current_tasks = []
256 |             elif line_stripped.startswith("- [ ]") or line_stripped.startswith("- [x]"):
    |                                                                                         ^
257 |             pass
258 |                 # Task item
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:259:1
    |
257 |             pass
258 |                 # Task item
259 |                 task = {
    | ^^^^^^^^^^^^^^^^
260 |                     "text": line_stripped[5:].strip(),
261 |                     "completed": line_stripped.startswith("- [x]"),
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:267:38
    |
265 |                 result["all_tasks"].append(task)
266 |                 result["total_tasks"] += 1
267 |                 if task["completed"]:
    |                                      ^
268 |             pass
269 |                     result["completed_tasks"] += 1
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:268:13
    |
266 |                 result["total_tasks"] += 1
267 |                 if task["completed"]:
268 |             pass
    |             ^
269 |                     result["completed_tasks"] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:269:1
    |
267 |                 if task["completed"]:
268 |             pass
269 |                     result["completed_tasks"] += 1
    | ^^^^^^^^^^^^^^^^^^^^
270 |
271 |         # Handle last section
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:272:9
    |
271 |         # Handle last section
272 |         if current_section and current_tasks:
    |         ^
273 |         pass
274 |             result["task_sections"].append(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:273:9
    |
271 |         # Handle last section
272 |         if current_section and current_tasks:
273 |         pass
    |         ^^^^
274 |             result["task_sections"].append(
275 |                 {"name": current_section, "tasks": current_tasks}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:274:1
    |
272 |         if current_section and current_tasks:
273 |         pass
274 |             result["task_sections"].append(
    | ^^^^^^^^^^^^
275 |                 {"name": current_section, "tasks": current_tasks}
276 |             )
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:279:9
    |
278 |         # Calculate completion rate
279 |         if result["total_tasks"] > 0:
    |         ^
280 |         pass
281 |             result["completion_rate"] = (
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:280:9
    |
278 |         # Calculate completion rate
279 |         if result["total_tasks"] > 0:
280 |         pass
    |         ^^^^
281 |             result["completion_rate"] = (
282 |                 result["completed_tasks"] / result["total_tasks"]
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:281:1
    |
279 |         if result["total_tasks"] > 0:
280 |         pass
281 |             result["completion_rate"] = (
    | ^^^^^^^^^^^^
282 |                 result["completed_tasks"] / result["total_tasks"]
283 |             ) * 100
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:285:9
    |
283 |             ) * 100
284 |
285 |         return result
    |         ^
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:288:1
    |
288 | class OpenSpecGovernance:
    | ^
289 |     """Main governance system for managing OpenSpec changes"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:302:9
    |
301 |         if not self.changes_path.exists():
302 |         pass
    |         ^^^^
303 |             return changes
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:303:1
    |
301 |         if not self.changes_path.exists():
302 |         pass
303 |             return changes
    | ^^^^^^^^^^^^
304 |
305 |         for change_dir in self.changes_path.iterdir():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\openspec_governance.py:306:9
    |
305 |         for change_dir in self.changes_path.iterdir():
306 |         pass
    |         ^^^^
307 |             if not change_dir.is_dir():
308 |                 continue
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:307:1
    |
305 |         for change_dir in self.changes_path.iterdir():
306 |         pass
307 |             if not change_dir.is_dir():
    | ^^^^^^^^^^^^
308 |                 continue
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:312:13
    |
310 |             # Skip archive directory unless explicitly requested
311 |             if change_dir.name == "archive" and not include_archived:
312 |             pass
    |             ^^^^
313 |                 continue
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:313:1
    |
311 |             if change_dir.name == "archive" and not include_archived:
312 |             pass
313 |                 continue
    | ^^^^^^^^^^^^^^^^
314 |
315 |             # Handle archived changes
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:317:13
    |
315 |             # Handle archived changes
316 |             if change_dir.name == "archive" and include_archived:
317 |             pass
    |             ^^^^
318 |                 for archived_change in change_dir.iterdir():
319 |                     if archived_change.is_dir():
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:318:1
    |
316 |             if change_dir.name == "archive" and include_archived:
317 |             pass
318 |                 for archived_change in change_dir.iterdir():
    | ^^^^^^^^^^^^^^^^
319 |                     if archived_change.is_dir():
320 |                 pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:319:49
    |
317 |             pass
318 |                 for archived_change in change_dir.iterdir():
319 |                     if archived_change.is_dir():
    |                                                 ^
320 |                 pass
321 |                         change_id = archived_change.name
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:321:1
    |
319 |                     if archived_change.is_dir():
320 |                 pass
321 |                         change_id = archived_change.name
    | ^^^^^^^^^^^^^^^^^^^^^^^^
322 |                         change = OpenSpecChange(change_id, self.base_path)
323 |                         # Override path for archived changes
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:336:17
    |
334 |                             }
335 |                         )
336 |                 continue
    |                 ^
337 |
338 |             change_id = change_dir.name
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:338:13
    |
336 |                 continue
337 |
338 |             change_id = change_dir.name
    |             ^
339 |             change = OpenSpecChange(change_id, self.base_path)
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:353:9
    |
351 |             )
352 |
353 |         return sorted(changes, key=lambda x: x["modified"], reverse=True)
    |         ^
354 |
355 |     def get_change_details(self, change_id: str) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:355:5
    |
353 |         return sorted(changes, key=lambda x: x["modified"], reverse=True)
354 |
355 |     def get_change_details(self, change_id: str) -> Dict[str, Any]:
    |     ^
356 |         """Get detailed information about a specific change"""
357 |         change = OpenSpecChange(change_id, self.base_path)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:360:9
    |
359 |         if not change.exists():
360 |         pass
    |         ^^^^
361 |             return {"error": f"Change '{change_id}' not found"}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:361:1
    |
359 |         if not change.exists():
360 |         pass
361 |             return {"error": f"Change '{change_id}' not found"}
    | ^^^^^^^^^^^^
362 |
363 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:371:5
    |
369 |         }
370 |
371 |     def validate_change(self, change_id: str) -> Dict[str, Any]:
    |     ^
372 |         """Validate a specific change"""
373 |         change = OpenSpecChange(change_id, self.base_path)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:376:9
    |
375 |         if not change.exists():
376 |         pass
    |         ^^^^
377 |             return {"error": f"Change '{change_id}' not found"}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:377:1
    |
375 |         if not change.exists():
376 |         pass
377 |             return {"error": f"Change '{change_id}' not found"}
    | ^^^^^^^^^^^^
378 |
379 |         return change.validate()
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:381:5
    |
379 |         return change.validate()
380 |
381 |     def apply_change(self, change_id: str, dry_run: bool = True) -> Dict[str, Any]:
    |     ^
382 |         """Apply an approved change (implementation would depend on change type)"""
383 |         change = OpenSpecChange(change_id, self.base_path)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:386:9
    |
385 |         if not change.exists():
386 |         pass
    |         ^^^^
387 |             return {"error": f"Change '{change_id}' not found"}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:387:1
    |
385 |         if not change.exists():
386 |         pass
387 |             return {"error": f"Change '{change_id}' not found"}
    | ^^^^^^^^^^^^
388 |
389 |         validation = change.validate()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:391:9
    |
389 |         validation = change.validate()
390 |         if not validation["valid"]:
391 |         pass
    |         ^^^^
392 |             return {"error": "Change validation failed", "validation": validation}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:392:1
    |
390 |         if not validation["valid"]:
391 |         pass
392 |             return {"error": "Change validation failed", "validation": validation}
    | ^^^^^^^^^^^^
393 |
394 |         tasks = change.get_tasks()
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:394:9
    |
392 |             return {"error": "Change validation failed", "validation": validation}
393 |
394 |         tasks = change.get_tasks()
    |         ^
395 |         if tasks.get("completion_rate", 0) < 100:
396 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:396:9
    |
394 |         tasks = change.get_tasks()
395 |         if tasks.get("completion_rate", 0) < 100:
396 |         pass
    |         ^^^^
397 |             return {"error": "Change not ready for application - tasks incomplete"}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:397:1
    |
395 |         if tasks.get("completion_rate", 0) < 100:
396 |         pass
397 |             return {"error": "Change not ready for application - tasks incomplete"}
    | ^^^^^^^^^^^^
398 |
399 |         # This is a placeholder - actual implementation would depend on change type
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:400:9
    |
399 |         # This is a placeholder - actual implementation would depend on change type
400 |         result = {
    |         ^
401 |             "success": not dry_run,
402 |             "dry_run": dry_run,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:408:9
    |
407 |         if dry_run:
408 |         pass
    |         ^^^^
409 |             result["actions_taken"].append(
410 |                 "DRY RUN: Would apply change to " "specifications"
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:409:1
    |
407 |         if dry_run:
408 |         pass
409 |             result["actions_taken"].append(
    | ^^^^^^^^^^^^
410 |                 "DRY RUN: Would apply change to " "specifications"
411 |             )
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:412:9
    |
410 |                 "DRY RUN: Would apply change to " "specifications"
411 |             )
412 |         else:
    |         ^
413 |         pass
414 |             result["actions_taken"].append("Applied change to specifications")
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:412:13
    |
410 |                 "DRY RUN: Would apply change to " "specifications"
411 |             )
412 |         else:
    |             ^
413 |         pass
414 |             result["actions_taken"].append("Applied change to specifications")
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:412:14
    |
410 |                 "DRY RUN: Would apply change to " "specifications"
411 |             )
412 |         else:
    |              ^
413 |         pass
414 |             result["actions_taken"].append("Applied change to specifications")
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:414:1
    |
412 |         else:
413 |         pass
414 |             result["actions_taken"].append("Applied change to specifications")
    | ^^^^^^^^^^^^
415 |             # Actual application logic would go here
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:417:9
    |
415 |             # Actual application logic would go here
416 |
417 |         return result
    |         ^
418 |
419 |     def archive_change(
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:419:5
    |
417 |         return result
418 |
419 |     def archive_change(
    |     ^
420 |         self,
421 |         change_id: str,
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:428:9
    |
427 |         if not change.exists():
428 |         pass
    |         ^^^^
429 |             return {"error": f"Change '{change_id}' not found"}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:429:1
    |
427 |         if not change.exists():
428 |         pass
429 |             return {"error": f"Change '{change_id}' not found"}
    | ^^^^^^^^^^^^
430 |
431 |         if change.get_status() != "completed":
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:432:9
    |
431 |         if change.get_status() != "completed":
432 |         pass
    |         ^^^^
433 |             return {"error": "Only completed changes can be archived"}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:433:1
    |
431 |         if change.get_status() != "completed":
432 |         pass
433 |             return {"error": "Only completed changes can be archived"}
    | ^^^^^^^^^^^^
434 |
435 |         # Create archive directory if it doesn't exist
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:436:9
    |
435 |         # Create archive directory if it doesn't exist
436 |         self.archive_path.mkdir(exist_ok=True)
    |         ^
437 |
438 |         # Determine archive name
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:440:9
    |
438 |         # Determine archive name
439 |         if create_timestamp:
440 |         pass
    |         ^^^^
441 |             timestamp = datetime.now().strftime("%Y-%m-%d")
442 |             archive_name = f"{timestamp}-{change_id}"
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:441:1
    |
439 |         if create_timestamp:
440 |         pass
441 |             timestamp = datetime.now().strftime("%Y-%m-%d")
    | ^^^^^^^^^^^^
442 |             archive_name = f"{timestamp}-{change_id}"
443 |         else:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:443:9
    |
441 |             timestamp = datetime.now().strftime("%Y-%m-%d")
442 |             archive_name = f"{timestamp}-{change_id}"
443 |         else:
    |         ^
444 |         pass
445 |             archive_name = change_id
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:443:13
    |
441 |             timestamp = datetime.now().strftime("%Y-%m-%d")
442 |             archive_name = f"{timestamp}-{change_id}"
443 |         else:
    |             ^
444 |         pass
445 |             archive_name = change_id
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:443:14
    |
441 |             timestamp = datetime.now().strftime("%Y-%m-%d")
442 |             archive_name = f"{timestamp}-{change_id}"
443 |         else:
    |              ^
444 |         pass
445 |             archive_name = change_id
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:445:1
    |
443 |         else:
444 |         pass
445 |             archive_name = change_id
    | ^^^^^^^^^^^^
446 |
447 |         archive_dest = self.archive_path / archive_name
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:447:9
    |
445 |             archive_name = change_id
446 |
447 |         archive_dest = self.archive_path / archive_name
    |         ^
448 |
449 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\openspec_governance.py:450:9
    |
449 |         try:
450 |         pass
    |         ^^^^
451 |             shutil.move(str(change.change_path), str(archive_dest))
452 |             return {
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:451:1
    |
449 |         try:
450 |         pass
451 |             shutil.move(str(change.change_path), str(archive_dest))
    | ^^^^^^^^^^^^
452 |             return {
453 |                 "success": True,
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:457:9
    |
455 |                 "original_path": str(change.change_path),
456 |             }
457 |         except Exception as e:
    |         ^
458 |         pass
459 |             return {"error": f"Failed to archive change: {str(e)}"}
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:457:26
    |
455 |                 "original_path": str(change.change_path),
456 |             }
457 |         except Exception as e:
    |                          ^^
458 |         pass
459 |             return {"error": f"Failed to archive change: {str(e)}"}
    |

invalid-syntax: Expected an expression
   --> backend\openspec_governance.py:457:31
    |
455 |                 "original_path": str(change.change_path),
456 |             }
457 |         except Exception as e:
    |                               ^
458 |         pass
459 |             return {"error": f"Failed to archive change: {str(e)}"}
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:459:1
    |
457 |         except Exception as e:
458 |         pass
459 |             return {"error": f"Failed to archive change: {str(e)}"}
    | ^^^^^^^^^^^^
460 |
461 |     def bulk_validate(self, change_ids: Optional[List[str]] = None) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:461:5
    |
459 |             return {"error": f"Failed to archive change: {str(e)}"}
460 |
461 |     def bulk_validate(self, change_ids: Optional[List[str]] = None) -> Dict[str, Any]:
    |     ^
462 |         """Validate multiple changes in bulk"""
463 |         if change_ids is None:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:464:9
    |
462 |         """Validate multiple changes in bulk"""
463 |         if change_ids is None:
464 |         pass
    |         ^^^^
465 |             # Validate all non-archived changes
466 |             all_changes = self.list_changes(include_archived=False)
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:466:1
    |
464 |         pass
465 |             # Validate all non-archived changes
466 |             all_changes = self.list_changes(include_archived=False)
    | ^^^^^^^^^^^^
467 |             change_ids = [c["change_id"] for c in all_changes]
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\openspec_governance.py:478:9
    |
477 |         for change_id in change_ids:
478 |         pass
    |         ^^^^
479 |             validation = self.validate_change(change_id)
480 |             results[change_id] = validation
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:479:1
    |
477 |         for change_id in change_ids:
478 |         pass
479 |             validation = self.validate_change(change_id)
    | ^^^^^^^^^^^^
480 |             results[change_id] = validation
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:483:13
    |
482 |             if "error" in validation:
483 |             pass
    |             ^^^^
484 |                 summary["invalid"] += 1
485 |             elif validation.get("valid", False):
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:484:1
    |
482 |             if "error" in validation:
483 |             pass
484 |                 summary["invalid"] += 1
    | ^^^^^^^^^^^^^^^^
485 |             elif validation.get("valid", False):
486 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:485:13
    |
483 |             pass
484 |                 summary["invalid"] += 1
485 |             elif validation.get("valid", False):
    |             ^
486 |             pass
487 |                 summary["valid"] += 1
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\openspec_governance.py:485:18
    |
483 |             pass
484 |                 summary["invalid"] += 1
485 |             elif validation.get("valid", False):
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
486 |             pass
487 |                 summary["valid"] += 1
    |

invalid-syntax: Expected an expression
   --> backend\openspec_governance.py:485:49
    |
483 |             pass
484 |                 summary["invalid"] += 1
485 |             elif validation.get("valid", False):
    |                                                 ^
486 |             pass
487 |                 summary["valid"] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:487:1
    |
485 |             elif validation.get("valid", False):
486 |             pass
487 |                 summary["valid"] += 1
    | ^^^^^^^^^^^^^^^^
488 |                 if validation.get("warnings"):
489 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:488:47
    |
486 |             pass
487 |                 summary["valid"] += 1
488 |                 if validation.get("warnings"):
    |                                               ^
489 |             pass
490 |                     summary["warnings"] += 1
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:489:13
    |
487 |                 summary["valid"] += 1
488 |                 if validation.get("warnings"):
489 |             pass
    |             ^
490 |                     summary["warnings"] += 1
491 |             else:
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:490:1
    |
488 |                 if validation.get("warnings"):
489 |             pass
490 |                     summary["warnings"] += 1
    | ^^^^^^^^^^^^^^^^^^^^
491 |             else:
492 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:491:13
    |
489 |             pass
490 |                     summary["warnings"] += 1
491 |             else:
    |             ^
492 |             pass
493 |                 summary["invalid"] += 1
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:491:17
    |
489 |             pass
490 |                     summary["warnings"] += 1
491 |             else:
    |                 ^
492 |             pass
493 |                 summary["invalid"] += 1
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:491:18
    |
489 |             pass
490 |                     summary["warnings"] += 1
491 |             else:
    |                  ^
492 |             pass
493 |                 summary["invalid"] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:493:1
    |
491 |             else:
492 |             pass
493 |                 summary["invalid"] += 1
    | ^^^^^^^^^^^^^^^^
494 |
495 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:495:9
    |
493 |                 summary["invalid"] += 1
494 |
495 |         return {
    |         ^
496 |             "summary": summary,
497 |             "results": results,
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:500:5
    |
498 |         }
499 |
500 |     def get_governance_metrics(self) -> Dict[str, Any]:
    |     ^
501 |         """Get overall governance metrics and statistics"""
502 |         all_changes = self.list_changes(include_archived=True)
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\openspec_governance.py:506:9
    |
504 |         status_counts = {}
505 |         for change in all_changes:
506 |         pass
    |         ^^^^
507 |             status = change["status"]
508 |             status_counts[status] = status_counts.get(status, 0) + 1
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:507:1
    |
505 |         for change in all_changes:
506 |         pass
507 |             status = change["status"]
    | ^^^^^^^^^^^^
508 |             status_counts[status] = status_counts.get(status, 0) + 1
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\openspec_governance.py:516:9
    |
515 |         for change in non_archived:
516 |         pass
    |         ^^^^
517 |             change_details = self.get_change_details(change["change_id"])
518 |             if "tasks" in change_details and "error" not in change_details["tasks"]:
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:517:1
    |
515 |         for change in non_archived:
516 |         pass
517 |             change_details = self.get_change_details(change["change_id"])
    | ^^^^^^^^^^^^
518 |             if "tasks" in change_details and "error" not in change_details["tasks"]:
519 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\openspec_governance.py:519:13
    |
517 |             change_details = self.get_change_details(change["change_id"])
518 |             if "tasks" in change_details and "error" not in change_details["tasks"]:
519 |             pass
    |             ^^^^
520 |                 tasks = change_details["tasks"]
521 |                 total_tasks += tasks.get("total_tasks", 0)
    |

invalid-syntax: Unexpected indentation
   --> backend\openspec_governance.py:520:1
    |
518 |             if "tasks" in change_details and "error" not in change_details["tasks"]:
519 |             pass
520 |                 tasks = change_details["tasks"]
    | ^^^^^^^^^^^^^^^^
521 |                 total_tasks += tasks.get("total_tasks", 0)
522 |                 completed_tasks += tasks.get("completed_tasks", 0)
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:524:9
    |
522 |                 completed_tasks += tasks.get("completed_tasks", 0)
523 |
524 |         overall_completion = (completed_tasks / max(total_tasks, 1)) * 100
    |         ^
525 |
526 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\openspec_governance.py:540:1
    |
539 | # Factory function for easy initialization
540 | def get_openspec_governance(base_path: str = ".") -> OpenSpecGovernance:
    | ^
541 |     """Get OpenSpec governance instance"""
542 |     return OpenSpecGovernance(base_path)
    |

E501 Line too long (90 > 88)
  --> backend\performance.py:90:89
   |
88 |         # L4: Predictive cache warming
89 |         self.enable_prediction = enable_prediction
90 |         self.access_patterns: Dict[str, list] = {}  # Track access patterns for prediction
   |                                                                                         ^^
91 |         self.prediction_queue = []  # Keys predicted to be accessed soon
92 |         self._prediction_lock = threading.Lock()
   |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:111:9
    |
109 |         # Start background cache warming if enabled
110 |         if self.enable_prediction:
111 |         pass
    |         ^^^^
112 |             self._start_cache_warming()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:112:1
    |
110 |         if self.enable_prediction:
111 |         pass
112 |             self._start_cache_warming()
    | ^^^^^^^^^^^^
113 |
114 |     def get(self, key: str, default: Any = None) -> Any:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:122:9
    |
120 |         # Check L1 first (fastest)
121 |         if key in self.l1_cache:
122 |         pass
    |         ^^^^
123 |             entry = self.l1_cache[key]
124 |             if not entry.is_expired():
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:123:1
    |
121 |         if key in self.l1_cache:
122 |         pass
123 |             entry = self.l1_cache[key]
    | ^^^^^^^^^^^^
124 |             if not entry.is_expired():
125 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:125:13
    |
123 |             entry = self.l1_cache[key]
124 |             if not entry.is_expired():
125 |             pass
    |             ^^^^
126 |                 entry.touch()
127 |                 self._stats["l1_hits"] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:126:1
    |
124 |             if not entry.is_expired():
125 |             pass
126 |                 entry.touch()
    | ^^^^^^^^^^^^^^^^
127 |                 self._stats["l1_hits"] += 1
128 |                 return entry.value
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:129:13
    |
127 |                 self._stats["l1_hits"] += 1
128 |                 return entry.value
129 |             else:
    |             ^^^^
130 |             pass
131 |                 del self.l1_cache[key]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:129:17
    |
127 |                 self._stats["l1_hits"] += 1
128 |                 return entry.value
129 |             else:
    |                 ^
130 |             pass
131 |                 del self.l1_cache[key]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:129:18
    |
127 |                 self._stats["l1_hits"] += 1
128 |                 return entry.value
129 |             else:
    |                  ^
130 |             pass
131 |                 del self.l1_cache[key]
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:131:1
    |
129 |             else:
130 |             pass
131 |                 del self.l1_cache[key]
    | ^^^^^^^^^^^^^^^^
132 |
133 |         # Check L2 (medium speed)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:134:9
    |
133 |         # Check L2 (medium speed)
134 |         with self._l2_lock:
    |         ^
135 |         pass
136 |             if key in self.l2_cache:
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:135:9
    |
133 |         # Check L2 (medium speed)
134 |         with self._l2_lock:
135 |         pass
    |         ^^^^
136 |             if key in self.l2_cache:
137 |                 entry = self.l2_cache[key]
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:136:1
    |
134 |         with self._l2_lock:
135 |         pass
136 |             if key in self.l2_cache:
    | ^^^^^^^^^^^^
137 |                 entry = self.l2_cache[key]
138 |                 if not entry.is_expired():
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:138:43
    |
136 |             if key in self.l2_cache:
137 |                 entry = self.l2_cache[key]
138 |                 if not entry.is_expired():
    |                                           ^
139 |             pass
140 |                     entry.touch()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:140:1
    |
138 |                 if not entry.is_expired():
139 |             pass
140 |                     entry.touch()
    | ^^^^^^^^^^^^^^^^^^^^
141 |                     # Promote to L1
142 |                     self._promote_to_l1(key, entry)
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:145:1
    |
143 |                     self._stats["l2_hits"] += 1
144 |                     return entry.value
145 |                 else:
    | ^^^^^^^^^^^^^^^^
146 |             pass
147 |                     del self.l2_cache[key]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:145:17
    |
143 |                     self._stats["l2_hits"] += 1
144 |                     return entry.value
145 |                 else:
    |                 ^^^^
146 |             pass
147 |                     del self.l2_cache[key]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:145:21
    |
143 |                     self._stats["l2_hits"] += 1
144 |                     return entry.value
145 |                 else:
    |                     ^
146 |             pass
147 |                     del self.l2_cache[key]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:145:22
    |
143 |                     self._stats["l2_hits"] += 1
144 |                     return entry.value
145 |                 else:
    |                      ^
146 |             pass
147 |                     del self.l2_cache[key]
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:147:1
    |
145 |                 else:
146 |             pass
147 |                     del self.l2_cache[key]
    | ^^^^^^^^^^^^^^^^^^^^
148 |         # Check L3 (slower, compressed)
149 |         if hasattr(self, "l3_cache"):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:149:9
    |
147 |                     del self.l2_cache[key]
148 |         # Check L3 (slower, compressed)
149 |         if hasattr(self, "l3_cache"):
    |         ^
150 |         pass
151 |             l3_entry = self._decompress_from_l3(key)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:150:9
    |
148 |         # Check L3 (slower, compressed)
149 |         if hasattr(self, "l3_cache"):
150 |         pass
    |         ^^^^
151 |             l3_entry = self._decompress_from_l3(key)
152 |             if l3_entry:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:151:1
    |
149 |         if hasattr(self, "l3_cache"):
150 |         pass
151 |             l3_entry = self._decompress_from_l3(key)
    | ^^^^^^^^^^^^
152 |             if l3_entry:
153 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:153:13
    |
151 |             l3_entry = self._decompress_from_l3(key)
152 |             if l3_entry:
153 |             pass
    |             ^^^^
154 |                 # Promote to L2/L1
155 |                 self._promote_to_l2(key, l3_entry)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:155:1
    |
153 |             pass
154 |                 # Promote to L2/L1
155 |                 self._promote_to_l2(key, l3_entry)
    | ^^^^^^^^^^^^^^^^
156 |                 self._promote_to_l1(key, l3_entry)
157 |                 self._stats["l3_hits"] += 1
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:159:9
    |
157 |                 self._stats["l3_hits"] += 1
158 |                 return l3_entry.value
159 |         self._stats["misses"] += 1
    |         ^
160 |         return default
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:162:5
    |
160 |         return default
161 |
162 |     def set(self, key: str, value: Any, ttl: int = 3600):
    |     ^
163 |         """Set value in cache with automatic level management"""
164 |         now = time.time()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:178:9
    |
176 |         """Promote frequently accessed L2 items to L1"""
177 |         if len(self.l1_cache) >= self.l1_max_size:
178 |         pass
    |         ^^^^
179 |             self._evict_l1_lru()
180 |         self.l1_cache[key] = entry
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:179:1
    |
177 |         if len(self.l1_cache) >= self.l1_max_size:
178 |         pass
179 |             self._evict_l1_lru()
    | ^^^^^^^^^^^^
180 |         self.l1_cache[key] = entry
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:182:5
    |
180 |         self.l1_cache[key] = entry
181 |
182 |     def _set_l1(self, key: str, entry: CacheEntry):
    |     ^
183 |         pass
184 |         """Set entry in L1 cache with LRU eviction"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:186:9
    |
184 |         """Set entry in L1 cache with LRU eviction"""
185 |         if len(self.l1_cache) >= self.l1_max_size:
186 |         pass
    |         ^^^^
187 |             self._evict_l1_lru()
188 |         self.l1_cache[key] = entry
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:187:1
    |
185 |         if len(self.l1_cache) >= self.l1_max_size:
186 |         pass
187 |             self._evict_l1_lru()
    | ^^^^^^^^^^^^
188 |         self.l1_cache[key] = entry
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:190:5
    |
188 |         self.l1_cache[key] = entry
189 |
190 |     def _load_l2_cache(self):
    |     ^
191 |         pass
192 |         """Load L2 cache from disk if available."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:194:9
    |
192 |         """Load L2 cache from disk if available."""
193 |         with self._l2_lock:
194 |         pass
    |         ^^^^
195 |             if self.l2_file.exists():
196 |                 try:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:195:1
    |
193 |         with self._l2_lock:
194 |         pass
195 |             if self.l2_file.exists():
    | ^^^^^^^^^^^^
196 |                 try:
197 |             pass
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:196:21
    |
194 |         pass
195 |             if self.l2_file.exists():
196 |                 try:
    |                     ^
197 |             pass
198 |                     with open(self.l2_file, "r", encoding="utf-8") as f:
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\performance.py:197:13
    |
195 |             if self.l2_file.exists():
196 |                 try:
197 |             pass
    |             ^
198 |                     with open(self.l2_file, "r", encoding="utf-8") as f:
199 |                         data = json.load(f)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:198:1
    |
196 |                 try:
197 |             pass
198 |                     with open(self.l2_file, "r", encoding="utf-8") as f:
    | ^^^^^^^^^^^^^^^^^^^^
199 |                         data = json.load(f)
200 |                         for key, entry_data in data.items():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\performance.py:200:61
    |
198 |                     with open(self.l2_file, "r", encoding="utf-8") as f:
199 |                         data = json.load(f)
200 |                         for key, entry_data in data.items():
    |                                                             ^
201 |                 pass
202 |                             entry = CacheEntry(
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:201:17
    |
199 |                         data = json.load(f)
200 |                         for key, entry_data in data.items():
201 |                 pass
    |                 ^
202 |                             entry = CacheEntry(
203 |                                 value=entry_data["value"],
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:202:1
    |
200 |                         for key, entry_data in data.items():
201 |                 pass
202 |                             entry = CacheEntry(
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
203 |                                 value=entry_data["value"],
204 |                                 timestamp=entry_data["timestamp"],
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:212:1
    |
210 |                             )
211 |                             if not entry.is_expired():
212 |                     pass
    | ^^^^^^^^^^^^^^^^^^^^
213 |                                 self.l2_cache[key] = entry
214 |                 except (json.JSONDecodeError, KeyError, OSError) as e:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:213:1
    |
211 |                             if not entry.is_expired():
212 |                     pass
213 |                                 self.l2_cache[key] = entry
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
214 |                 except (json.JSONDecodeError, KeyError, OSError) as e:
215 |         pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:214:1
    |
212 |                     pass
213 |                                 self.l2_cache[key] = entry
214 |                 except (json.JSONDecodeError, KeyError, OSError) as e:
    | ^^^^^^^^^^^^^^^^
215 |         pass
216 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:214:17
    |
212 |                     pass
213 |                                 self.l2_cache[key] = entry
214 |                 except (json.JSONDecodeError, KeyError, OSError) as e:
    |                 ^^^^^^
215 |         pass
216 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:214:66
    |
212 |                     pass
213 |                                 self.l2_cache[key] = entry
214 |                 except (json.JSONDecodeError, KeyError, OSError) as e:
    |                                                                  ^^
215 |         pass
216 |             pass
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:214:71
    |
212 |                     pass
213 |                                 self.l2_cache[key] = entry
214 |                 except (json.JSONDecodeError, KeyError, OSError) as e:
    |                                                                       ^
215 |         pass
216 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:216:1
    |
214 |                 except (json.JSONDecodeError, KeyError, OSError) as e:
215 |         pass
216 |             pass
    | ^^^^^^^^^^^^
217 |                     # If loading fails, start with empty cache
218 |                     self.l2_cache = {}
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:218:1
    |
216 |             pass
217 |                     # If loading fails, start with empty cache
218 |                     self.l2_cache = {}
    | ^^^^^^^^^^^^^^^^^^^^
219 |                     logging.warning(f"Failed to load L2 cache: {e}")
220 |             else:
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:220:13
    |
218 |                     self.l2_cache = {}
219 |                     logging.warning(f"Failed to load L2 cache: {e}")
220 |             else:
    |             ^
221 |             pass
222 |                 self.l2_cache = {}
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:220:17
    |
218 |                     self.l2_cache = {}
219 |                     logging.warning(f"Failed to load L2 cache: {e}")
220 |             else:
    |                 ^
221 |             pass
222 |                 self.l2_cache = {}
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:220:18
    |
218 |                     self.l2_cache = {}
219 |                     logging.warning(f"Failed to load L2 cache: {e}")
220 |             else:
    |                  ^
221 |             pass
222 |                 self.l2_cache = {}
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:222:1
    |
220 |             else:
221 |             pass
222 |                 self.l2_cache = {}
    | ^^^^^^^^^^^^^^^^
223 |
224 |     def _evict_l1_lru(self):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:224:5
    |
222 |                 self.l2_cache = {}
223 |
224 |     def _evict_l1_lru(self):
    |     ^
225 |         """Evict least recently used item from L1 to L2"""
226 |         if not self.l1_cache:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:227:9
    |
225 |         """Evict least recently used item from L1 to L2"""
226 |         if not self.l1_cache:
227 |         pass
    |         ^^^^
228 |             return
229 |         # Find LRU item
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:228:1
    |
226 |         if not self.l1_cache:
227 |         pass
228 |             return
    | ^^^^^^^^^^^^
229 |         # Find LRU item
230 |         lru_key = min(self.l1_cache.keys(), key=lambda k: self.l1_cache[k].last_access)
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:234:9
    |
232 |         # Move to L2 if not expired
233 |         with self._l2_lock:
234 |         pass
    |         ^^^^
235 |             if not lru_entry.is_expired():
236 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:235:1
    |
233 |         with self._l2_lock:
234 |         pass
235 |             if not lru_entry.is_expired():
    | ^^^^^^^^^^^^
236 |             pass
237 |                 if len(self.l2_cache) >= self.l2_max_size:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:236:13
    |
234 |         pass
235 |             if not lru_entry.is_expired():
236 |             pass
    |             ^^^^
237 |                 if len(self.l2_cache) >= self.l2_max_size:
238 |                     self._evict_l2_lru()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:237:1
    |
235 |             if not lru_entry.is_expired():
236 |             pass
237 |                 if len(self.l2_cache) >= self.l2_max_size:
    | ^^^^^^^^^^^^^^^^
238 |                     self._evict_l2_lru()
239 |                 self.l2_cache[lru_key] = lru_entry
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:241:9
    |
239 |                 self.l2_cache[lru_key] = lru_entry
240 |                 self._persist_l2_cache()
241 |         self._stats["evictions"] += 1
    |         ^
242 |
243 |     def _evict_l2_lru(self):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:243:5
    |
241 |         self._stats["evictions"] += 1
242 |
243 |     def _evict_l2_lru(self):
    |     ^
244 |         pass
245 |         """Evict least recently used item from L2 to L3"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:247:9
    |
245 |         """Evict least recently used item from L2 to L3"""
246 |         if not self.l2_cache:
247 |         pass
    |         ^^^^
248 |             return
249 |         # Find LRU item
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:248:1
    |
246 |         if not self.l2_cache:
247 |         pass
248 |             return
    | ^^^^^^^^^^^^
249 |         # Find LRU item
250 |         lru_key = min(self.l2_cache.keys(), key=lambda k: self.l2_cache[k].last_access)
    |

E501 Line too long (106 > 88)
   --> backend\performance.py:253:89
    |
251 |         lru_entry = self.l2_cache.pop(lru_key)
252 |         # Move to L3 if compression enabled and not expired
253 |         if not lru_entry.is_expired() and hasattr(self, 'enable_compression') and self.enable_compression:
    |                                                                                         ^^^^^^^^^^^^^^^^^^
254 |         pass
255 |             if len(self.l3_cache) >= self.l3_max_size:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:254:9
    |
252 |         # Move to L3 if compression enabled and not expired
253 |         if not lru_entry.is_expired() and hasattr(self, 'enable_compression') and self.enable_compression:
254 |         pass
    |         ^^^^
255 |             if len(self.l3_cache) >= self.l3_max_size:
256 |                 self._evict_l3_lru()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:255:1
    |
253 |         if not lru_entry.is_expired() and hasattr(self, 'enable_compression') and self.enable_compression:
254 |         pass
255 |             if len(self.l3_cache) >= self.l3_max_size:
    | ^^^^^^^^^^^^
256 |                 self._evict_l3_lru()
257 |             self._compress_to_l3(lru_key, lru_entry)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:258:9
    |
256 |                 self._evict_l3_lru()
257 |             self._compress_to_l3(lru_key, lru_entry)
258 |         self._stats["evictions"] += 1
    |         ^
259 |
260 |     def _evict_l3_lru(self):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:260:5
    |
258 |         self._stats["evictions"] += 1
259 |
260 |     def _evict_l3_lru(self):
    |     ^
261 |         pass
262 |         """Evict least recently used item from L3 (permanent deletion)"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:264:9
    |
262 |         """Evict least recently used item from L3 (permanent deletion)"""
263 |         if not self.l3_cache:
264 |         pass
    |         ^^^^
265 |             return
266 |         # Find oldest archive file
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:265:1
    |
263 |         if not self.l3_cache:
264 |         pass
265 |             return
    | ^^^^^^^^^^^^
266 |         # Find oldest archive file
267 |         oldest_key = None
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\performance.py:270:9
    |
268 |         oldest_time = float("inf")
269 |         for key, archive_path in self.l3_cache.items():
270 |         pass
    |         ^^^^
271 |             try:
272 |                 path_obj = Path(archive_path)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:271:1
    |
269 |         for key, archive_path in self.l3_cache.items():
270 |         pass
271 |             try:
    | ^^^^^^^^^^^^
272 |                 path_obj = Path(archive_path)
273 |                 if path_obj.exists():
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:273:38
    |
271 |             try:
272 |                 path_obj = Path(archive_path)
273 |                 if path_obj.exists():
    |                                      ^
274 |             pass
275 |                     mtime = path_obj.stat().st_mtime
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\performance.py:274:13
    |
272 |                 path_obj = Path(archive_path)
273 |                 if path_obj.exists():
274 |             pass
    |             ^^^^
275 |                     mtime = path_obj.stat().st_mtime
276 |                     if mtime < oldest_time:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:275:1
    |
273 |                 if path_obj.exists():
274 |             pass
275 |                     mtime = path_obj.stat().st_mtime
    | ^^^^^^^^^^^^^^^^^^^^
276 |                     if mtime < oldest_time:
277 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:277:1
    |
275 |                     mtime = path_obj.stat().st_mtime
276 |                     if mtime < oldest_time:
277 |                 pass
    | ^^^^^^^^^^^^^^^^
278 |                         oldest_time = mtime
279 |                         oldest_key = key
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:278:1
    |
276 |                     if mtime < oldest_time:
277 |                 pass
278 |                         oldest_time = mtime
    | ^^^^^^^^^^^^^^^^^^^^^^^^
279 |                         oldest_key = key
280 |             except (OSError, ValueError):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:280:13
    |
278 |                         oldest_time = mtime
279 |                         oldest_key = key
280 |             except (OSError, ValueError):
    |             ^
281 |             pass
282 |                 continue
    |

invalid-syntax: Only single target (not tuple) can be annotated
   --> backend\performance.py:280:20
    |
278 |                         oldest_time = mtime
279 |                         oldest_key = key
280 |             except (OSError, ValueError):
    |                    ^^^^^^^^^^^^^^^^^^^^^
281 |             pass
282 |                 continue
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:280:42
    |
278 |                         oldest_time = mtime
279 |                         oldest_key = key
280 |             except (OSError, ValueError):
    |                                          ^
281 |             pass
282 |                 continue
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:282:1
    |
280 |             except (OSError, ValueError):
281 |             pass
282 |                 continue
    | ^^^^^^^^^^^^^^^^
283 |         if oldest_key:
284 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:283:9
    |
281 |             pass
282 |                 continue
283 |         if oldest_key:
    |         ^
284 |         pass
285 |             # Remove archive file and index entry
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:284:9
    |
282 |                 continue
283 |         if oldest_key:
284 |         pass
    |         ^^^^
285 |             # Remove archive file and index entry
286 |             try:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:286:1
    |
284 |         pass
285 |             # Remove archive file and index entry
286 |             try:
    | ^^^^^^^^^^^^
287 |             pass
288 |                 archive_path = Path(self.l3_cache[oldest_key])
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:287:13
    |
285 |             # Remove archive file and index entry
286 |             try:
287 |             pass
    |             ^^^^
288 |                 archive_path = Path(self.l3_cache[oldest_key])
289 |                 archive_path.unlink(missing_ok=True)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:288:1
    |
286 |             try:
287 |             pass
288 |                 archive_path = Path(self.l3_cache[oldest_key])
    | ^^^^^^^^^^^^^^^^
289 |                 archive_path.unlink(missing_ok=True)
290 |                 with self._l3_lock:
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:290:36
    |
288 |                 archive_path = Path(self.l3_cache[oldest_key])
289 |                 archive_path.unlink(missing_ok=True)
290 |                 with self._l3_lock:
    |                                    ^
291 |             pass
292 |                     del self.l3_cache[oldest_key]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:291:13
    |
289 |                 archive_path.unlink(missing_ok=True)
290 |                 with self._l3_lock:
291 |             pass
    |             ^
292 |                     del self.l3_cache[oldest_key]
293 |                     self._save_l3_index()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:292:1
    |
290 |                 with self._l3_lock:
291 |             pass
292 |                     del self.l3_cache[oldest_key]
    | ^^^^^^^^^^^^^^^^^^^^
293 |                     self._save_l3_index()
294 |             except Exception as e:
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:294:13
    |
292 |                     del self.l3_cache[oldest_key]
293 |                     self._save_l3_index()
294 |             except Exception as e:
    |             ^
295 |             pass
296 |                 logger.warning(f"Failed to evict L3 entry: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:294:30
    |
292 |                     del self.l3_cache[oldest_key]
293 |                     self._save_l3_index()
294 |             except Exception as e:
    |                              ^^
295 |             pass
296 |                 logger.warning(f"Failed to evict L3 entry: {e}")
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:294:35
    |
292 |                     del self.l3_cache[oldest_key]
293 |                     self._save_l3_index()
294 |             except Exception as e:
    |                                   ^
295 |             pass
296 |                 logger.warning(f"Failed to evict L3 entry: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:296:1
    |
294 |             except Exception as e:
295 |             pass
296 |                 logger.warning(f"Failed to evict L3 entry: {e}")
    | ^^^^^^^^^^^^^^^^
297 |
298 |     def _promote_to_l1(self, key: str, entry: CacheEntry):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:298:5
    |
296 |                 logger.warning(f"Failed to evict L3 entry: {e}")
297 |
298 |     def _promote_to_l1(self, key: str, entry: CacheEntry):
    |     ^
299 |         pass
300 |         """Promote entry to L1 cache"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:302:9
    |
300 |         """Promote entry to L1 cache"""
301 |         if len(self.l1_cache) >= self.l1_max_size:
302 |         pass
    |         ^^^^
303 |             self._evict_l1_lru()
304 |         self.l1_cache[key] = entry
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:303:1
    |
301 |         if len(self.l1_cache) >= self.l1_max_size:
302 |         pass
303 |             self._evict_l1_lru()
    | ^^^^^^^^^^^^
304 |         self.l1_cache[key] = entry
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:308:5
    |
306 |     # no-op placeholder removed; method above now concludes the block correctly
307 |
308 |     def _persist_l2_cache(self):
    |     ^
309 |         pass
310 |         """Persist L2 cache to disk (async in background)"""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:314:13
    |
312 |         def save_cache():
313 |             with self._l2_lock:
314 |             pass
    |             ^^^^
315 |                 try:
316 |                     data = {}
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:315:1
    |
313 |             with self._l2_lock:
314 |             pass
315 |                 try:
    | ^^^^^^^^^^^^^^^^
316 |                     data = {}
317 |                     for key, entry in self.l2_cache.items():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\performance.py:317:61
    |
315 |                 try:
316 |                     data = {}
317 |                     for key, entry in self.l2_cache.items():
    |                                                             ^
318 |                 pass
319 |                         if not entry.is_expired():
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\performance.py:318:17
    |
316 |                     data = {}
317 |                     for key, entry in self.l2_cache.items():
318 |                 pass
    |                 ^^^^
319 |                         if not entry.is_expired():
320 |                 pass
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:319:1
    |
317 |                     for key, entry in self.l2_cache.items():
318 |                 pass
319 |                         if not entry.is_expired():
    | ^^^^^^^^^^^^^^^^^^^^^^^^
320 |                 pass
321 |                             data[key] = {
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:319:51
    |
317 |                     for key, entry in self.l2_cache.items():
318 |                 pass
319 |                         if not entry.is_expired():
    |                                                   ^
320 |                 pass
321 |                             data[key] = {
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:321:1
    |
319 |                         if not entry.is_expired():
320 |                 pass
321 |                             data[key] = {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
322 |                                 "value": entry.value,
323 |                                 "timestamp": entry.timestamp,
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:329:1
    |
327 |                             }
328 |
329 |                     with open(self.l2_file, "w") as f:
    | ^^^^^^^^^^^^^^^^^^^^
330 |                 pass
331 |                         json.dump(data, f)
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:330:17
    |
329 |                     with open(self.l2_file, "w") as f:
330 |                 pass
    |                 ^^^^
331 |                         json.dump(data, f)
332 |                 except Exception as e:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:331:1
    |
329 |                     with open(self.l2_file, "w") as f:
330 |                 pass
331 |                         json.dump(data, f)
    | ^^^^^^^^^^^^^^^^^^^^^^^^
332 |                 except Exception as e:
333 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:332:17
    |
330 |                 pass
331 |                         json.dump(data, f)
332 |                 except Exception as e:
    |                 ^^^^^^
333 |             pass
334 |                     # Log error but don't crash the thread
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:332:34
    |
330 |                 pass
331 |                         json.dump(data, f)
332 |                 except Exception as e:
    |                                  ^^
333 |             pass
334 |                     # Log error but don't crash the thread
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:332:39
    |
330 |                 pass
331 |                         json.dump(data, f)
332 |                 except Exception as e:
    |                                       ^
333 |             pass
334 |                     # Log error but don't crash the thread
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:333:13
    |
331 |                         json.dump(data, f)
332 |                 except Exception as e:
333 |             pass
    |             ^
334 |                     # Log error but don't crash the thread
335 |                     logger.warning(f"Failed to persist L2 cache: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:335:1
    |
333 |             pass
334 |                     # Log error but don't crash the thread
335 |                     logger.warning(f"Failed to persist L2 cache: {e}")
    | ^^^^^^^^^^^^^^^^^^^^
336 |
337 |         # Run in background thread
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:338:9
    |
337 |         # Run in background thread
338 |         threading.Thread(target=save_cache, daemon=True).start()
    |         ^
339 |
340 |     def _load_l3_cache(self):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:340:5
    |
338 |         threading.Thread(target=save_cache, daemon=True).start()
339 |
340 |     def _load_l3_cache(self):
    |     ^
341 |         """Load L3 archive cache index."""
342 |         l3_index_file = self.l3_archive_dir / "index.json"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:344:9
    |
342 |         l3_index_file = self.l3_archive_dir / "index.json"
343 |         if l3_index_file.exists():
344 |         pass
    |         ^^^^
345 |             try:
346 |                 with open(l3_index_file, "r") as f:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:345:1
    |
343 |         if l3_index_file.exists():
344 |         pass
345 |             try:
    | ^^^^^^^^^^^^
346 |                 with open(l3_index_file, "r") as f:
347 |             pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:346:52
    |
344 |         pass
345 |             try:
346 |                 with open(l3_index_file, "r") as f:
    |                                                    ^
347 |             pass
348 |                     self.l3_cache = json.load(f)
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\performance.py:347:13
    |
345 |             try:
346 |                 with open(l3_index_file, "r") as f:
347 |             pass
    |             ^^^^
348 |                     self.l3_cache = json.load(f)
349 |                 # Verify archive files exist
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:348:1
    |
346 |                 with open(l3_index_file, "r") as f:
347 |             pass
348 |                     self.l3_cache = json.load(f)
    | ^^^^^^^^^^^^^^^^^^^^
349 |                 # Verify archive files exist
350 |                 valid_entries = {}
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:350:1
    |
348 |                     self.l3_cache = json.load(f)
349 |                 # Verify archive files exist
350 |                 valid_entries = {}
    | ^^^^^^^^^^^^^^^^
351 |                 for key, archive_path in self.l3_cache.items():
352 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:351:1
    |
349 |                 # Verify archive files exist
350 |                 valid_entries = {}
351 |                 for key, archive_path in self.l3_cache.items():
    | ^^^^^^^^^^^^^^^^
352 |             pass
353 |                     if Path(archive_path).exists():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\performance.py:351:64
    |
349 |                 # Verify archive files exist
350 |                 valid_entries = {}
351 |                 for key, archive_path in self.l3_cache.items():
    |                                                                ^
352 |             pass
353 |                     if Path(archive_path).exists():
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:353:1
    |
351 |                 for key, archive_path in self.l3_cache.items():
352 |             pass
353 |                     if Path(archive_path).exists():
    | ^^^^^^^^^^^^^^^^^^^^
354 |                         valid_entries[key] = archive_path
355 |                 self.l3_cache = valid_entries
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:355:17
    |
353 |                     if Path(archive_path).exists():
354 |                         valid_entries[key] = archive_path
355 |                 self.l3_cache = valid_entries
    |                 ^
356 |             except Exception as e:
357 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:356:13
    |
354 |                         valid_entries[key] = archive_path
355 |                 self.l3_cache = valid_entries
356 |             except Exception as e:
    |             ^^^^^^
357 |             pass
358 |                 logger.warning(f"Failed to load L3 cache index: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:356:30
    |
354 |                         valid_entries[key] = archive_path
355 |                 self.l3_cache = valid_entries
356 |             except Exception as e:
    |                              ^^
357 |             pass
358 |                 logger.warning(f"Failed to load L3 cache index: {e}")
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:356:35
    |
354 |                         valid_entries[key] = archive_path
355 |                 self.l3_cache = valid_entries
356 |             except Exception as e:
    |                                   ^
357 |             pass
358 |                 logger.warning(f"Failed to load L3 cache index: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:358:1
    |
356 |             except Exception as e:
357 |             pass
358 |                 logger.warning(f"Failed to load L3 cache index: {e}")
    | ^^^^^^^^^^^^^^^^
359 |                 self.l3_cache = {}
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:361:5
    |
359 |                 self.l3_cache = {}
360 |
361 |     def _save_l3_index(self):
    |     ^
362 |         """Save L3 cache index."""
363 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:364:9
    |
362 |         """Save L3 cache index."""
363 |         try:
364 |         pass
    |         ^^^^
365 |             l3_index_file = self.l3_archive_dir / "index.json"
366 |             with open(l3_index_file, "w") as f:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:365:1
    |
363 |         try:
364 |         pass
365 |             l3_index_file = self.l3_archive_dir / "index.json"
    | ^^^^^^^^^^^^
366 |             with open(l3_index_file, "w") as f:
367 |             pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:367:13
    |
365 |             l3_index_file = self.l3_archive_dir / "index.json"
366 |             with open(l3_index_file, "w") as f:
367 |             pass
    |             ^^^^
368 |                 json.dump(self.l3_cache, f)
369 |         except Exception as e:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:368:1
    |
366 |             with open(l3_index_file, "w") as f:
367 |             pass
368 |                 json.dump(self.l3_cache, f)
    | ^^^^^^^^^^^^^^^^
369 |         except Exception as e:
370 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:369:9
    |
367 |             pass
368 |                 json.dump(self.l3_cache, f)
369 |         except Exception as e:
    |         ^
370 |         pass
371 |             logger.warning(f"Failed to save L3 cache index: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:369:26
    |
367 |             pass
368 |                 json.dump(self.l3_cache, f)
369 |         except Exception as e:
    |                          ^^
370 |         pass
371 |             logger.warning(f"Failed to save L3 cache index: {e}")
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:369:31
    |
367 |             pass
368 |                 json.dump(self.l3_cache, f)
369 |         except Exception as e:
    |                               ^
370 |         pass
371 |             logger.warning(f"Failed to save L3 cache index: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:371:1
    |
369 |         except Exception as e:
370 |         pass
371 |             logger.warning(f"Failed to save L3 cache index: {e}")
    | ^^^^^^^^^^^^
372 |
373 |     def _compress_to_l3(self, key: str, entry: CacheEntry) -> bool:
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:373:5
    |
371 |             logger.warning(f"Failed to save L3 cache index: {e}")
372 |
373 |     def _compress_to_l3(self, key: str, entry: CacheEntry) -> bool:
    |     ^
374 |         pass
375 |         """Compress and store entry in L3 archive."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:377:9
    |
375 |         """Compress and store entry in L3 archive."""
376 |         if not self.enable_compression:
377 |         pass
    |         ^^^^
378 |             return False
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:378:1
    |
376 |         if not self.enable_compression:
377 |         pass
378 |             return False
    | ^^^^^^^^^^^^
379 |
380 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:381:9
    |
380 |         try:
381 |         pass
    |         ^^^^
382 |             import gzip
383 |             import pickle
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:382:1
    |
380 |         try:
381 |         pass
382 |             import gzip
    | ^^^^^^^^^^^^
383 |             import pickle
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:390:13
    |
388 |             # Compress and store entry
389 |             with gzip.open(archive_path, "wb") as f:
390 |             pass
    |             ^^^^
391 |                 payload = {
392 |                     "value": entry.value,
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:391:1
    |
389 |             with gzip.open(archive_path, "wb") as f:
390 |             pass
391 |                 payload = {
    | ^^^^^^^^^^^^^^^^
392 |                     "value": entry.value,
393 |                     "timestamp": entry.timestamp,
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:400:13
    |
398 |                 pickle.dump(payload, f)
399 |             # Update L3 index
400 |             with self._l3_lock:
    |             ^
401 |             pass
402 |                 self.l3_cache[key] = str(archive_path)
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:401:13
    |
399 |             # Update L3 index
400 |             with self._l3_lock:
401 |             pass
    |             ^^^^
402 |                 self.l3_cache[key] = str(archive_path)
403 |                 self._save_l3_index()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:402:1
    |
400 |             with self._l3_lock:
401 |             pass
402 |                 self.l3_cache[key] = str(archive_path)
    | ^^^^^^^^^^^^^^^^
403 |                 self._save_l3_index()
404 |             self._stats["compressions"] += 1
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:404:13
    |
402 |                 self.l3_cache[key] = str(archive_path)
403 |                 self._save_l3_index()
404 |             self._stats["compressions"] += 1
    |             ^
405 |             return True
406 |         except Exception as e:
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:406:9
    |
404 |             self._stats["compressions"] += 1
405 |             return True
406 |         except Exception as e:
    |         ^
407 |         pass
408 |             logger.warning(f"Failed to compress entry to L3: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:406:26
    |
404 |             self._stats["compressions"] += 1
405 |             return True
406 |         except Exception as e:
    |                          ^^
407 |         pass
408 |             logger.warning(f"Failed to compress entry to L3: {e}")
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:406:31
    |
404 |             self._stats["compressions"] += 1
405 |             return True
406 |         except Exception as e:
    |                               ^
407 |         pass
408 |             logger.warning(f"Failed to compress entry to L3: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:408:1
    |
406 |         except Exception as e:
407 |         pass
408 |             logger.warning(f"Failed to compress entry to L3: {e}")
    | ^^^^^^^^^^^^
409 |             return False
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:411:5
    |
409 |             return False
410 |
411 |     def _decompress_from_l3(self, key: str) -> Optional[CacheEntry]:
    |     ^
412 |         pass
413 |         """Decompress and retrieve entry from L3 archive."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:415:9
    |
413 |         """Decompress and retrieve entry from L3 archive."""
414 |         if key not in self.l3_cache:
415 |         pass
    |         ^^^^
416 |             return None
417 |         try:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:416:1
    |
414 |         if key not in self.l3_cache:
415 |         pass
416 |             return None
    | ^^^^^^^^^^^^
417 |         try:
418 |         pass
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:418:9
    |
416 |             return None
417 |         try:
418 |         pass
    |         ^^^^
419 |             import gzip
420 |             import pickle
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:419:1
    |
417 |         try:
418 |         pass
419 |             import gzip
    | ^^^^^^^^^^^^
420 |             import pickle
421 |             archive_path = Path(self.l3_cache[key])
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:423:13
    |
421 |             archive_path = Path(self.l3_cache[key])
422 |             if not archive_path.exists():
423 |             pass
    |             ^^^^
424 |                 # Remove stale entry
425 |                 with self._l3_lock:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:425:1
    |
423 |             pass
424 |                 # Remove stale entry
425 |                 with self._l3_lock:
    | ^^^^^^^^^^^^^^^^
426 |             pass
427 |                     del self.l3_cache[key]
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:425:36
    |
423 |             pass
424 |                 # Remove stale entry
425 |                 with self._l3_lock:
    |                                    ^
426 |             pass
427 |                     del self.l3_cache[key]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:426:13
    |
424 |                 # Remove stale entry
425 |                 with self._l3_lock:
426 |             pass
    |             ^
427 |                     del self.l3_cache[key]
428 |                     self._save_l3_index()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:427:1
    |
425 |                 with self._l3_lock:
426 |             pass
427 |                     del self.l3_cache[key]
    | ^^^^^^^^^^^^^^^^^^^^
428 |                     self._save_l3_index()
429 |                 return None
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:429:1
    |
427 |                     del self.l3_cache[key]
428 |                     self._save_l3_index()
429 |                 return None
    | ^^^^^^^^^^^^^^^^
430 |             # Decompress entry
431 |             with gzip.open(archive_path, "rb") as f:
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:432:13
    |
430 |             # Decompress entry
431 |             with gzip.open(archive_path, "rb") as f:
432 |             pass
    |             ^^^^
433 |                 data = pickle.load(f)
434 |             entry = CacheEntry(
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:433:1
    |
431 |             with gzip.open(archive_path, "rb") as f:
432 |             pass
433 |                 data = pickle.load(f)
    | ^^^^^^^^^^^^^^^^
434 |             entry = CacheEntry(
435 |                 value=data["value"],
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:434:13
    |
432 |             pass
433 |                 data = pickle.load(f)
434 |             entry = CacheEntry(
    |             ^
435 |                 value=data["value"],
436 |                 timestamp=data['timestamp'],
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:442:13
    |
440 |             )
441 |             if entry.is_expired():
442 |             pass
    |             ^^^^
443 |                 # Clean up expired entry
444 |                 archive_path.unlink(missing_ok=True)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:444:1
    |
442 |             pass
443 |                 # Clean up expired entry
444 |                 archive_path.unlink(missing_ok=True)
    | ^^^^^^^^^^^^^^^^
445 |                 with self._l3_lock:
446 |             pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:445:36
    |
443 |                 # Clean up expired entry
444 |                 archive_path.unlink(missing_ok=True)
445 |                 with self._l3_lock:
    |                                    ^
446 |             pass
447 |                     del self.l3_cache[key]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:446:13
    |
444 |                 archive_path.unlink(missing_ok=True)
445 |                 with self._l3_lock:
446 |             pass
    |             ^
447 |                     del self.l3_cache[key]
448 |                     self._save_l3_index()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:447:1
    |
445 |                 with self._l3_lock:
446 |             pass
447 |                     del self.l3_cache[key]
    | ^^^^^^^^^^^^^^^^^^^^
448 |                     self._save_l3_index()
449 |                 return None
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:449:1
    |
447 |                     del self.l3_cache[key]
448 |                     self._save_l3_index()
449 |                 return None
    | ^^^^^^^^^^^^^^^^
450 |             self._stats["decompressions"] += 1
451 |             return entry
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:452:9
    |
450 |             self._stats["decompressions"] += 1
451 |             return entry
452 |         except Exception as e:
    |         ^
453 |         pass
454 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:452:26
    |
450 |             self._stats["decompressions"] += 1
451 |             return entry
452 |         except Exception as e:
    |                          ^^
453 |         pass
454 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:452:31
    |
450 |             self._stats["decompressions"] += 1
451 |             return entry
452 |         except Exception as e:
    |                               ^
453 |         pass
454 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:455:1
    |
453 |         pass
454 |         pass
455 |             logger.warning(f"Failed to decompress entry from L3: {e}")
    | ^^^^^^^^^^^^
456 |             return None
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:458:5
    |
456 |             return None
457 |
458 |     def _start_cache_warming(self):
    |     ^
459 |         """Start background cache warming thread."""
460 |         def warming_worker():
    |

invalid-syntax: Expected an indented block after `while` statement
   --> backend\performance.py:462:13
    |
460 |         def warming_worker():
461 |             while self.enable_prediction:
462 |             pass
    |             ^^^^
463 |                 try:
464 |                     self._perform_cache_warming()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:463:1
    |
461 |             while self.enable_prediction:
462 |             pass
463 |                 try:
    | ^^^^^^^^^^^^^^^^
464 |                     self._perform_cache_warming()
465 |                     time.sleep(60)  # Check for warming opportunities every minute
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\performance.py:466:39
    |
464 |                     self._perform_cache_warming()
465 |                     time.sleep(60)  # Check for warming opportunities every minute
466 |                 except Exception as e:
    |                                       ^
467 |         pass
468 |             pass
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:468:1
    |
466 |                 except Exception as e:
467 |         pass
468 |             pass
    | ^^^^^^^^^^^^
469 |                     logger.warning(f"Cache warming error: {e}")
470 |                     time.sleep(60)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:469:1
    |
467 |         pass
468 |             pass
469 |                     logger.warning(f"Cache warming error: {e}")
    | ^^^^^^^^^^^^^^^^^^^^
470 |                     time.sleep(60)
471 |         warming_thread = threading.Thread(target=warming_worker, daemon=True)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:471:9
    |
469 |                     logger.warning(f"Cache warming error: {e}")
470 |                     time.sleep(60)
471 |         warming_thread = threading.Thread(target=warming_worker, daemon=True)
    |         ^
472 |         warming_thread.start()
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:474:5
    |
472 |         warming_thread.start()
473 |
474 |     def _perform_cache_warming(self):
    |     ^
475 |         pass
476 |         """Perform predictive cache warming based on access patterns."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:478:9
    |
476 |         """Perform predictive cache warming based on access patterns."""
477 |         if self._warming_active:
478 |         pass
    |         ^^^^
479 |             return
480 |         self._warming_active = True
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:479:1
    |
477 |         if self._warming_active:
478 |         pass
479 |             return
    | ^^^^^^^^^^^^
480 |         self._warming_active = True
481 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:482:9
    |
480 |         self._warming_active = True
481 |         try:
482 |         pass
    |         ^^^^
483 |             current_time = time.time()
484 |             # Analyze access patterns to predict next accesses
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:483:1
    |
481 |         try:
482 |         pass
483 |             current_time = time.time()
    | ^^^^^^^^^^^^
484 |             # Analyze access patterns to predict next accesses
485 |             predictions = []
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:487:13
    |
485 |             predictions = []
486 |             with self._prediction_lock:
487 |             pass
    |             ^^^^
488 |                 for key, access_times in self.access_patterns.items():
489 |                     if len(access_times) < 2:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:488:1
    |
486 |             with self._prediction_lock:
487 |             pass
488 |                 for key, access_times in self.access_patterns.items():
    | ^^^^^^^^^^^^^^^^
489 |                     if len(access_times) < 2:
490 |                 pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:489:46
    |
487 |             pass
488 |                 for key, access_times in self.access_patterns.items():
489 |                     if len(access_times) < 2:
    |                                              ^
490 |                 pass
491 |                         continue
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:491:1
    |
489 |                     if len(access_times) < 2:
490 |                 pass
491 |                         continue
    | ^^^^^^^^^^^^^^^^^^^^^^^^
492 |                     # Calculate access frequency and predict next access
493 |                     recent_accesses = [
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:493:1
    |
491 |                         continue
492 |                     # Calculate access frequency and predict next access
493 |                     recent_accesses = [
    | ^^^^^^^^^^^^^^^^^^^^
494 |                         t for t in access_times if current_time - t < 3600
495 |                     ]  # Last hour
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:496:1
    |
494 |                         t for t in access_times if current_time - t < 3600
495 |                     ]  # Last hour
496 |                     if len(recent_accesses) >= 2:
    | ^^^^^^^^^^^^^^^^^^^^
497 |                 pass
498 |                         avg_interval = (
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:496:50
    |
494 |                         t for t in access_times if current_time - t < 3600
495 |                     ]  # Last hour
496 |                     if len(recent_accesses) >= 2:
    |                                                  ^
497 |                 pass
498 |                         avg_interval = (
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:497:17
    |
495 |                     ]  # Last hour
496 |                     if len(recent_accesses) >= 2:
497 |                 pass
    |                 ^
498 |                         avg_interval = (
499 |                             sum(
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:498:1
    |
496 |                     if len(recent_accesses) >= 2:
497 |                 pass
498 |                         avg_interval = (
    | ^^^^^^^^^^^^^^^^^^^^^^^^
499 |                             sum(
500 |                                 recent_accesses[i] - recent_accesses[i - 1]
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:509:65
    |
507 |                         predicted_next = last_access + avg_interval
508 |                         # Predict within 5 minutes
509 |                         if predicted_next - current_time <= 300:
    |                                                                 ^
510 |                 pass
511 |                             predictions.append(
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:510:17
    |
508 |                         # Predict within 5 minutes
509 |                         if predicted_next - current_time <= 300:
510 |                 pass
    |                 ^
511 |                             predictions.append(
512 |                                 (key, predicted_next - current_time)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:511:1
    |
509 |                         if predicted_next - current_time <= 300:
510 |                 pass
511 |                             predictions.append(
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
512 |                                 (key, predicted_next - current_time)
513 |                             )
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:515:17
    |
513 |                             )
514 |                 # Sort by urgency (sooner predictions first)
515 |                 predictions.sort(key=lambda x: x[1])
    |                 ^
516 |                 # Top 10 predictions
517 |                 self.prediction_queue = [key for key, _ in predictions[:10]]
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:520:13
    |
518 |             # Warm cache for predicted keys
519 |             # Limit concurrent warming
520 |             for key in self.prediction_queue[:5]:
    |             ^
521 |                 if key not in self.l1_cache and key not in self.l2_cache:
522 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:521:74
    |
519 |             # Limit concurrent warming
520 |             for key in self.prediction_queue[:5]:
521 |                 if key not in self.l1_cache and key not in self.l2_cache:
    |                                                                          ^
522 |             pass
523 |                     # Try to promote from L3 to L2/L1
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:524:1
    |
522 |             pass
523 |                     # Try to promote from L3 to L2/L1
524 |                     l3_entry = self._decompress_from_l3(key)
    | ^^^^^^^^^^^^^^^^^^^^
525 |                     if l3_entry:
526 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:526:1
    |
524 |                     l3_entry = self._decompress_from_l3(key)
525 |                     if l3_entry:
526 |                 pass
    | ^^^^^^^^^^^^^^^^
527 |                         self._promote_to_l2(key, l3_entry)
528 |                         self._stats["l4_predictions"] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:527:1
    |
525 |                     if l3_entry:
526 |                 pass
527 |                         self._promote_to_l2(key, l3_entry)
    | ^^^^^^^^^^^^^^^^^^^^^^^^
528 |                         self._stats["l4_predictions"] += 1
529 |         finally:
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:529:9
    |
527 |                         self._promote_to_l2(key, l3_entry)
528 |                         self._stats["l4_predictions"] += 1
529 |         finally:
    |         ^
530 |         pass
531 |             self._warming_active = False
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:529:16
    |
527 |                         self._promote_to_l2(key, l3_entry)
528 |                         self._stats["l4_predictions"] += 1
529 |         finally:
    |                ^
530 |         pass
531 |             self._warming_active = False
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:529:17
    |
527 |                         self._promote_to_l2(key, l3_entry)
528 |                         self._stats["l4_predictions"] += 1
529 |         finally:
    |                 ^
530 |         pass
531 |             self._warming_active = False
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:531:1
    |
529 |         finally:
530 |         pass
531 |             self._warming_active = False
    | ^^^^^^^^^^^^
532 |
533 |     def _promote_to_l2(self, key: str, entry: CacheEntry):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:533:5
    |
531 |             self._warming_active = False
532 |
533 |     def _promote_to_l2(self, key: str, entry: CacheEntry):
    |     ^
534 |         pass
535 |         """Promote entry from L3 to L2."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:537:9
    |
535 |         """Promote entry from L3 to L2."""
536 |         with self._l2_lock:
537 |         pass
    |         ^^^^
538 |             if len(self.l2_cache) >= self.l2_max_size:
539 |                 self._evict_l2_lru()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:538:1
    |
536 |         with self._l2_lock:
537 |         pass
538 |             if len(self.l2_cache) >= self.l2_max_size:
    | ^^^^^^^^^^^^
539 |                 self._evict_l2_lru()
540 |             self.l2_cache[key] = entry
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:543:5
    |
541 |             self._persist_l2_cache()
542 |
543 |     def _record_access(self, key: str):
    |     ^
544 |         """Record access pattern for predictive caching."""
545 |         if not self.enable_prediction:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:546:9
    |
544 |         """Record access pattern for predictive caching."""
545 |         if not self.enable_prediction:
546 |         pass
    |         ^^^^
547 |             return
548 |         current_time = time.time()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:547:1
    |
545 |         if not self.enable_prediction:
546 |         pass
547 |             return
    | ^^^^^^^^^^^^
548 |         current_time = time.time()
549 |         with self._prediction_lock:
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:550:9
    |
548 |         current_time = time.time()
549 |         with self._prediction_lock:
550 |         pass
    |         ^^^^
551 |             if key not in self.access_patterns:
552 |                 self.access_patterns[key] = []
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:551:1
    |
549 |         with self._prediction_lock:
550 |         pass
551 |             if key not in self.access_patterns:
    | ^^^^^^^^^^^^
552 |                 self.access_patterns[key] = []
553 |             self.access_patterns[key].append(current_time)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:561:5
    |
559 |             ]
560 |
561 |     def get_stats(self) -> Dict[str, Any]:
    |     ^
562 |         pass
563 |         """Get cache performance statistics"""
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:592:1
    |
592 | class ConnectionPool:
    | ^
593 |     pass
594 |     """
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\performance.py:617:9
    |
615 |         # Pre-create minimum connections
616 |         for _ in range(min_size):
617 |         pass
    |         ^^^^
618 |             conn = self._create_connection()
619 |             if conn:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:618:1
    |
616 |         for _ in range(min_size):
617 |         pass
618 |             conn = self._create_connection()
    | ^^^^^^^^^^^^
619 |             if conn:
620 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:620:13
    |
618 |             conn = self._create_connection()
619 |             if conn:
620 |             pass
    |             ^^^^
621 |                 self._pool.append(conn)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:621:1
    |
619 |             if conn:
620 |             pass
621 |                 self._pool.append(conn)
    | ^^^^^^^^^^^^^^^^
622 |
623 |     def get_connection(self):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:623:5
    |
621 |                 self._pool.append(conn)
622 |
623 |     def get_connection(self):
    |     ^
624 |         """Get connection from pool or create new one"""
625 |         with self._lock:
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:626:9
    |
624 |         """Get connection from pool or create new one"""
625 |         with self._lock:
626 |         pass
    |         ^^^^
627 |             # Try to reuse existing connection
628 |             while self._pool:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:628:1
    |
626 |         pass
627 |             # Try to reuse existing connection
628 |             while self._pool:
    | ^^^^^^^^^^^^
629 |             pass
630 |                 conn = self._pool.pop()
    |

invalid-syntax: Expected an indented block after `while` statement
   --> backend\performance.py:629:13
    |
627 |             # Try to reuse existing connection
628 |             while self._pool:
629 |             pass
    |             ^^^^
630 |                 conn = self._pool.pop()
631 |                 if self._is_connection_valid(conn):
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:630:1
    |
628 |             while self._pool:
629 |             pass
630 |                 conn = self._pool.pop()
    | ^^^^^^^^^^^^^^^^
631 |                 if self._is_connection_valid(conn):
632 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:631:52
    |
629 |             pass
630 |                 conn = self._pool.pop()
631 |                 if self._is_connection_valid(conn):
    |                                                    ^
632 |             pass
633 |                     self._active.add(id(conn))
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:633:1
    |
631 |                 if self._is_connection_valid(conn):
632 |             pass
633 |                     self._active.add(id(conn))
    | ^^^^^^^^^^^^^^^^^^^^
634 |                     self._last_used[id(conn)] = time.time()
635 |                     return conn
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:636:1
    |
634 |                     self._last_used[id(conn)] = time.time()
635 |                     return conn
636 |                 else:
    | ^^^^^^^^^^^^^^^^
637 |             pass
638 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:636:17
    |
634 |                     self._last_used[id(conn)] = time.time()
635 |                     return conn
636 |                 else:
    |                 ^^^^
637 |             pass
638 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:636:21
    |
634 |                     self._last_used[id(conn)] = time.time()
635 |                     return conn
636 |                 else:
    |                     ^
637 |             pass
638 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:636:22
    |
634 |                     self._last_used[id(conn)] = time.time()
635 |                     return conn
636 |                 else:
    |                      ^
637 |             pass
638 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:638:1
    |
636 |                 else:
637 |             pass
638 |                     self._cleanup_connection(conn)
    | ^^^^^^^^^^^^^^^^^^^^
639 |
640 |             # Create new connection if under max limit
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:641:13
    |
640 |             # Create new connection if under max limit
641 |             if len(self._active) < self.max_size:
    |             ^
642 |             pass
643 |                 conn = self._create_connection()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:642:13
    |
640 |             # Create new connection if under max limit
641 |             if len(self._active) < self.max_size:
642 |             pass
    |             ^^^^
643 |                 conn = self._create_connection()
644 |                 if conn:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:643:1
    |
641 |             if len(self._active) < self.max_size:
642 |             pass
643 |                 conn = self._create_connection()
    | ^^^^^^^^^^^^^^^^
644 |                 if conn:
645 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:644:25
    |
642 |             pass
643 |                 conn = self._create_connection()
644 |                 if conn:
    |                         ^
645 |             pass
646 |                     self._active.add(id(conn))
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:645:13
    |
643 |                 conn = self._create_connection()
644 |                 if conn:
645 |             pass
    |             ^
646 |                     self._active.add(id(conn))
647 |                     self._last_used[id(conn)] = time.time()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:646:1
    |
644 |                 if conn:
645 |             pass
646 |                     self._active.add(id(conn))
    | ^^^^^^^^^^^^^^^^^^^^
647 |                     self._last_used[id(conn)] = time.time()
648 |                     return conn
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:650:13
    |
648 |                     return conn
649 |
650 |             raise RuntimeError("Connection pool exhausted")
    |             ^
651 |
652 |     def return_connection(self, conn):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:652:5
    |
650 |             raise RuntimeError("Connection pool exhausted")
651 |
652 |     def return_connection(self, conn):
    |     ^
653 |         """Return connection to pool"""
654 |         if not conn:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:655:9
    |
653 |         """Return connection to pool"""
654 |         if not conn:
655 |         pass
    |         ^^^^
656 |             return
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:656:1
    |
654 |         if not conn:
655 |         pass
656 |             return
    | ^^^^^^^^^^^^
657 |
658 |         conn_id = id(conn)
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:660:9
    |
658 |         conn_id = id(conn)
659 |         with self._lock:
660 |         pass
    |         ^^^^
661 |             if conn_id in self._active:
662 |                 self._active.remove(conn_id)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:661:1
    |
659 |         with self._lock:
660 |         pass
661 |             if conn_id in self._active:
    | ^^^^^^^^^^^^
662 |                 self._active.remove(conn_id)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:664:88
    |
662 |                 self._active.remove(conn_id)
663 |
664 |                 if self._is_connection_valid(conn) and len(self._pool) < self.max_size:
    |                                                                                        ^
665 |             pass
666 |                     self._pool.append(conn)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:666:1
    |
664 |                 if self._is_connection_valid(conn) and len(self._pool) < self.max_size:
665 |             pass
666 |                     self._pool.append(conn)
    | ^^^^^^^^^^^^^^^^^^^^
667 |                     self._last_used[conn_id] = time.time()
668 |                 else:
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:668:1
    |
666 |                     self._pool.append(conn)
667 |                     self._last_used[conn_id] = time.time()
668 |                 else:
    | ^^^^^^^^^^^^^^^^
669 |             pass
670 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:668:17
    |
666 |                     self._pool.append(conn)
667 |                     self._last_used[conn_id] = time.time()
668 |                 else:
    |                 ^^^^
669 |             pass
670 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:668:21
    |
666 |                     self._pool.append(conn)
667 |                     self._last_used[conn_id] = time.time()
668 |                 else:
    |                     ^
669 |             pass
670 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:668:22
    |
666 |                     self._pool.append(conn)
667 |                     self._last_used[conn_id] = time.time()
668 |                 else:
    |                      ^
669 |             pass
670 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:670:1
    |
668 |                 else:
669 |             pass
670 |                     self._cleanup_connection(conn)
    | ^^^^^^^^^^^^^^^^^^^^
671 |                     if conn_id in self._last_used:
672 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:672:1
    |
670 |                     self._cleanup_connection(conn)
671 |                     if conn_id in self._last_used:
672 |                 pass
    | ^^^^^^^^^^^^^^^^
673 |                         del self._last_used[conn_id]
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:673:1
    |
671 |                     if conn_id in self._last_used:
672 |                 pass
673 |                         del self._last_used[conn_id]
    | ^^^^^^^^^^^^^^^^^^^^^^^^
674 |
675 |     def _create_connection(self):
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:675:5
    |
673 |                         del self._last_used[conn_id]
674 |
675 |     def _create_connection(self):
    |     ^
676 |         """Create new connection using factory"""
677 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:678:9
    |
676 |         """Create new connection using factory"""
677 |         try:
678 |         pass
    |         ^^^^
679 |             return self.factory()
680 |         except Exception as e:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:679:1
    |
677 |         try:
678 |         pass
679 |             return self.factory()
    | ^^^^^^^^^^^^
680 |         except Exception as e:
681 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:680:9
    |
678 |         pass
679 |             return self.factory()
680 |         except Exception as e:
    |         ^^^^^^
681 |         pass
682 |             logger.warning(f"Failed to create connection: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:680:26
    |
678 |         pass
679 |             return self.factory()
680 |         except Exception as e:
    |                          ^^
681 |         pass
682 |             logger.warning(f"Failed to create connection: {e}")
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:680:31
    |
678 |         pass
679 |             return self.factory()
680 |         except Exception as e:
    |                               ^
681 |         pass
682 |             logger.warning(f"Failed to create connection: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:682:1
    |
680 |         except Exception as e:
681 |         pass
682 |             logger.warning(f"Failed to create connection: {e}")
    | ^^^^^^^^^^^^
683 |             return None
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:685:5
    |
683 |             return None
684 |
685 |     def _is_connection_valid(self, conn) -> bool:
    |     ^
686 |         """Check if connection is still valid"""
687 |         # Basic implementation - override for specific connection types
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:695:9
    |
693 |         # Override for specific cleanup needs
694 |         if hasattr(conn, "close"):
695 |         pass
    |         ^^^^
696 |             try:
697 |                 conn.close()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:696:1
    |
694 |         if hasattr(conn, "close"):
695 |         pass
696 |             try:
    | ^^^^^^^^^^^^
697 |                 conn.close()
698 |             except Exception as e:
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\performance.py:699:13
    |
697 |                 conn.close()
698 |             except Exception as e:
699 |             pass
    |             ^^^^
700 |                 import logging
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:700:1
    |
698 |             except Exception as e:
699 |             pass
700 |                 import logging
    | ^^^^^^^^^^^^^^^^
701 |
702 |                 logging.warning(f"Failed to close connection: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:704:5
    |
702 |                 logging.warning(f"Failed to close connection: {e}")
703 |
704 |     def cleanup_idle_connections(self):
    |     ^
705 |         """Remove idle connections exceeding max_idle time"""
706 |         current_time = time.time()
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\performance.py:709:9
    |
707 |         kept_connections = []
708 |         with self._lock:
709 |         pass
    |         ^^^^
710 |             for conn in self._pool:
711 |                 conn_id = id(conn)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:710:1
    |
708 |         with self._lock:
709 |         pass
710 |             for conn in self._pool:
    | ^^^^^^^^^^^^
711 |                 conn_id = id(conn)
712 |                 last_used = self._last_used.get(conn_id, current_time)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:714:62
    |
712 |                 last_used = self._last_used.get(conn_id, current_time)
713 |
714 |                 if current_time - last_used <= self.max_idle:
    |                                                              ^
715 |             pass
716 |                     kept_connections.append(conn)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:716:1
    |
714 |                 if current_time - last_used <= self.max_idle:
715 |             pass
716 |                     kept_connections.append(conn)
    | ^^^^^^^^^^^^^^^^^^^^
717 |                 else:
718 |             pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:717:1
    |
715 |             pass
716 |                     kept_connections.append(conn)
717 |                 else:
    | ^^^^^^^^^^^^^^^^
718 |             pass
719 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:717:17
    |
715 |             pass
716 |                     kept_connections.append(conn)
717 |                 else:
    |                 ^^^^
718 |             pass
719 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:717:21
    |
715 |             pass
716 |                     kept_connections.append(conn)
717 |                 else:
    |                     ^
718 |             pass
719 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:717:22
    |
715 |             pass
716 |                     kept_connections.append(conn)
717 |                 else:
    |                      ^
718 |             pass
719 |                     self._cleanup_connection(conn)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:719:1
    |
717 |                 else:
718 |             pass
719 |                     self._cleanup_connection(conn)
    | ^^^^^^^^^^^^^^^^^^^^
720 |             self._pool = kept_connections
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:723:1
    |
723 | class AsyncTaskQueue:
    | ^
724 |     """
725 |     High-performance async task queue for background processing
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:746:9
    |
744 |         """Start background workers"""
745 |         if self._running:
746 |         pass
    |         ^^^^
747 |             return
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:747:1
    |
745 |         if self._running:
746 |         pass
747 |             return
    | ^^^^^^^^^^^^
748 |
749 |         self._running = True
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\performance.py:763:9
    |
761 |         # Add sentinel values to wake up workers
762 |         for _ in range(self.max_workers):
763 |         pass
    |         ^^^^
764 |             await self.queue.put(None)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:764:1
    |
762 |         for _ in range(self.max_workers):
763 |         pass
764 |             await self.queue.put(None)
    | ^^^^^^^^^^^^
765 |
766 |         # Wait for workers to finish
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:768:9
    |
766 |         # Wait for workers to finish
767 |         if self.workers:
768 |         pass
    |         ^^^^
769 |             await asyncio.gather(*self.workers, return_exceptions=True)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:769:1
    |
767 |         if self.workers:
768 |         pass
769 |             await asyncio.gather(*self.workers, return_exceptions=True)
    | ^^^^^^^^^^^^
770 |
771 |         self.workers = []
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:771:9
    |
769 |             await asyncio.gather(*self.workers, return_exceptions=True)
770 |
771 |         self.workers = []
    |         ^
772 |         logger.info("All async workers stopped")
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:774:5
    |
772 |         logger.info("All async workers stopped")
773 |
774 |     async def submit_task(self, coro: Awaitable, priority: int = 0) -> bool:
    |     ^
775 |         """
776 |         Submit coroutine for background execution
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:787:9
    |
785 |         """
786 |         try:
787 |         pass
    |         ^^^^
788 |             task_item = (priority, time.time(), coro)
789 |             await self.queue.put(task_item)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:788:1
    |
786 |         try:
787 |         pass
788 |             task_item = (priority, time.time(), coro)
    | ^^^^^^^^^^^^
789 |             await self.queue.put(task_item)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:794:9
    |
792 |             self.stats["queue_size"] = self.queue.qsize()
793 |             return True
794 |         except asyncio.QueueFull:
    |         ^^^^^^
795 |         pass
796 |             logger.warning("Task queue is full, dropping task")
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:794:34
    |
792 |             self.stats["queue_size"] = self.queue.qsize()
793 |             return True
794 |         except asyncio.QueueFull:
    |                                  ^
795 |         pass
796 |             logger.warning("Task queue is full, dropping task")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:796:1
    |
794 |         except asyncio.QueueFull:
795 |         pass
796 |             logger.warning("Task queue is full, dropping task")
    | ^^^^^^^^^^^^
797 |             return False
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:799:5
    |
797 |             return False
798 |
799 |     async def _worker(self, worker_name: str):
    |     ^
800 |         """Background worker coroutine"""
801 |         logger.debug(f"Worker {worker_name} started")
    |

invalid-syntax: Expected an indented block after `while` statement
   --> backend\performance.py:804:9
    |
803 |         while self._running:
804 |         pass
    |         ^^^^
805 |             try:
806 |                 # Get task with timeout
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:805:1
    |
803 |         while self._running:
804 |         pass
805 |             try:
    | ^^^^^^^^^^^^
806 |                 # Get task with timeout
807 |                 task_item = await asyncio.wait_for(self.queue.get(), timeout=1.0)
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\performance.py:816:21
    |
814 |                 # Execute the coroutine
815 |                 start_time = time.time()
816 |                 try:
    |                     ^
817 |             pass
818 |                     await coro
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\performance.py:817:13
    |
815 |                 start_time = time.time()
816 |                 try:
817 |             pass
    |             ^
818 |                     await coro
819 |                     self.stats["tasks_completed"] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:818:1
    |
816 |                 try:
817 |             pass
818 |                     await coro
    | ^^^^^^^^^^^^^^^^^^^^
819 |                     self.stats["tasks_completed"] += 1
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:824:1
    |
822 |                     logger.debug(f"Task completed in {execution_time:.3f}s")
823 |
824 |                 except Exception as e:
    | ^^^^^^^^^^^^^^^^
825 |             pass
826 |                     self.stats["tasks_failed"] += 1
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:824:17
    |
822 |                     logger.debug(f"Task completed in {execution_time:.3f}s")
823 |
824 |                 except Exception as e:
    |                 ^^^^^^
825 |             pass
826 |                     self.stats["tasks_failed"] += 1
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:824:34
    |
822 |                     logger.debug(f"Task completed in {execution_time:.3f}s")
823 |
824 |                 except Exception as e:
    |                                  ^^
825 |             pass
826 |                     self.stats["tasks_failed"] += 1
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:824:39
    |
822 |                     logger.debug(f"Task completed in {execution_time:.3f}s")
823 |
824 |                 except Exception as e:
    |                                       ^
825 |             pass
826 |                     self.stats["tasks_failed"] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:826:1
    |
824 |                 except Exception as e:
825 |             pass
826 |                     self.stats["tasks_failed"] += 1
    | ^^^^^^^^^^^^^^^^^^^^
827 |                     logger.error(f"Task failed: {e}")
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\performance.py:829:1
    |
827 |                     logger.error(f"Task failed: {e}")
828 |
829 |                 finally:
    | ^^^^^^^^^^^^^^^^
830 |             pass
831 |                     self.stats["queue_size"] = self.queue.qsize()
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:829:17
    |
827 |                     logger.error(f"Task failed: {e}")
828 |
829 |                 finally:
    |                 ^^^^^^^
830 |             pass
831 |                     self.stats["queue_size"] = self.queue.qsize()
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:829:24
    |
827 |                     logger.error(f"Task failed: {e}")
828 |
829 |                 finally:
    |                        ^
830 |             pass
831 |                     self.stats["queue_size"] = self.queue.qsize()
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:829:25
    |
827 |                     logger.error(f"Task failed: {e}")
828 |
829 |                 finally:
    |                         ^
830 |             pass
831 |                     self.stats["queue_size"] = self.queue.qsize()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:831:1
    |
829 |                 finally:
830 |             pass
831 |                     self.stats["queue_size"] = self.queue.qsize()
    | ^^^^^^^^^^^^^^^^^^^^
832 |                     self.queue.task_done()
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:834:13
    |
832 |                     self.queue.task_done()
833 |
834 |             except asyncio.TimeoutError:
    |             ^^^^^^
835 |             pass
836 |                 continue  # Check if still running
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:834:41
    |
832 |                     self.queue.task_done()
833 |
834 |             except asyncio.TimeoutError:
    |                                         ^
835 |             pass
836 |                 continue  # Check if still running
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:836:1
    |
834 |             except asyncio.TimeoutError:
835 |             pass
836 |                 continue  # Check if still running
    | ^^^^^^^^^^^^^^^^
837 |             except Exception as e:
838 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:837:13
    |
835 |             pass
836 |                 continue  # Check if still running
837 |             except Exception as e:
    |             ^
838 |         pass
839 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:837:30
    |
835 |             pass
836 |                 continue  # Check if still running
837 |             except Exception as e:
    |                              ^^
838 |         pass
839 |             pass
    |

invalid-syntax: Expected an expression
   --> backend\performance.py:837:35
    |
835 |             pass
836 |                 continue  # Check if still running
837 |             except Exception as e:
    |                                   ^
838 |         pass
839 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:838:9
    |
836 |                 continue  # Check if still running
837 |             except Exception as e:
838 |         pass
    |         ^
839 |             pass
840 |                 logger.error(f"Worker {worker_name} error: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:839:1
    |
837 |             except Exception as e:
838 |         pass
839 |             pass
    | ^^^^^^^^^^^^
840 |                 logger.error(f"Worker {worker_name} error: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:840:1
    |
838 |         pass
839 |             pass
840 |                 logger.error(f"Worker {worker_name} error: {e}")
    | ^^^^^^^^^^^^^^^^
841 |
842 |         logger.debug(f"Worker {worker_name} stopped")
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:842:9
    |
840 |                 logger.error(f"Worker {worker_name} error: {e}")
841 |
842 |         logger.debug(f"Worker {worker_name} stopped")
    |         ^
843 |
844 |     def get_stats(self) -> Dict[str, Any]:
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:844:5
    |
842 |         logger.debug(f"Worker {worker_name} stopped")
843 |
844 |     def get_stats(self) -> Dict[str, Any]:
    |     ^
845 |         """Get queue performance statistics"""
846 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:854:1
    |
853 | # Global performance managers (initialized on demand)
854 | _cache_manager = None
    | ^
855 | _connection_pools = {}
856 | _task_queue = None
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:904:13
    |
902 |             # Generate cache key
903 |             if key_func:
904 |             pass
    |             ^^^^
905 |                 cache_key = key_func(*args, **kwargs)
906 |             else:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:905:1
    |
903 |             if key_func:
904 |             pass
905 |                 cache_key = key_func(*args, **kwargs)
    | ^^^^^^^^^^^^^^^^
906 |             else:
907 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:906:13
    |
904 |             pass
905 |                 cache_key = key_func(*args, **kwargs)
906 |             else:
    |             ^^^^
907 |             pass
908 |                 cache_key = (
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:906:17
    |
904 |             pass
905 |                 cache_key = key_func(*args, **kwargs)
906 |             else:
    |                 ^
907 |             pass
908 |                 cache_key = (
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:906:18
    |
904 |             pass
905 |                 cache_key = key_func(*args, **kwargs)
906 |             else:
    |                  ^
907 |             pass
908 |                 cache_key = (
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:908:1
    |
906 |             else:
907 |             pass
908 |                 cache_key = (
    | ^^^^^^^^^^^^^^^^
909 |                     f"{func.__name__}:{hash((args, tuple(sorted(kwargs.items()))))}"
910 |                 )
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:915:13
    |
913 |             cached_result = cache.get(cache_key)
914 |             if cached_result is not None:
915 |             pass
    |             ^^^^
916 |                 return cached_result
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:916:1
    |
914 |             if cached_result is not None:
915 |             pass
916 |                 return cached_result
    | ^^^^^^^^^^^^^^^^
917 |
918 |             # Execute function and cache result
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:920:13
    |
918 |             # Execute function and cache result
919 |             if inspect.iscoroutinefunction(func):
920 |             pass
    |             ^^^^
921 |                 result = await func(*args, **kwargs)
922 |             else:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:921:1
    |
919 |             if inspect.iscoroutinefunction(func):
920 |             pass
921 |                 result = await func(*args, **kwargs)
    | ^^^^^^^^^^^^^^^^
922 |             else:
923 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:922:13
    |
920 |             pass
921 |                 result = await func(*args, **kwargs)
922 |             else:
    |             ^
923 |             pass
924 |                 result = func(*args, **kwargs)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:922:17
    |
920 |             pass
921 |                 result = await func(*args, **kwargs)
922 |             else:
    |                 ^
923 |             pass
924 |                 result = func(*args, **kwargs)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:922:18
    |
920 |             pass
921 |                 result = await func(*args, **kwargs)
922 |             else:
    |                  ^
923 |             pass
924 |                 result = func(*args, **kwargs)
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:924:1
    |
922 |             else:
923 |             pass
924 |                 result = func(*args, **kwargs)
    | ^^^^^^^^^^^^^^^^
925 |
926 |             cache.set(cache_key, result, ttl=ttl)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:926:13
    |
924 |                 result = func(*args, **kwargs)
925 |
926 |             cache.set(cache_key, result, ttl=ttl)
    |             ^
927 |             return result
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:929:9
    |
927 |             return result
928 |
929 |         @wraps(func)
    |         ^
930 |         def sync_wrapper(*args, **kwargs):
931 |             cache = get_cache_manager()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:934:13
    |
933 |             if key_func:
934 |             pass
    |             ^^^^
935 |                 cache_key = key_func(*args, **kwargs)
936 |             else:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:935:1
    |
933 |             if key_func:
934 |             pass
935 |                 cache_key = key_func(*args, **kwargs)
    | ^^^^^^^^^^^^^^^^
936 |             else:
937 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:936:13
    |
934 |             pass
935 |                 cache_key = key_func(*args, **kwargs)
936 |             else:
    |             ^^^^
937 |             pass
938 |                 cache_key = (
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:936:17
    |
934 |             pass
935 |                 cache_key = key_func(*args, **kwargs)
936 |             else:
    |                 ^
937 |             pass
938 |                 cache_key = (
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:936:18
    |
934 |             pass
935 |                 cache_key = key_func(*args, **kwargs)
936 |             else:
    |                  ^
937 |             pass
938 |                 cache_key = (
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:938:1
    |
936 |             else:
937 |             pass
938 |                 cache_key = (
    | ^^^^^^^^^^^^^^^^
939 |                     f"{func.__name__}:{hash((args, tuple(sorted(kwargs.items()))))}"
940 |                 )
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:942:13
    |
940 |                 )
941 |
942 |             cached_result = cache.get(cache_key)
    |             ^
943 |             if cached_result is not None:
944 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:944:13
    |
942 |             cached_result = cache.get(cache_key)
943 |             if cached_result is not None:
944 |             pass
    |             ^^^^
945 |                 return cached_result
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:945:1
    |
943 |             if cached_result is not None:
944 |             pass
945 |                 return cached_result
    | ^^^^^^^^^^^^^^^^
946 |
947 |             result = func(*args, **kwargs)
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:947:13
    |
945 |                 return cached_result
946 |
947 |             result = func(*args, **kwargs)
    |             ^
948 |             cache.set(cache_key, result, ttl=ttl)
949 |             return result
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:951:9
    |
949 |             return result
950 |
951 |         if inspect.iscoroutinefunction(func):
    |         ^
952 |         pass
953 |             return async_wrapper
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:952:9
    |
951 |         if inspect.iscoroutinefunction(func):
952 |         pass
    |         ^^^^
953 |             return async_wrapper
954 |         else:
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:953:1
    |
951 |         if inspect.iscoroutinefunction(func):
952 |         pass
953 |             return async_wrapper
    | ^^^^^^^^^^^^
954 |         else:
955 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:954:9
    |
952 |         pass
953 |             return async_wrapper
954 |         else:
    |         ^
955 |         pass
956 |             return sync_wrapper
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:954:13
    |
952 |         pass
953 |             return async_wrapper
954 |         else:
    |             ^
955 |         pass
956 |             return sync_wrapper
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:954:14
    |
952 |         pass
953 |             return async_wrapper
954 |         else:
    |              ^
955 |         pass
956 |             return sync_wrapper
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:956:1
    |
954 |         else:
955 |         pass
956 |             return sync_wrapper
    | ^^^^^^^^^^^^
957 |
958 |     return decorator
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:958:5
    |
956 |             return sync_wrapper
957 |
958 |     return decorator
    |     ^
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:962:1
    |
961 | # Performance monitoring utilities
962 | class PerformanceMonitor:
    | ^
963 |     pass
964 |     """Monitor and report performance metrics"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\performance.py:974:9
    |
972 |         pool_stats = {}
973 |         for name, pool in _connection_pools.items():
974 |         pass
    |         ^^^^
975 |             pool_stats[name] = {
976 |                 "active_connections": len(pool._active),
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:975:1
    |
973 |         for name, pool in _connection_pools.items():
974 |         pass
975 |             pool_stats[name] = {
    | ^^^^^^^^^^^^
976 |                 "active_connections": len(pool._active),
977 |                 "pool_size": len(pool._pool),
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\performance.py:983:9
    |
981 |         task_stats = {}
982 |         if _task_queue:
983 |         pass
    |         ^^^^
984 |             task_stats = _task_queue.get_stats()
    |

invalid-syntax: Unexpected indentation
   --> backend\performance.py:984:1
    |
982 |         if _task_queue:
983 |         pass
984 |             task_stats = _task_queue.get_stats()
    | ^^^^^^^^^^^^
985 |
986 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\performance.py:992:1
    |
990 |             "timestamp": time.time(),
991 |         }
    |          ^
    |

invalid-syntax: Expected an indented block after `while` statement
  --> backend\rate_limiting.py:53:9
   |
51 |         cutoff = timestamp - 3600
52 |         while self.requests[client_id] and self.requests[client_id][0] < cutoff:
53 |         pass
   |         ^^^^
54 |             self.requests[client_id].popleft()
   |

invalid-syntax: Unexpected indentation
  --> backend\rate_limiting.py:54:1
   |
52 |         while self.requests[client_id] and self.requests[client_id][0] < cutoff:
53 |         pass
54 |             self.requests[client_id].popleft()
   | ^^^^^^^^^^^^
55 |
56 |     def get_recent_requests(self, client_id: str, window_seconds: int) -> int:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\rate_limiting.py:59:9
   |
57 |         """Get number of requests in the specified time window"""
58 |         if client_id not in self.requests:
59 |         pass
   |         ^^^^
60 |             return 0
   |

invalid-syntax: Unexpected indentation
  --> backend\rate_limiting.py:60:1
   |
58 |         if client_id not in self.requests:
59 |         pass
60 |             return 0
   | ^^^^^^^^^^^^
61 |
62 |         cutoff = time.time() - window_seconds
   |

invalid-syntax: Expected a statement
  --> backend\rate_limiting.py:65:5
   |
63 |         return sum(1 for timestamp in self.requests[client_id] if timestamp >= cutoff)
64 |
65 |     def block_client(self, client_id: str, duration: int = 300):
   |     ^
66 |         """Block a client for specified duration (default 5 minutes)"""
67 |         self.blocked_ips[client_id] = time.time() + duration
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\rate_limiting.py:72:9
   |
70 |         """Check if a client is currently blocked"""
71 |         if client_id not in self.blocked_ips:
72 |         pass
   |         ^^^^
73 |             return False
   |

invalid-syntax: Unexpected indentation
  --> backend\rate_limiting.py:73:1
   |
71 |         if client_id not in self.blocked_ips:
72 |         pass
73 |             return False
   | ^^^^^^^^^^^^
74 |
75 |         if time.time() > self.blocked_ips[client_id]:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\rate_limiting.py:76:9
   |
75 |         if time.time() > self.blocked_ips[client_id]:
76 |         pass
   |         ^^^^
77 |             # Block expired, remove it
78 |             del self.blocked_ips[client_id]
   |

invalid-syntax: Unexpected indentation
  --> backend\rate_limiting.py:78:1
   |
76 |         pass
77 |             # Block expired, remove it
78 |             del self.blocked_ips[client_id]
   | ^^^^^^^^^^^^
79 |             return False
   |

invalid-syntax: Expected a statement
  --> backend\rate_limiting.py:81:9
   |
79 |             return False
80 |
81 |         return True
   |         ^
82 |
83 |     def record_security_event(self, event_type: str, client_id: str, details: str):
   |

invalid-syntax: Expected a statement
  --> backend\rate_limiting.py:83:5
   |
81 |         return True
82 |
83 |     def record_security_event(self, event_type: str, client_id: str, details: str):
   |     ^
84 |         """Record a security event for monitoring"""
85 |         event = {
   |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:99:9
    |
 97 |         # Auto-block clients with too many suspicious events
 98 |         if self.suspicious_patterns[pattern_key] >= 10:
 99 |         pass
    |         ^^^^
100 |             self.block_client(client_id, duration=1800)  # 30 minute block
101 |             logger.warning(f"Auto-blocked client {client_id} due to suspicious activity: {event_type}")
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:100:1
    |
 98 |         if self.suspicious_patterns[pattern_key] >= 10:
 99 |         pass
100 |             self.block_client(client_id, duration=1800)  # 30 minute block
    | ^^^^^^^^^^^^
101 |             logger.warning(f"Auto-blocked client {client_id} due to suspicious activity: {event_type}")
    |

E501 Line too long (103 > 88)
   --> backend\rate_limiting.py:101:89
    |
 99 |         pass
100 |             self.block_client(client_id, duration=1800)  # 30 minute block
101 |             logger.warning(f"Auto-blocked client {client_id} due to suspicious activity: {event_type}")
    |                                                                                         ^^^^^^^^^^^^^^^
102 |
103 |     def get_security_summary(self) -> Dict:
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:103:5
    |
101 |             logger.warning(f"Auto-blocked client {client_id} due to suspicious activity: {event_type}")
102 |
103 |     def get_security_summary(self) -> Dict:
    |     ^
104 |         """Get security event summary"""
105 |         recent_events = [
    |

E501 Line too long (91 > 88)
   --> backend\rate_limiting.py:108:89
    |
106 |             e
107 |             for e in self.security_events
108 |             if datetime.fromisoformat(e["timestamp"]) > datetime.now() - timedelta(hours=1)
    |                                                                                         ^^^
109 |         ]
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\rate_limiting.py:113:9
    |
111 |         event_types = defaultdict(int)
112 |         for event in recent_events:
113 |         pass
    |         ^^^^
114 |             event_types[event["type"]] += 1
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:114:1
    |
112 |         for event in recent_events:
113 |         pass
114 |             event_types[event["type"]] += 1
    | ^^^^^^^^^^^^
115 |
116 |         return {
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:125:1
    |
123 |         }
124 |
125 | class AdvancedRateLimitMiddleware:
    | ^
126 |     pass
127 |     """Advanced rate limiting with security monitoring"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:183:9
    |
181 |         content_length = request.headers.get("Content-Length")
182 |         if content_length:
183 |         pass
    |         ^^^^
184 |             try:
185 |                 size = int(content_length)
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:184:1
    |
182 |         if content_length:
183 |         pass
184 |             try:
    | ^^^^^^^^^^^^
185 |                 size = int(content_length)
186 |                 return size <= self.limits["max_request_size"]
    |

invalid-syntax: Expected an indented block after `except` clause
   --> backend\rate_limiting.py:188:13
    |
186 |                 return size <= self.limits["max_request_size"]
187 |             except ValueError:
188 |             pass
    |             ^^^^
189 |                 return False
190 |         return True
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:189:1
    |
187 |             except ValueError:
188 |             pass
189 |                 return False
    | ^^^^^^^^^^^^^^^^
190 |         return True
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:192:5
    |
190 |         return True
191 |
192 |     async def _check_security_patterns(self, request: Request, client_id: str):
    |     ^
193 |         """Check request for suspicious security patterns"""
194 |         try:
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\rate_limiting.py:195:9
    |
193 |         """Check request for suspicious security patterns"""
194 |         try:
195 |         pass
    |         ^^^^
196 |             # Check URL path
197 |             path = str(request.url.path).lower()
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:197:1
    |
195 |         pass
196 |             # Check URL path
197 |             path = str(request.url.path).lower()
    | ^^^^^^^^^^^^
198 |             query = str(request.url.query).lower()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:208:13
    |
206 |             body_text = ""
207 |             if request.method in ["POST", "PUT", "PATCH"]:
208 |             pass
    |             ^^^^
209 |                 try:
210 |                     body = await request.body()
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:209:1
    |
207 |             if request.method in ["POST", "PUT", "PATCH"]:
208 |             pass
209 |                 try:
    | ^^^^^^^^^^^^^^^^
210 |                     body = await request.body()
211 |                     if body:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:211:29
    |
209 |                 try:
210 |                     body = await request.body()
211 |                     if body:
    |                             ^
212 |                 pass
213 |                         body_text = body.decode("utf-8", errors="ignore").lower()
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\rate_limiting.py:212:17
    |
210 |                     body = await request.body()
211 |                     if body:
212 |                 pass
    |                 ^^^^
213 |                         body_text = body.decode("utf-8", errors="ignore").lower()
214 |                 except Exception:
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:213:1
    |
211 |                     if body:
212 |                 pass
213 |                         body_text = body.decode("utf-8", errors="ignore").lower()
    | ^^^^^^^^^^^^^^^^^^^^^^^^
214 |                 except Exception:
215 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:214:17
    |
212 |                 pass
213 |                         body_text = body.decode("utf-8", errors="ignore").lower()
214 |                 except Exception:
    |                 ^^^^^^
215 |             pass
216 |                     pass  # Skip body analysis if not available
    |

invalid-syntax: Expected an expression
   --> backend\rate_limiting.py:214:34
    |
212 |                 pass
213 |                         body_text = body.decode("utf-8", errors="ignore").lower()
214 |                 except Exception:
    |                                  ^
215 |             pass
216 |                     pass  # Skip body analysis if not available
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:215:13
    |
213 |                         body_text = body.decode("utf-8", errors="ignore").lower()
214 |                 except Exception:
215 |             pass
    |             ^
216 |                     pass  # Skip body analysis if not available
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:216:1
    |
214 |                 except Exception:
215 |             pass
216 |                     pass  # Skip body analysis if not available
    | ^^^^^^^^^^^^^^^^^^^^
217 |
218 |             # Combine all text for pattern matching
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:219:13
    |
218 |             # Combine all text for pattern matching
219 |             full_text = f"{path} {query} {headers_text} {body_text}"
    |             ^
220 |
221 |             # Check for security patterns
    |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\rate_limiting.py:223:13
    |
221 |             # Check for security patterns
222 |             for pattern_type, patterns in self.security_patterns.items():
223 |             pass
    |             ^^^^
224 |                 for pattern in patterns:
225 |                     if pattern.lower() in full_text:
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:224:1
    |
222 |             for pattern_type, patterns in self.security_patterns.items():
223 |             pass
224 |                 for pattern in patterns:
    | ^^^^^^^^^^^^^^^^
225 |                     if pattern.lower() in full_text:
226 |                 pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:225:53
    |
223 |             pass
224 |                 for pattern in patterns:
225 |                     if pattern.lower() in full_text:
    |                                                     ^
226 |                 pass
227 |                         self.store.record_security_event(
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:227:1
    |
225 |                     if pattern.lower() in full_text:
226 |                 pass
227 |                         self.store.record_security_event(
    | ^^^^^^^^^^^^^^^^^^^^^^^^
228 |                             pattern_type,
229 |                             client_id,
    |

E501 Line too long (98 > 88)
   --> backend\rate_limiting.py:230:89
    |
228 |                             pattern_type,
229 |                             client_id,
230 |                             f"Detected pattern '{pattern}' in {request.method} {request.url.path}"
    |                                                                                         ^^^^^^^^^^
231 |                         )
232 |                         logger.warning(f"Security pattern detected: {pattern_type} from {client_id}")
    |

E501 Line too long (101 > 88)
   --> backend\rate_limiting.py:232:89
    |
230 |                             f"Detected pattern '{pattern}' in {request.method} {request.url.path}"
231 |                         )
232 |                         logger.warning(f"Security pattern detected: {pattern_type} from {client_id}")
    |                                                                                         ^^^^^^^^^^^^^
233 |
234 |                         # Block immediately for high-risk patterns
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:235:83
    |
234 |                         # Block immediately for high-risk patterns
235 |                         if pattern_type in ["sql_injection", "command_injection"]:
    |                                                                                   ^
236 |                 pass
237 |                             # 1 hour block
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:236:17
    |
234 |                         # Block immediately for high-risk patterns
235 |                         if pattern_type in ["sql_injection", "command_injection"]:
236 |                 pass
    |                 ^
237 |                             # 1 hour block
238 |                             self.store.block_client(client_id, duration=3600)
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:238:1
    |
236 |                 pass
237 |                             # 1 hour block
238 |                             self.store.block_client(client_id, duration=3600)
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
239 |                             raise HTTPException(
240 |                                 status_code=403,
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:244:9
    |
242 |                             )
243 |
244 |         except HTTPException:
    |         ^
245 |         pass
246 |             raise
    |

invalid-syntax: Expected an expression
   --> backend\rate_limiting.py:244:30
    |
242 |                             )
243 |
244 |         except HTTPException:
    |                              ^
245 |         pass
246 |             raise
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:246:1
    |
244 |         except HTTPException:
245 |         pass
246 |             raise
    | ^^^^^^^^^^^^
247 |         except Exception as e:
248 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:247:9
    |
245 |         pass
246 |             raise
247 |         except Exception as e:
    |         ^
248 |         pass
249 |             logger.error(f"Error in security pattern check: {e}")
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:247:26
    |
245 |         pass
246 |             raise
247 |         except Exception as e:
    |                          ^^
248 |         pass
249 |             logger.error(f"Error in security pattern check: {e}")
    |

invalid-syntax: Expected an expression
   --> backend\rate_limiting.py:247:31
    |
245 |         pass
246 |             raise
247 |         except Exception as e:
    |                               ^
248 |         pass
249 |             logger.error(f"Error in security pattern check: {e}")
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:249:1
    |
247 |         except Exception as e:
248 |         pass
249 |             logger.error(f"Error in security pattern check: {e}")
    | ^^^^^^^^^^^^
250 |
251 |     def _check_rate_limits(self, client_id: str, timestamp: float) -> Optional[Tuple[int, str]]:
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:251:5
    |
249 |             logger.error(f"Error in security pattern check: {e}")
250 |
251 |     def _check_rate_limits(self, client_id: str, timestamp: float) -> Optional[Tuple[int, str]]:
    |     ^
252 |         """Check if client has exceeded rate limits"""
253 |         # Check burst limit (10 seconds)
    |

E501 Line too long (96 > 88)
   --> backend\rate_limiting.py:251:89
    |
249 |             logger.error(f"Error in security pattern check: {e}")
250 |
251 |     def _check_rate_limits(self, client_id: str, timestamp: float) -> Optional[Tuple[int, str]]:
    |                                                                                         ^^^^^^^^
252 |         """Check if client has exceeded rate limits"""
253 |         # Check burst limit (10 seconds)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:256:9
    |
254 |         burst_requests = self.store.get_recent_requests(client_id, 10)
255 |         if burst_requests >= self.limits["burst_limit"]:
256 |         pass
    |         ^^^^
257 |             return 429, f"Burst limit exceeded: {burst_requests}/{self.limits['burst_limit']} requests in 10s"
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:257:1
    |
255 |         if burst_requests >= self.limits["burst_limit"]:
256 |         pass
257 |             return 429, f"Burst limit exceeded: {burst_requests}/{self.limits['burst_limit']} requests in 10s"
    | ^^^^^^^^^^^^
258 |
259 |         # Check per-minute limit
    |

E501 Line too long (110 > 88)
   --> backend\rate_limiting.py:257:89
    |
255 |         if burst_requests >= self.limits["burst_limit"]:
256 |         pass
257 |             return 429, f"Burst limit exceeded: {burst_requests}/{self.limits['burst_limit']} requests in 10s"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^
258 |
259 |         # Check per-minute limit
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:262:9
    |
260 |         minute_requests = self.store.get_recent_requests(client_id, 60)
261 |         if minute_requests >= self.limits["requests_per_minute"]:
262 |         pass
    |         ^^^^
263 |             return 429, f"Rate limit exceeded: {minute_requests}/{self.limits['requests_per_minute']} requests per minute"
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:263:1
    |
261 |         if minute_requests >= self.limits["requests_per_minute"]:
262 |         pass
263 |             return 429, f"Rate limit exceeded: {minute_requests}/{self.limits['requests_per_minute']} requests per minute"
    | ^^^^^^^^^^^^
264 |
265 |         # Check per-hour limit
    |

E501 Line too long (122 > 88)
   --> backend\rate_limiting.py:263:89
    |
261 |         if minute_requests >= self.limits["requests_per_minute"]:
262 |         pass
263 |             return 429, f"Rate limit exceeded: {minute_requests}/{self.limits['requests_per_minute']} requests per minute"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
264 |
265 |         # Check per-hour limit
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:266:9
    |
265 |         # Check per-hour limit
266 |         hour_requests = self.store.get_recent_requests(client_id, 3600)
    |         ^
267 |         if hour_requests >= self.limits["requests_per_hour"]:
268 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:268:9
    |
266 |         hour_requests = self.store.get_recent_requests(client_id, 3600)
267 |         if hour_requests >= self.limits["requests_per_hour"]:
268 |         pass
    |         ^^^^
269 |             return 429, f"Rate limit exceeded: {hour_requests}/{self.limits['requests_per_hour']} requests per hour"
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:269:1
    |
267 |         if hour_requests >= self.limits["requests_per_hour"]:
268 |         pass
269 |             return 429, f"Rate limit exceeded: {hour_requests}/{self.limits['requests_per_hour']} requests per hour"
    | ^^^^^^^^^^^^
270 |
271 |         return None
    |

E501 Line too long (116 > 88)
   --> backend\rate_limiting.py:269:89
    |
267 |         if hour_requests >= self.limits["requests_per_hour"]:
268 |         pass
269 |             return 429, f"Rate limit exceeded: {hour_requests}/{self.limits['requests_per_hour']} requests per hour"
    |                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
270 |
271 |         return None
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:271:9
    |
269 |             return 429, f"Rate limit exceeded: {hour_requests}/{self.limits['requests_per_hour']} requests per hour"
270 |
271 |         return None
    |         ^
272 |
273 |     async def __call__(self, request: Request, call_next):
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:273:5
    |
271 |         return None
272 |
273 |     async def __call__(self, request: Request, call_next):
    |     ^
274 |         # Skip in test mode
275 |         if _is_test_mode():
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:276:9
    |
274 |         # Skip in test mode
275 |         if _is_test_mode():
276 |         pass
    |         ^^^^
277 |             return await call_next(request)
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:277:1
    |
275 |         if _is_test_mode():
276 |         pass
277 |             return await call_next(request)
    | ^^^^^^^^^^^^
278 |
279 |         timestamp = time.time()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:284:9
    |
282 |         # Check if client is blocked
283 |         if self.store.is_blocked(client_id):
284 |         pass
    |         ^^^^
285 |             self.store.record_security_event(
286 |                 "blocked_request", client_id, "Request from blocked client"
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:285:1
    |
283 |         if self.store.is_blocked(client_id):
284 |         pass
285 |             self.store.record_security_event(
    | ^^^^^^^^^^^^
286 |                 "blocked_request", client_id, "Request from blocked client"
287 |             )
    |

E501 Line too long (90 > 88)
   --> backend\rate_limiting.py:290:89
    |
288 |             return JSONResponse(
289 |                 status_code=403,
290 |                 content={"error": "Client temporarily blocked due to suspicious activity"}
    |                                                                                         ^^
291 |             )
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:294:9
    |
293 |         # Check request size
294 |         if not self._check_request_size(request):
    |         ^
295 |         pass
296 |             self.store.record_security_event(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:295:9
    |
293 |         # Check request size
294 |         if not self._check_request_size(request):
295 |         pass
    |         ^^^^
296 |             self.store.record_security_event(
297 |                 "oversized_request", client_id, "Request size exceeds limit"
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:296:1
    |
294 |         if not self._check_request_size(request):
295 |         pass
296 |             self.store.record_security_event(
    | ^^^^^^^^^^^^
297 |                 "oversized_request", client_id, "Request size exceeds limit"
298 |             )
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:305:9
    |
304 |         # Check security patterns
305 |         try:
    |         ^
306 |         pass
307 |             await self._check_security_patterns(request, client_id)
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\rate_limiting.py:306:9
    |
304 |         # Check security patterns
305 |         try:
306 |         pass
    |         ^^^^
307 |             await self._check_security_patterns(request, client_id)
308 |         except HTTPException as e:
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:307:1
    |
305 |         try:
306 |         pass
307 |             await self._check_security_patterns(request, client_id)
    | ^^^^^^^^^^^^
308 |         except HTTPException as e:
309 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:308:9
    |
306 |         pass
307 |             await self._check_security_patterns(request, client_id)
308 |         except HTTPException as e:
    |         ^
309 |         pass
310 |             return JSONResponse(
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:308:30
    |
306 |         pass
307 |             await self._check_security_patterns(request, client_id)
308 |         except HTTPException as e:
    |                              ^^
309 |         pass
310 |             return JSONResponse(
    |

invalid-syntax: Expected an expression
   --> backend\rate_limiting.py:308:35
    |
306 |         pass
307 |             await self._check_security_patterns(request, client_id)
308 |         except HTTPException as e:
    |                                   ^
309 |         pass
310 |             return JSONResponse(
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:310:1
    |
308 |         except HTTPException as e:
309 |         pass
310 |             return JSONResponse(
    | ^^^^^^^^^^^^
311 |                 status_code=e.status_code,
312 |                 content={"error": e.detail}
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:316:9
    |
315 |         # Check rate limits
316 |         rate_limit_result = self._check_rate_limits(client_id, timestamp)
    |         ^
317 |         if rate_limit_result:
318 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:318:9
    |
316 |         rate_limit_result = self._check_rate_limits(client_id, timestamp)
317 |         if rate_limit_result:
318 |         pass
    |         ^^^^
319 |             status_code, message = rate_limit_result
320 |             self.store.record_security_event("rate_limit_exceeded", client_id, message)
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:319:1
    |
317 |         if rate_limit_result:
318 |         pass
319 |             status_code, message = rate_limit_result
    | ^^^^^^^^^^^^
320 |             self.store.record_security_event("rate_limit_exceeded", client_id, message)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\rate_limiting.py:327:13
    |
325 |                 > self.limits["requests_per_minute"] * 2
326 |             ):
327 |             pass
    |             ^^^^
328 |                 # 10 minute block
329 |                 self.store.block_client(client_id, duration=600)
    |

invalid-syntax: Unexpected indentation
   --> backend\rate_limiting.py:329:1
    |
327 |             pass
328 |                 # 10 minute block
329 |                 self.store.block_client(client_id, duration=600)
    | ^^^^^^^^^^^^^^^^
330 |
331 |             return JSONResponse(
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:331:13
    |
329 |                 self.store.block_client(client_id, duration=600)
330 |
331 |             return JSONResponse(
    |             ^
332 |                 status_code=status_code,
333 |                 content={"error": message, "retry_after": 60}
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:337:9
    |
336 |         # Record successful request
337 |         self.store.record_request(client_id, timestamp)
    |         ^
338 |
339 |         # Add security headers to response
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:351:5
    |
349 |         return response
350 |
351 |     def get_security_status(self) -> Dict:
    |     ^
352 |         pass
353 |         """Get current security status and statistics"""
    |

invalid-syntax: Expected a statement
   --> backend\rate_limiting.py:362:1
    |
361 | # Global instance
362 | _rate_limit_middleware = None
    | ^
363 |
364 | def create_rate_limit_middleware():
    |

I001 [*] Import block is un-sorted or un-formatted
  --> backend\security.py:10:1
   |
10 | / import logging
11 | | import os
12 | | from typing import Optional
13 | | from cryptography.fernet import Fernet, InvalidToken
   | |____________________________________________________^
14 |
15 |   logger = logging.getLogger(__name__)
   |
help: Organize imports

E501 Line too long (97 > 88)
  --> backend\settings.py:72:89
   |
70 |         r"(?i)\b__import__\b",
71 |     ]
72 |     # Special handling for specific patterns first (before general pattern matching and escaping)
   |                                                                                         ^^^^^^^^^
73 |     if re.search(
74 |         r"import\s+os;\s*os\.system\(['\"]rm -rf /['\"]\)",
   |

invalid-syntax: Expected an indented block after `for` statement
   --> backend\settings.py:98:9
    |
 96 |         # Replace dangerous patterns with [REDACTED] for other cases
 97 |         for pattern in dangerous_patterns:
 98 |         pass
    |         ^^^^
 99 |             prompt = re.sub(pattern, "[REDACTED]", prompt)
100 |     # Escape special characters
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:99:1
    |
 97 |         for pattern in dangerous_patterns:
 98 |         pass
 99 |             prompt = re.sub(pattern, "[REDACTED]", prompt)
    | ^^^^^^^^^^^^
100 |     # Escape special characters
101 |     prompt = prompt.replace("<", "&lt;").replace(">", "&gt;")
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:111:1
    |
109 |     prompt = re.sub(r"\s+", " ", prompt).strip()
110 |     return prompt
111 | """
    | ^
112 | Centralized settings for backend and plugin bridge.
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\settings.py:235:9
    |
233 |             data = _yaml.safe_load(f) or {}
234 |         if not isinstance(data, dict):
235 |         pass
    |         ^^^^
236 |             return {}
237 |         # Drop unknown keys for safety
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:236:1
    |
234 |         if not isinstance(data, dict):
235 |         pass
236 |             return {}
    | ^^^^^^^^^^^^
237 |         # Drop unknown keys for safety
238 |         allowed = set(Settings.model_fields.keys())
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\settings.py:238:9
    |
236 |             return {}
237 |         # Drop unknown keys for safety
238 |         allowed = set(Settings.model_fields.keys())
    |         ^^^^^^^
239 |         return {k: v for k, v in data.items() if k in allowed}
240 |     except Exception:
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:240:5
    |
238 |         allowed = set(Settings.model_fields.keys())
239 |         return {k: v for k, v in data.items() if k in allowed}
240 |     except Exception:
    |     ^^^^^^
241 |         pass
242 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\settings.py:240:22
    |
238 |         allowed = set(Settings.model_fields.keys())
239 |         return {k: v for k, v in data.items() if k in allowed}
240 |     except Exception:
    |                      ^
241 |         pass
242 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:241:1
    |
239 |         return {k: v for k, v in data.items() if k in allowed}
240 |     except Exception:
241 |         pass
    | ^^^^^^^^
242 |         pass
243 |         return {}
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:246:1
    |
246 | def _coerce_value_for_field(field_name: str, value: Any) -> Optional[Any]:
    | ^
247 |     """Coerce a string value to the correct type for a given Settings field."""
248 |     field_info = Settings.model_fields.get(field_name)
    |

invalid-syntax: Expected an indented block after `elif` clause
   --> backend\settings.py:259:9
    |
257 |             return str(value).lower() in {"1", "true", "yes", "on"}
258 |         elif target_type is int:
259 |         pass
    |         ^^^^
260 |             return int(value)
261 |         elif target_type is float:
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:260:1
    |
258 |         elif target_type is int:
259 |         pass
260 |             return int(value)
    | ^^^^^^^^^^^^
261 |         elif target_type is float:
262 |         pass
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\settings.py:261:9
    |
259 |         pass
260 |             return int(value)
261 |         elif target_type is float:
    |         ^^^^
262 |         pass
263 |             return float(value)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\settings.py:261:14
    |
259 |         pass
260 |             return int(value)
261 |         elif target_type is float:
    |              ^^^^^^^^^^^^^^^^^^^^
262 |         pass
263 |             return float(value)
    |

invalid-syntax: Expected an expression
   --> backend\settings.py:261:35
    |
259 |         pass
260 |             return int(value)
261 |         elif target_type is float:
    |                                   ^
262 |         pass
263 |             return float(value)
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:263:1
    |
261 |         elif target_type is float:
262 |         pass
263 |             return float(value)
    | ^^^^^^^^^^^^
264 |         else:
265 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:264:9
    |
262 |         pass
263 |             return float(value)
264 |         else:
    |         ^^^^
265 |         pass
266 |             return str(value)
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:264:13
    |
262 |         pass
263 |             return float(value)
264 |         else:
    |             ^
265 |         pass
266 |             return str(value)
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:264:14
    |
262 |         pass
263 |             return float(value)
264 |         else:
    |              ^
265 |         pass
266 |             return str(value)
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:266:1
    |
264 |         else:
265 |         pass
266 |             return str(value)
    | ^^^^^^^^^^^^
267 |     except (ValueError, TypeError):
268 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:267:5
    |
265 |         pass
266 |             return str(value)
267 |     except (ValueError, TypeError):
    |     ^
268 |         pass
269 |         # If coercion fails, return None to indicate the value should be skipped.
    |

invalid-syntax: Only single target (not tuple) can be annotated
   --> backend\settings.py:267:12
    |
265 |         pass
266 |             return str(value)
267 |     except (ValueError, TypeError):
    |            ^^^^^^^^^^^^^^^^^^^^^^^
268 |         pass
269 |         # If coercion fails, return None to indicate the value should be skipped.
    |

invalid-syntax: Expected an expression
   --> backend\settings.py:267:36
    |
265 |         pass
266 |             return str(value)
267 |     except (ValueError, TypeError):
    |                                    ^
268 |         pass
269 |         # If coercion fails, return None to indicate the value should be skipped.
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:268:1
    |
266 |             return str(value)
267 |     except (ValueError, TypeError):
268 |         pass
    | ^^^^^^^^
269 |         # If coercion fails, return None to indicate the value should be skipped.
270 |         return None
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:273:1
    |
273 | def _merge_env(overrides: dict) -> dict:
    | ^
274 |     """Map selected environment variables into settings fields."""
275 |     env_map = {
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\settings.py:309:13
    |
307 |             coerced_value = _coerce_value_for_field(field, val)
308 |             if coerced_value is not None:
309 |             pass
    |             ^^^^
310 |                 overrides[field] = coerced_value
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:310:1
    |
308 |             if coerced_value is not None:
309 |             pass
310 |                 overrides[field] = coerced_value
    | ^^^^^^^^^^^^^^^^
311 |
312 |     return overrides
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:315:1
    |
315 | @lru_cache(maxsize=1)
    | ^
316 | def get_settings() -> Settings:
317 |     data = _load_yaml_config()
    |

invalid-syntax: Expected an indented block after `try` statement
   --> backend\settings.py:342:13
    |
340 |             # Type coercion for known fields
341 |             try:
342 |             pass
    |             ^^^^
343 |                 if key == "chunk_size" and isinstance(value, str):
344 |                     filtered_updates[key] = int(value)
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:343:1
    |
341 |             try:
342 |             pass
343 |                 if key == "chunk_size" and isinstance(value, str):
    | ^^^^^^^^^^^^^^^^
344 |                     filtered_updates[key] = int(value)
345 |                 elif key == "gpu" and isinstance(value, str):
    |

invalid-syntax: Expected an indented block after `elif` clause
   --> backend\settings.py:345:62
    |
343 |                 if key == "chunk_size" and isinstance(value, str):
344 |                     filtered_updates[key] = int(value)
345 |                 elif key == "gpu" and isinstance(value, str):
    |                                                              ^
346 |             pass
347 |                     filtered_updates[key] = value.lower() in ("true", "1", "yes")
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:347:1
    |
345 |                 elif key == "gpu" and isinstance(value, str):
346 |             pass
347 |                     filtered_updates[key] = value.lower() in ("true", "1", "yes")
    | ^^^^^^^^^^^^^^^^^^^^
348 |                 elif key == "similarity_threshold" and isinstance(value, str):
349 |             pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\settings.py:348:1
    |
346 |             pass
347 |                     filtered_updates[key] = value.lower() in ("true", "1", "yes")
348 |                 elif key == "similarity_threshold" and isinstance(value, str):
    | ^^^^^^^^^^^^^^^^
349 |             pass
350 |                     filtered_updates[key] = float(value)
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:348:17
    |
346 |             pass
347 |                     filtered_updates[key] = value.lower() in ("true", "1", "yes")
348 |                 elif key == "similarity_threshold" and isinstance(value, str):
    |                 ^^^^
349 |             pass
350 |                     filtered_updates[key] = float(value)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\settings.py:348:22
    |
346 |             pass
347 |                     filtered_updates[key] = value.lower() in ("true", "1", "yes")
348 |                 elif key == "similarity_threshold" and isinstance(value, str):
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
349 |             pass
350 |                     filtered_updates[key] = float(value)
    |

invalid-syntax: Expected an expression
   --> backend\settings.py:348:79
    |
346 |             pass
347 |                     filtered_updates[key] = value.lower() in ("true", "1", "yes")
348 |                 elif key == "similarity_threshold" and isinstance(value, str):
    |                                                                               ^
349 |             pass
350 |                     filtered_updates[key] = float(value)
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:350:1
    |
348 |                 elif key == "similarity_threshold" and isinstance(value, str):
349 |             pass
350 |                     filtered_updates[key] = float(value)
    | ^^^^^^^^^^^^^^^^^^^^
351 |                 elif key == "vault_path":
352 |             pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\settings.py:351:1
    |
349 |             pass
350 |                     filtered_updates[key] = float(value)
351 |                 elif key == "vault_path":
    | ^^^^^^^^^^^^^^^^
352 |             pass
353 |                     filtered_updates[key] = str(value)
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:351:17
    |
349 |             pass
350 |                     filtered_updates[key] = float(value)
351 |                 elif key == "vault_path":
    |                 ^^^^
352 |             pass
353 |                     filtered_updates[key] = str(value)
    |

invalid-syntax: Invalid annotated assignment target
   --> backend\settings.py:351:22
    |
349 |             pass
350 |                     filtered_updates[key] = float(value)
351 |                 elif key == "vault_path":
    |                      ^^^^^^^^^^^^^^^^^^^
352 |             pass
353 |                     filtered_updates[key] = str(value)
    |

invalid-syntax: Expected an expression
   --> backend\settings.py:351:42
    |
349 |             pass
350 |                     filtered_updates[key] = float(value)
351 |                 elif key == "vault_path":
    |                                          ^
352 |             pass
353 |                     filtered_updates[key] = str(value)
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:353:1
    |
351 |                 elif key == "vault_path":
352 |             pass
353 |                     filtered_updates[key] = str(value)
    | ^^^^^^^^^^^^^^^^^^^^
354 |                 else:
355 |             pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\settings.py:354:1
    |
352 |             pass
353 |                     filtered_updates[key] = str(value)
354 |                 else:
    | ^^^^^^^^^^^^^^^^
355 |             pass
356 |                     filtered_updates[key] = value
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:354:17
    |
352 |             pass
353 |                     filtered_updates[key] = str(value)
354 |                 else:
    |                 ^^^^
355 |             pass
356 |                     filtered_updates[key] = value
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:354:21
    |
352 |             pass
353 |                     filtered_updates[key] = str(value)
354 |                 else:
    |                     ^
355 |             pass
356 |                     filtered_updates[key] = value
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:354:22
    |
352 |             pass
353 |                     filtered_updates[key] = str(value)
354 |                 else:
    |                      ^
355 |             pass
356 |                     filtered_updates[key] = value
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:356:1
    |
354 |                 else:
355 |             pass
356 |                     filtered_updates[key] = value
    | ^^^^^^^^^^^^^^^^^^^^
357 |             except (ValueError, TypeError):
358 |             pass
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:357:13
    |
355 |             pass
356 |                     filtered_updates[key] = value
357 |             except (ValueError, TypeError):
    |             ^^^^^^
358 |             pass
359 |                 # Skip invalid type coercions
    |

invalid-syntax: Only single target (not tuple) can be annotated
   --> backend\settings.py:357:20
    |
355 |             pass
356 |                     filtered_updates[key] = value
357 |             except (ValueError, TypeError):
    |                    ^^^^^^^^^^^^^^^^^^^^^^^
358 |             pass
359 |                 # Skip invalid type coercions
    |

invalid-syntax: Expected an expression
   --> backend\settings.py:357:44
    |
355 |             pass
356 |                     filtered_updates[key] = value
357 |             except (ValueError, TypeError):
    |                                            ^
358 |             pass
359 |                 # Skip invalid type coercions
    |

invalid-syntax: Unexpected indentation
   --> backend\settings.py:360:1
    |
358 |             pass
359 |                 # Skip invalid type coercions
360 |                 continue
    | ^^^^^^^^^^^^^^^^
361 |     # Load existing config
362 |     cfg_path = Path(__file__).parent / "config.yaml"
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:362:5
    |
360 |                 continue
361 |     # Load existing config
362 |     cfg_path = Path(__file__).parent / "config.yaml"
    |     ^
363 |     if cfg_path.exists():
364 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\settings.py:378:1
    |
376 |     # Reload settings
377 |     return reload_settings()
    |                             ^
    |

E501 Line too long (90 > 88)
  --> backend\utils.py:24:89
   |
22 |         pass
23 |         msg = error_msg or f"Error in {fn.__name__}: {e}"
24 |         # Log the full exception traceback for better debugging, without crashing the app.
   |                                                                                         ^^
25 |         logger.error(msg, exc_info=True)
26 |         return default
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\utils.py:89:9
   |
87 |             return obj
88 |         if isinstance(obj, str):
89 |         pass
   |         ^^^^
90 |             return redact_text(obj)
91 |         if isinstance(obj, Mapping):
   |

invalid-syntax: Unexpected indentation
  --> backend\utils.py:90:1
   |
88 |         if isinstance(obj, str):
89 |         pass
90 |             return redact_text(obj)
   | ^^^^^^^^^^^^
91 |         if isinstance(obj, Mapping):
92 |         pass
   |

invalid-syntax: Expected `except` or `finally` after `try` block
  --> backend\utils.py:91:9
   |
89 |         pass
90 |             return redact_text(obj)
91 |         if isinstance(obj, Mapping):
   |         ^^
92 |         pass
93 |             return {k: redact_data(v) for k, v in obj.items()}
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\utils.py:92:9
   |
90 |             return redact_text(obj)
91 |         if isinstance(obj, Mapping):
92 |         pass
   |         ^^^^
93 |             return {k: redact_data(v) for k, v in obj.items()}
94 |         if isinstance(obj, Sequence) and not isinstance(obj, (bytes, bytearray)):
   |

invalid-syntax: Unexpected indentation
  --> backend\utils.py:93:1
   |
91 |         if isinstance(obj, Mapping):
92 |         pass
93 |             return {k: redact_data(v) for k, v in obj.items()}
   | ^^^^^^^^^^^^
94 |         if isinstance(obj, Sequence) and not isinstance(obj, (bytes, bytearray)):
95 |         pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> backend\utils.py:95:9
   |
93 |             return {k: redact_data(v) for k, v in obj.items()}
94 |         if isinstance(obj, Sequence) and not isinstance(obj, (bytes, bytearray)):
95 |         pass
   |         ^^^^
96 |             return [redact_data(v) for v in obj]
97 |         return obj
   |

invalid-syntax: Unexpected indentation
  --> backend\utils.py:96:1
   |
94 |         if isinstance(obj, Sequence) and not isinstance(obj, (bytes, bytearray)):
95 |         pass
96 |             return [redact_data(v) for v in obj]
   | ^^^^^^^^^^^^
97 |         return obj
98 |     except Exception:
   |

invalid-syntax: Expected a statement
  --> backend\utils.py:97:9
   |
95 |         pass
96 |             return [redact_data(v) for v in obj]
97 |         return obj
   |         ^
98 |     except Exception:
99 |         pass
   |

invalid-syntax: Expected a statement
   --> backend\utils.py:98:5
    |
 96 |             return [redact_data(v) for v in obj]
 97 |         return obj
 98 |     except Exception:
    |     ^
 99 |         pass
100 |         pass
    |

invalid-syntax: Expected an expression
   --> backend\utils.py:98:22
    |
 96 |             return [redact_data(v) for v in obj]
 97 |         return obj
 98 |     except Exception:
    |                      ^
 99 |         pass
100 |         pass
    |

invalid-syntax: Unexpected indentation
   --> backend\utils.py:99:1
    |
 97 |         return obj
 98 |     except Exception:
 99 |         pass
    | ^^^^^^^^
100 |         pass
101 |         # Best-effort; if redaction fails, return original object
    |

invalid-syntax: Expected a statement
   --> backend\utils.py:103:1
    |
101 |         # Best-effort; if redaction fails, return original object
102 |         return obj
    |                   ^
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\voice.py:134:9
    |
132 |         # Create a temporary file to write the audio data
133 |         with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
134 |         pass
    |         ^^^^
135 |             temp_path = temp_file.name
136 |             temp_file.write(audio_data)
    |

invalid-syntax: Unexpected indentation
   --> backend\voice.py:135:1
    |
133 |         with tempfile.NamedTemporaryFile(delete=False, suffix=".wav") as temp_file:
134 |         pass
135 |             temp_path = temp_file.name
    | ^^^^^^^^^^^^
136 |             temp_file.write(audio_data)
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> backend\voice.py:139:9
    |
138 |         # Use a 'with' statement to ensure the wave file is closed before deletion
139 |         with wave.open(temp_path, "rb") as wf:
    |         ^^^^
140 |         pass
141 |             if (
    |

invalid-syntax: Expected an indented block after `with` statement
   --> backend\voice.py:140:9
    |
138 |         # Use a 'with' statement to ensure the wave file is closed before deletion
139 |         with wave.open(temp_path, "rb") as wf:
140 |         pass
    |         ^^^^
141 |             if (
142 |                 wf.getnchannels() != 1
    |

invalid-syntax: Unexpected indentation
   --> backend\voice.py:141:1
    |
139 |         with wave.open(temp_path, "rb") as wf:
140 |         pass
141 |             if (
    | ^^^^^^^^^^^^
142 |                 wf.getnchannels() != 1
143 |                 or wf.getsampwidth() != 2
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\voice.py:155:45
    |
153 |             # Process the audio file in chunks
154 |             while data := wf.readframes(4000):
155 |                 if rec.AcceptWaveform(data):
    |                                             ^
156 |             pass
157 |                     part = json.loads(rec.Result())  # Let JSONDecodeError propagate
    |

invalid-syntax: Unexpected indentation
   --> backend\voice.py:157:1
    |
155 |                 if rec.AcceptWaveform(data):
156 |             pass
157 |                     part = json.loads(rec.Result())  # Let JSONDecodeError propagate
    | ^^^^^^^^^^^^^^^^^^^^
158 |                     if "text" in part:
159 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> backend\voice.py:159:1
    |
157 |                     part = json.loads(rec.Result())  # Let JSONDecodeError propagate
158 |                     if "text" in part:
159 |                 pass
    | ^^^^^^^^^^^^^^^^
160 |                         result.append(part["text"])
    |

invalid-syntax: Unexpected indentation
   --> backend\voice.py:160:1
    |
158 |                     if "text" in part:
159 |                 pass
160 |                         result.append(part["text"])
    | ^^^^^^^^^^^^^^^^^^^^^^^^
161 |
162 |             final = json.loads(rec.FinalResult())
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\voice.py:164:13
    |
162 |             final = json.loads(rec.FinalResult())
163 |             if "text" in final:
164 |             pass
    |             ^^^^
165 |                 result.append(final["text"])
166 |             text = " ".join([r for r in result if r])
    |

invalid-syntax: Unexpected indentation
   --> backend\voice.py:165:1
    |
163 |             if "text" in final:
164 |             pass
165 |                 result.append(final["text"])
    | ^^^^^^^^^^^^^^^^
166 |             text = " ".join([r for r in result if r])
167 |     finally:
    |

invalid-syntax: Expected a statement
   --> backend\voice.py:166:13
    |
164 |             pass
165 |                 result.append(final["text"])
166 |             text = " ".join([r for r in result if r])
    |             ^
167 |     finally:
168 |         pass
    |

invalid-syntax: Expected a statement
   --> backend\voice.py:167:5
    |
165 |                 result.append(final["text"])
166 |             text = " ".join([r for r in result if r])
167 |     finally:
    |     ^
168 |         pass
169 |         # Ensure the temporary file is always cleaned up
    |

invalid-syntax: Expected a statement
   --> backend\voice.py:167:12
    |
165 |                 result.append(final["text"])
166 |             text = " ".join([r for r in result if r])
167 |     finally:
    |            ^
168 |         pass
169 |         # Ensure the temporary file is always cleaned up
    |

invalid-syntax: Expected a statement
   --> backend\voice.py:167:13
    |
165 |                 result.append(final["text"])
166 |             text = " ".join([r for r in result if r])
167 |     finally:
    |             ^
168 |         pass
169 |         # Ensure the temporary file is always cleaned up
    |

invalid-syntax: Unexpected indentation
   --> backend\voice.py:168:1
    |
166 |             text = " ".join([r for r in result if r])
167 |     finally:
168 |         pass
    | ^^^^^^^^
169 |         # Ensure the temporary file is always cleaned up
170 |         if temp_path and os.path.exists(temp_path):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> backend\voice.py:171:9
    |
169 |         # Ensure the temporary file is always cleaned up
170 |         if temp_path and os.path.exists(temp_path):
171 |         pass
    |         ^^^^
172 |             os.remove(temp_path)
    |

invalid-syntax: Unexpected indentation
   --> backend\voice.py:172:1
    |
170 |         if temp_path and os.path.exists(temp_path):
171 |         pass
172 |             os.remove(temp_path)
    | ^^^^^^^^^^^^
173 |
174 |     # This return should be outside the try...finally block if it depends on the 'with' block
    |

E501 Line too long (93 > 88)
   --> backend\voice.py:174:89
    |
172 |             os.remove(temp_path)
173 |
174 |     # This return should be outside the try...finally block if it depends on the 'with' block
    |                                                                                         ^^^^^
175 |     return {"transcription": text}
    |

invalid-syntax: Expected a statement
   --> backend\voice.py:175:5
    |
174 |     # This return should be outside the try...finally block if it depends on the 'with' block
175 |     return {"transcription": text}
    |     ^
    |

E501 Line too long (93 > 88)
   --> backend\voice.py:178:89
    |
178 | # Make the model object accessible as a global name for tests that reference `model` directly
    |                                                                                         ^^^^^
179 | try:
180 |     pass
    |

invalid-syntax: Expected a statement
   --> backend\voice.py:179:1
    |
178 | # Make the model object accessible as a global name for tests that reference `model` directly
179 | try:
    | ^
180 |     pass
181 |     _builtins.model = model
    |

invalid-syntax: Expected an indented block after `if` statement
  --> find_missing_impact.py:11:1
   |
 9 |     pass
10 | if p.is_dir() and p.name!='archive':
11 | prop=p/'proposal.md'
   | ^^^^
12 | if prop.exists():
13 |     pass
   |

invalid-syntax: Expected an indented block after `if` statement
   --> fix_dependencies.py:118:9
    |
117 |         if re.search(pattern, content):
118 |         pass
    |         ^^^^
119 |             content = re.sub(pattern, replacement, content)
120 |             modified = True
    |

invalid-syntax: Unexpected indentation
   --> fix_dependencies.py:119:1
    |
117 |         if re.search(pattern, content):
118 |         pass
119 |             content = re.sub(pattern, replacement, content)
    | ^^^^^^^^^^^^
120 |             modified = True
121 |         else:
    |

invalid-syntax: Expected an indented block after `else` clause
   --> fix_dependencies.py:121:14
    |
119 |             content = re.sub(pattern, replacement, content)
120 |             modified = True
121 |         else:
    |              ^
122 |     pass
123 |     # Handle enterprise endpoints with conditional fix
    |

invalid-syntax: Expected a statement
   --> fix_dependencies.py:151:1
    |
149 |         return False
150 |
151 | def main():
    | ^
152 |     """Main function to run the dependency fixes"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> fix_dependencies.py:157:5
    |
156 |     if success:
157 |     pass
    |     ^^^^
158 |     else:
    |

invalid-syntax: Expected a statement
   --> fix_dependencies.py:158:5
    |
156 |     if success:
157 |     pass
158 |     else:
    |     ^^^^
159 |
160 | if __name__ == "__main__":
    |

invalid-syntax: Expected a statement
   --> fix_dependencies.py:158:9
    |
156 |     if success:
157 |     pass
158 |     else:
    |         ^
159 |
160 | if __name__ == "__main__":
    |

invalid-syntax: Expected a statement
   --> fix_dependencies.py:158:10
    |
156 |     if success:
157 |     pass
158 |     else:
    |          ^
159 |
160 | if __name__ == "__main__":
    |

invalid-syntax: Expected an indented block after `if` statement
  --> fix_spec_format.py:56:13
   |
54 |             spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
55 |             if spec_file.exists():
56 |             pass
   |             ^^^^
57 |                 spec_files.append(spec_file)
   |

invalid-syntax: Unexpected indentation
  --> fix_spec_format.py:57:1
   |
55 |             if spec_file.exists():
56 |             pass
57 |                 spec_files.append(spec_file)
   | ^^^^^^^^^^^^^^^^
   |

invalid-syntax: Expected a statement
  --> fix_spec_format.py:65:1
   |
65 | if __name__ == "__main__":
   | ^
66 |     pass
67 |     main()
   |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\archive_duplicates.py:42:9
   |
40 |         posix = p.as_posix()
41 |         if any(x in posix for x in EXCLUDED_PARTS):
42 |         pass
   |         ^^^^
43 |             continue
44 |         md_files.append(p)
   |

invalid-syntax: Unexpected indentation
  --> scripts\archive_duplicates.py:43:1
   |
41 |         if any(x in posix for x in EXCLUDED_PARTS):
42 |         pass
43 |             continue
   | ^^^^^^^^^^^^
44 |         md_files.append(p)
45 |     return md_files
   |

invalid-syntax: Expected a statement
  --> scripts\archive_duplicates.py:48:1
   |
48 | def canonical_change_dir_for(rel_path: str) -> Path:
   | ^
49 |     return CHANGES_DIR / to_change_id_for_path(rel_path)
   |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\archive_duplicates.py:65:9
   |
63 |         pattern = re.compile(rf"\b{re.escape(base)}\b", flags=re.IGNORECASE)
64 |         if pattern.search(text):
65 |         pass
   |         ^^^^
66 |             if len(rels) == 1:
67 |                 return rels[0]
   |

invalid-syntax: Unexpected indentation
  --> scripts\archive_duplicates.py:66:1
   |
64 |         if pattern.search(text):
65 |         pass
66 |             if len(rels) == 1:
   | ^^^^^^^^^^^^
67 |                 return rels[0]
68 |     return None
   |

invalid-syntax: Expected a statement
  --> scripts\archive_duplicates.py:71:1
   |
71 | def build_name_map(md_rel_paths: list[str]) -> dict[str, list[str]]:
   | ^
72 |     name_map: dict[str, list[str]] = {}
73 |     for rel in md_rel_paths:
   |

invalid-syntax: Expected an indented block after `for` statement
   --> scripts\archive_duplicates.py:98:9
    |
 96 |         target: str | None = None
 97 |         for file in (prop, spec):
 98 |         pass
    |         ^^^^
 99 |             if file.exists():
100 |                 text = file.read_text(encoding="utf-8", errors="ignore")
    |

invalid-syntax: Unexpected indentation
   --> scripts\archive_duplicates.py:99:1
    |
 97 |         for file in (prop, spec):
 98 |         pass
 99 |             if file.exists():
    | ^^^^^^^^^^^^
100 |                 text = file.read_text(encoding="utf-8", errors="ignore")
101 |                 target = (
    |

invalid-syntax: Expected an indented block after `if` statement
   --> scripts\archive_duplicates.py:106:9
    |
104 |                 )
105 |         if target and target in target_to_changes:
106 |         pass
    |         ^^^^
107 |             target_to_changes[target].append(change_dir)
    |

invalid-syntax: Unexpected indentation
   --> scripts\archive_duplicates.py:107:1
    |
105 |         if target and target in target_to_changes:
106 |         pass
107 |             target_to_changes[target].append(change_dir)
    | ^^^^^^^^^^^^
108 |
109 |     # Create archive directory
    |

invalid-syntax: Expected a statement
   --> scripts\archive_duplicates.py:110:5
    |
109 |     # Create archive directory
110 |     ARCHIVE_DIR.mkdir(exist_ok=True)
    |     ^
111 |
112 |     # Create timestamped archive subdirectory
    |

invalid-syntax: Expected an indented block after `for` statement
   --> scripts\archive_duplicates.py:125:9
    |
123 |         duplicates = [d for d in target_to_changes.get(rel, []) if d != canonical_dir]
124 |         for dup in duplicates:
125 |         pass
    |         ^^^^
126 |             if dup.exists():
127 |                 archive_path = archive_subdir / dup.name
    |

invalid-syntax: Unexpected indentation
   --> scripts\archive_duplicates.py:126:1
    |
124 |         for dup in duplicates:
125 |         pass
126 |             if dup.exists():
    | ^^^^^^^^^^^^
127 |                 archive_path = archive_subdir / dup.name
128 |                 shutil.move(str(dup), str(archive_path))
    |

invalid-syntax: Expected a statement
   --> scripts\archive_duplicates.py:133:5
    |
131 |                 )
132 |
133 |     print(
    |     ^
134 |         f"Archived {len(archived)} duplicate change folders to {archive_subdir.relative_to(CHANGES_DIR)}."
135 |     )
    |

invalid-syntax: Expected an indented block after `for` statement
   --> scripts\archive_duplicates.py:139:9
    |
137 |         pass
138 |         for a in archived[:10]:
139 |         if len(archived) > 10:
    |         ^^
140 |     pass
141 | if __name__ == "__main__":
    |

invalid-syntax: Expected an indented block after `if` statement
   --> scripts\archive_duplicates.py:139:31
    |
137 |         pass
138 |         for a in archived[:10]:
139 |         if len(archived) > 10:
    |                               ^
140 |     pass
141 | if __name__ == "__main__":
    |

invalid-syntax: Expected a statement
   --> scripts\archive_duplicates.py:141:1
    |
139 |         if len(archived) > 10:
140 |     pass
141 | if __name__ == "__main__":
    | ^
142 |     main()
    |

E741 Ambiguous variable name: `l`
   --> scripts\auto_fix_issues.py:284:56
    |
283 |     # 4. Remove trailing spaces from headings (MD018)
284 |     final = [re.sub(r'(#+\s+\S.*?)\s+$', r'\1', l) for l in final]
    |                                                        ^
285 |
286 |     # 5. Remove spaces before list markers (MD030)
    |

E741 Ambiguous variable name: `l`
   --> scripts\auto_fix_issues.py:287:55
    |
286 |     # 5. Remove spaces before list markers (MD030)
287 |     final = [re.sub(r'^ +([-*]|\d+\.)', r'\1', l) for l in final]
    |                                                       ^
288 |
289 |     # 6. Remove consecutive heading levels (MD025)
    |

invalid-syntax: Expected an indented block after `for` statement
  --> scripts\clean_nonprintable.py:24:9
   |
22 |         cleaned = bytearray()
23 |         for byte in content:
24 |         pass
   |         ^^^^
25 |             if byte in (0x09, 0x0A, 0x0D) or (0x20 <= byte <= 0x7E) or (byte >= 0xA0):
26 |                 cleaned.append(byte)
   |

invalid-syntax: Unexpected indentation
  --> scripts\clean_nonprintable.py:25:1
   |
23 |         for byte in content:
24 |         pass
25 |             if byte in (0x09, 0x0A, 0x0D) or (0x20 <= byte <= 0x7E) or (byte >= 0xA0):
   | ^^^^^^^^^^^^
26 |                 cleaned.append(byte)
27 |             else:
   |

invalid-syntax: Expected an indented block after `else` clause
  --> scripts\clean_nonprintable.py:28:13
   |
26 |                 cleaned.append(byte)
27 |             else:
28 |             pass
   |             ^^^^
29 |                 pass  # Skip non-printable characters
   |

invalid-syntax: Unexpected indentation
  --> scripts\clean_nonprintable.py:29:1
   |
27 |             else:
28 |             pass
29 |                 pass  # Skip non-printable characters
   | ^^^^^^^^^^^^^^^^
30 |
31 |         content = bytes(cleaned)
   |

invalid-syntax: Expected `except` or `finally` after `try` block
  --> scripts\clean_nonprintable.py:31:9
   |
29 |                 pass  # Skip non-printable characters
30 |
31 |         content = bytes(cleaned)
   |         ^
32 |
33 |         if content != original_content:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\clean_nonprintable.py:34:9
   |
33 |         if content != original_content:
34 |         pass
   |         ^^^^
35 |             with open(filepath, 'wb') as f:
36 |                 f.write(content)
   |

invalid-syntax: Unexpected indentation
  --> scripts\clean_nonprintable.py:35:1
   |
33 |         if content != original_content:
34 |         pass
35 |             with open(filepath, 'wb') as f:
   | ^^^^^^^^^^^^
36 |                 f.write(content)
37 |             removed = len(original_content) - len(content)
   |

invalid-syntax: Expected a statement
  --> scripts\clean_nonprintable.py:40:9
   |
38 |             print(f"[OK] Cleaned: {filepath} (removed {removed} non-printable bytes)")
39 |             return True
40 |         else:
   |         ^
41 |         pass
42 |             print(f"  No changes: {filepath}")
   |

invalid-syntax: Expected a statement
  --> scripts\clean_nonprintable.py:40:13
   |
38 |             print(f"[OK] Cleaned: {filepath} (removed {removed} non-printable bytes)")
39 |             return True
40 |         else:
   |             ^
41 |         pass
42 |             print(f"  No changes: {filepath}")
   |

invalid-syntax: Expected a statement
  --> scripts\clean_nonprintable.py:40:14
   |
38 |             print(f"[OK] Cleaned: {filepath} (removed {removed} non-printable bytes)")
39 |             return True
40 |         else:
   |              ^
41 |         pass
42 |             print(f"  No changes: {filepath}")
   |

invalid-syntax: Unexpected indentation
  --> scripts\clean_nonprintable.py:42:1
   |
40 |         else:
41 |         pass
42 |             print(f"  No changes: {filepath}")
   | ^^^^^^^^^^^^
43 |             return False
44 |     except Exception as e:
   |

invalid-syntax: Expected a statement
  --> scripts\clean_nonprintable.py:44:5
   |
42 |             print(f"  No changes: {filepath}")
43 |             return False
44 |     except Exception as e:
   |     ^
45 |         pass
46 |         print(f"[ERR] Error cleaning {filepath}: {e}")
   |

invalid-syntax: Expected a statement
  --> scripts\clean_nonprintable.py:44:22
   |
42 |             print(f"  No changes: {filepath}")
43 |             return False
44 |     except Exception as e:
   |                      ^^
45 |         pass
46 |         print(f"[ERR] Error cleaning {filepath}: {e}")
   |

invalid-syntax: Expected an expression
  --> scripts\clean_nonprintable.py:44:27
   |
42 |             print(f"  No changes: {filepath}")
43 |             return False
44 |     except Exception as e:
   |                           ^
45 |         pass
46 |         print(f"[ERR] Error cleaning {filepath}: {e}")
   |

invalid-syntax: Unexpected indentation
  --> scripts\clean_nonprintable.py:45:1
   |
43 |             return False
44 |     except Exception as e:
45 |         pass
   | ^^^^^^^^
46 |         print(f"[ERR] Error cleaning {filepath}: {e}")
47 |         return False
   |

invalid-syntax: Expected a statement
  --> scripts\clean_nonprintable.py:49:1
   |
47 |         return False
48 |
49 | def main():
   | ^
50 |     """Clean all Python files in the repository."""
51 |     root = Path(__file__).parent.parent
   |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\clean_nonprintable.py:61:13
   |
59 |         if '.venv' not in str(file_path) and '__pycache__' not in str(file_path):
60 |             if clean_file(file_path):
61 |             pass
   |             ^^^^
62 |                 fixed_count += 1
   |

invalid-syntax: Unexpected indentation
  --> scripts\clean_nonprintable.py:62:1
   |
60 |             if clean_file(file_path):
61 |             pass
62 |                 fixed_count += 1
   | ^^^^^^^^^^^^^^^^
63 |
64 |     print(f"\n{fixed_count} file(s) cleaned.")
   |

invalid-syntax: Expected a statement
  --> scripts\clean_nonprintable.py:67:1
   |
65 |     return 0 if fixed_count >= 0 else 1
66 |
67 | if __name__ == "__main__":
   | ^
68 |     pass
69 |     sys.exit(main())
   |

invalid-syntax: Expected an indented block after `while` statement
  --> scripts\fix_empty_blocks.py:22:9
   |
20 |         i = 0
21 |         while i < len(lines):
22 |         pass
   |         ^^^^
23 |             line = lines[i]
24 |             # Check for block starters
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:23:1
   |
21 |         while i < len(lines):
22 |         pass
23 |             line = lines[i]
   | ^^^^^^^^^^^^
24 |             # Check for block starters
25 |             if re.match(r'^\s*(except|if|elif|else|try|finally|for|while|with|def|class)\b', line.strip()):
   |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\fix_empty_blocks.py:25:108
   |
23 |             line = lines[i]
24 |             # Check for block starters
25 |             if re.match(r'^\s*(except|if|elif|else|try|finally|for|while|with|def|class)\b', line.strip()):
   |                                                                                                            ^
26 |         pass
27 |             pass
   |

invalid-syntax: Expected `except` or `finally` after `try` block
  --> scripts\fix_empty_blocks.py:26:9
   |
24 |             # Check for block starters
25 |             if re.match(r'^\s*(except|if|elif|else|try|finally|for|while|with|def|class)\b', line.strip()):
26 |         pass
   |         ^^^^
27 |             pass
28 |                 # Check if next non-empty line is dedented or EOF
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:27:1
   |
25 |             if re.match(r'^\s*(except|if|elif|else|try|finally|for|while|with|def|class)\b', line.strip()):
26 |         pass
27 |             pass
   | ^^^^^^^^^^^^
28 |                 # Check if next non-empty line is dedented or EOF
29 |                 j = i + 1
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:29:1
   |
27 |             pass
28 |                 # Check if next non-empty line is dedented or EOF
29 |                 j = i + 1
   | ^^^^^^^^^^^^^^^^
30 |                 while j < len(lines) and lines[j].strip() == '':
31 |             pass
   |

invalid-syntax: Expected an indented block after `while` statement
  --> scripts\fix_empty_blocks.py:30:65
   |
28 |                 # Check if next non-empty line is dedented or EOF
29 |                 j = i + 1
30 |                 while j < len(lines) and lines[j].strip() == '':
   |                                                                 ^
31 |             pass
32 |                     j += 1
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:32:1
   |
30 |                 while j < len(lines) and lines[j].strip() == '':
31 |             pass
32 |                     j += 1
   | ^^^^^^^^^^^^^^^^^^^^
33 |
34 |                 if j >= len(lines):
   |

invalid-syntax: unindent does not match any outer indentation level
  --> scripts\fix_empty_blocks.py:34:1
   |
32 |                     j += 1
33 |
34 |                 if j >= len(lines):
   | ^^^^^^^^^^^^^^^^
35 |             pass
36 |                     # EOF - add pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\fix_empty_blocks.py:35:13
   |
34 |                 if j >= len(lines):
35 |             pass
   |             ^^^^
36 |                     # EOF - add pass
37 |                     indent = len(line) - len(line.lstrip())
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:37:1
   |
35 |             pass
36 |                     # EOF - add pass
37 |                     indent = len(line) - len(line.lstrip())
   | ^^^^^^^^^^^^^^^^^^^^
38 |                     lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
39 |                     i = j + 1
   |

invalid-syntax: unindent does not match any outer indentation level
  --> scripts\fix_empty_blocks.py:40:1
   |
38 |                     lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
39 |                     i = j + 1
40 |                 else:
   | ^^^^^^^^^^^^^^^^
41 |             pass
42 |                     next_line = lines[j]
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:40:17
   |
38 |                     lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
39 |                     i = j + 1
40 |                 else:
   |                 ^^^^
41 |             pass
42 |                     next_line = lines[j]
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:40:21
   |
38 |                     lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
39 |                     i = j + 1
40 |                 else:
   |                     ^
41 |             pass
42 |                     next_line = lines[j]
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:40:22
   |
38 |                     lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
39 |                     i = j + 1
40 |                 else:
   |                      ^
41 |             pass
42 |                     next_line = lines[j]
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:42:1
   |
40 |                 else:
41 |             pass
42 |                     next_line = lines[j]
   | ^^^^^^^^^^^^^^^^^^^^
43 |                     current_indent = len(line) - len(line.lstrip())
44 |                     next_indent = len(next_line) - len(next_line.lstrip())
   |

invalid-syntax: unindent does not match any outer indentation level
  --> scripts\fix_empty_blocks.py:47:1
   |
46 |                     if next_indent <= current_indent:
47 |                 pass
   | ^^^^^^^^^^^^^^^^
48 |                         # Dedented - empty block, add pass
49 |                         indent = current_indent
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:49:1
   |
47 |                 pass
48 |                         # Dedented - empty block, add pass
49 |                         indent = current_indent
   | ^^^^^^^^^^^^^^^^^^^^^^^^
50 |                         lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
51 |                         i = j + 1
   |

invalid-syntax: unindent does not match any outer indentation level
  --> scripts\fix_empty_blocks.py:52:1
   |
50 |                         lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
51 |                         i = j + 1
52 |                     else:
   | ^^^^^^^^^^^^^^^^^^^^
53 |                 pass
54 |                         i += 1
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:52:21
   |
50 |                         lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
51 |                         i = j + 1
52 |                     else:
   |                     ^^^^
53 |                 pass
54 |                         i += 1
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:52:25
   |
50 |                         lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
51 |                         i = j + 1
52 |                     else:
   |                         ^
53 |                 pass
54 |                         i += 1
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:52:26
   |
50 |                         lines.insert(i + 1, ' ' * (indent + 4) + 'pass\n')
51 |                         i = j + 1
52 |                     else:
   |                          ^
53 |                 pass
54 |                         i += 1
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:53:1
   |
51 |                         i = j + 1
52 |                     else:
53 |                 pass
   | ^^^^^^^^^^^^^^^^
54 |                         i += 1
55 |             else:
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:54:1
   |
52 |                     else:
53 |                 pass
54 |                         i += 1
   | ^^^^^^^^^^^^^^^^^^^^^^^^
55 |             else:
56 |             pass
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:55:13
   |
53 |                 pass
54 |                         i += 1
55 |             else:
   |             ^
56 |             pass
57 |                 i += 1
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:55:17
   |
53 |                 pass
54 |                         i += 1
55 |             else:
   |                 ^
56 |             pass
57 |                 i += 1
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:55:18
   |
53 |                 pass
54 |                         i += 1
55 |             else:
   |                  ^
56 |             pass
57 |                 i += 1
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:57:1
   |
55 |             else:
56 |             pass
57 |                 i += 1
   | ^^^^^^^^^^^^^^^^
58 |
59 |         if lines != original_lines:
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:59:9
   |
57 |                 i += 1
58 |
59 |         if lines != original_lines:
   |         ^
60 |         pass
61 |             with open(filepath, 'w', encoding='utf-8') as f:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\fix_empty_blocks.py:60:9
   |
59 |         if lines != original_lines:
60 |         pass
   |         ^^^^
61 |             with open(filepath, 'w', encoding='utf-8') as f:
62 |                 f.writelines(lines)
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:61:1
   |
59 |         if lines != original_lines:
60 |         pass
61 |             with open(filepath, 'w', encoding='utf-8') as f:
   | ^^^^^^^^^^^^
62 |                 f.writelines(lines)
63 |             print(f"[OK] Fixed: {filepath}")
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:65:9
   |
63 |             print(f"[OK] Fixed: {filepath}")
64 |             return True
65 |         else:
   |         ^
66 |         pass
67 |             print(f"  No changes: {filepath}")
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:65:13
   |
63 |             print(f"[OK] Fixed: {filepath}")
64 |             return True
65 |         else:
   |             ^
66 |         pass
67 |             print(f"  No changes: {filepath}")
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:65:14
   |
63 |             print(f"[OK] Fixed: {filepath}")
64 |             return True
65 |         else:
   |              ^
66 |         pass
67 |             print(f"  No changes: {filepath}")
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:67:1
   |
65 |         else:
66 |         pass
67 |             print(f"  No changes: {filepath}")
   | ^^^^^^^^^^^^
68 |             return False
69 |     except Exception as e:
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:69:5
   |
67 |             print(f"  No changes: {filepath}")
68 |             return False
69 |     except Exception as e:
   |     ^
70 |         pass
71 |         print(f"[ERR] Error fixing {filepath}: {e}")
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:69:22
   |
67 |             print(f"  No changes: {filepath}")
68 |             return False
69 |     except Exception as e:
   |                      ^^
70 |         pass
71 |         print(f"[ERR] Error fixing {filepath}: {e}")
   |

invalid-syntax: Expected an expression
  --> scripts\fix_empty_blocks.py:69:27
   |
67 |             print(f"  No changes: {filepath}")
68 |             return False
69 |     except Exception as e:
   |                           ^
70 |         pass
71 |         print(f"[ERR] Error fixing {filepath}: {e}")
   |

invalid-syntax: Unexpected indentation
  --> scripts\fix_empty_blocks.py:70:1
   |
68 |             return False
69 |     except Exception as e:
70 |         pass
   | ^^^^^^^^
71 |         print(f"[ERR] Error fixing {filepath}: {e}")
72 |         return False
   |

invalid-syntax: Expected a statement
  --> scripts\fix_empty_blocks.py:74:1
   |
72 |         return False
73 |
74 | def main():
   | ^
75 |     """Fix all Python files."""
76 |     if len(sys.argv) > 1:
   |

E902 stream did not contain valid UTF-8
--> scripts\fix_removed_markers.py:1:1

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\generate_openspec_changes.py:83:9
   |
81 |         # Skip generated change proposals and excluded dirs to avoid noise
82 |         if any(part in p for part in EXCLUDED_PARTS):
83 |         pass
   |         ^^^^
84 |             continue
85 |         md_files.append(path)
   |

invalid-syntax: Unexpected indentation
  --> scripts\generate_openspec_changes.py:84:1
   |
82 |         if any(part in p for part in EXCLUDED_PARTS):
83 |         pass
84 |             continue
   | ^^^^^^^^^^^^
85 |         md_files.append(path)
   |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\generate_openspec_changes.py:95:9
   |
93 |         change_dir = REPO_ROOT / "openspec" / "changes" / change_id
94 |         if change_dir.exists():
95 |         pass
   |         ^^^^
96 |             skipped.append((md, "exists"))
97 |             continue
   |

invalid-syntax: Unexpected indentation
  --> scripts\generate_openspec_changes.py:96:1
   |
94 |         if change_dir.exists():
95 |         pass
96 |             skipped.append((md, "exists"))
   | ^^^^^^^^^^^^
97 |             continue
   |

invalid-syntax: Expected a statement
   --> scripts\generate_openspec_changes.py:116:5
    |
114 |         generated.append(rel_path)
115 |
116 |     if generated:
    |     ^
117 |         pass
118 |         for g in generated[:10]:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> scripts\generate_openspec_changes.py:118:33
    |
116 |     if generated:
117 |         pass
118 |         for g in generated[:10]:
    |                                 ^
    |

invalid-syntax: Expected a statement
   --> scripts\generate_openspec_changes.py:121:1
    |
121 | if __name__ == "__main__":
    | ^
122 |     pass
123 |     main()
    |

invalid-syntax: Expected an indented block after `if` statement
  --> scripts\repair_openspec_changes.py:42:9
   |
40 |         posix = p.as_posix()
41 |         if any(x in posix for x in EXCLUDED_PARTS):
42 |         pass
   |         ^^^^
43 |             continue
44 |         md_files.append(p)
   |

invalid-syntax: Unexpected indentation
  --> scripts\repair_openspec_changes.py:43:1
   |
41 |         if any(x in posix for x in EXCLUDED_PARTS):
42 |         pass
43 |             continue
   | ^^^^^^^^^^^^
44 |         md_files.append(p)
45 |     return md_files
   |

invalid-syntax: Expected a statement
  --> scripts\repair_openspec_changes.py:48:1
   |
48 | def canonical_change_dir_for(rel_path: str) -> Path:
   | ^
49 |     return CHANGES_DIR / to_change_id_for_path(rel_path)
   |

invalid-syntax: Expected an indented block after `if` statement
   --> scripts\repair_openspec_changes.py:103:9
    |
101 |         pattern = re.compile(rf"\b{re.escape(base)}\b", flags=re.IGNORECASE)
102 |         if pattern.search(text):
103 |         pass
    |         ^^^^
104 |             if len(rels) == 1:
105 |                 return rels[0]
    |

invalid-syntax: Unexpected indentation
   --> scripts\repair_openspec_changes.py:104:1
    |
102 |         if pattern.search(text):
103 |         pass
104 |             if len(rels) == 1:
    | ^^^^^^^^^^^^
105 |                 return rels[0]
106 |     return None
    |

invalid-syntax: Expected a statement
   --> scripts\repair_openspec_changes.py:109:1
    |
109 | def build_name_map(md_rel_paths: list[str]) -> dict[str, list[str]]:
    | ^
110 |     name_map: dict[str, list[str]] = {}
111 |     for rel in md_rel_paths:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> scripts\repair_openspec_changes.py:136:9
    |
134 |         target: str | None = None
135 |         for file in (prop, spec):
136 |         pass
    |         ^^^^
137 |             if file.exists():
138 |                 text = file.read_text(encoding="utf-8", errors="ignore")
    |

invalid-syntax: Unexpected indentation
   --> scripts\repair_openspec_changes.py:137:1
    |
135 |         for file in (prop, spec):
136 |         pass
137 |             if file.exists():
    | ^^^^^^^^^^^^
138 |                 text = file.read_text(encoding="utf-8", errors="ignore")
139 |                 target = (
    |

invalid-syntax: Expected an indented block after `if` statement
   --> scripts\repair_openspec_changes.py:144:9
    |
142 |                 )
143 |         if target and target in target_to_changes:
144 |         pass
    |         ^^^^
145 |             target_to_changes[target].append(change_dir)
    |

invalid-syntax: Unexpected indentation
   --> scripts\repair_openspec_changes.py:145:1
    |
143 |         if target and target in target_to_changes:
144 |         pass
145 |             target_to_changes[target].append(change_dir)
    | ^^^^^^^^^^^^
146 |
147 |     # Create archive directory structure
    |

invalid-syntax: Expected a statement
   --> scripts\repair_openspec_changes.py:148:5
    |
147 |     # Create archive directory structure
148 |     ARCHIVE_DIR.mkdir(exist_ok=True)
    |     ^
149 |     timestamp = datetime.now().strftime("%Y-%m-%d")
150 |     archive_subdir = ARCHIVE_DIR / f"{timestamp}-duplicate-cleanup"
    |

invalid-syntax: Expected an indented block after `for` statement
   --> scripts\repair_openspec_changes.py:162:9
    |
160 |         duplicates = [d for d in target_to_changes.get(rel, []) if d != canonical_dir]
161 |         for dup in duplicates:
162 |         pass
    |         ^^^^
163 |             if dup.exists():
164 |                 archive_path = archive_subdir / dup.name
    |

invalid-syntax: Unexpected indentation
   --> scripts\repair_openspec_changes.py:163:1
    |
161 |         for dup in duplicates:
162 |         pass
163 |             if dup.exists():
    | ^^^^^^^^^^^^
164 |                 archive_path = archive_subdir / dup.name
165 |                 shutil.move(str(dup), str(archive_path))
    |

invalid-syntax: Expected a statement
   --> scripts\repair_openspec_changes.py:185:5
    |
183 |         regenerated.append(canonical_dir.relative_to(REPO_ROOT).as_posix())
184 |
185 |     print(
    |     ^
186 |         f"Archived {len(archived)} duplicate change folders to {archive_subdir.relative_to(CHANGES_DIR)}."
187 |     )
    |

invalid-syntax: Expected an indented block after `for` statement
   --> scripts\repair_openspec_changes.py:191:9
    |
189 |         pass
190 |         for a in archived[:10]:
191 |         if len(archived) > 10:
    |         ^^
192 |     pass
193 | if __name__ == "__main__":
    |

invalid-syntax: Expected an indented block after `if` statement
   --> scripts\repair_openspec_changes.py:191:31
    |
189 |         pass
190 |         for a in archived[:10]:
191 |         if len(archived) > 10:
    |                               ^
192 |     pass
193 | if __name__ == "__main__":
    |

invalid-syntax: Expected a statement
   --> scripts\repair_openspec_changes.py:193:1
    |
191 |         if len(archived) > 10:
192 |     pass
193 | if __name__ == "__main__":
    | ^
194 |     main()
    |

I001 [*] Import block is un-sorted or un-formatted
  --> start_server.py:8:1
   |
 8 | / import uvicorn
 9 | | from backend.backend import app
   | |_______________________________^
10 |
11 |   #!/usr/bin/env python3
   |
help: Organize imports

E902 stream did not contain valid UTF-8
--> test_rate_limiting.py:1:1

I001 [*] Import block is un-sorted or un-formatted
  --> test_security_server.py:8:1
   |
 8 | / import os
 9 | | import sys
10 | | from fastapi import FastAPI
   | |___________________________^
11 |
12 |   #!/usr/bin/env python3
   |
help: Organize imports

invalid-syntax: Unexpected indentation
  --> tests\backend\test_backend.py:36:1
   |
34 |         class CSRFTestClient(TestClient):
35 |             pass
36 |                 def request(self, method, url, **kwargs):
   | ^^^^^^^^^^^^^^^^
37 |                     headers = kwargs.pop("headers", None)
38 |                     if headers is None:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\backend\test_backend.py:38:40
   |
36 |                 def request(self, method, url, **kwargs):
37 |                     headers = kwargs.pop("headers", None)
38 |                     if headers is None:
   |                                        ^
39 |                 pass
40 |                         headers = {}
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_backend.py:40:1
   |
38 |                     if headers is None:
39 |                 pass
40 |                         headers = {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^
41 |                     if method.upper() in ("POST", "PUT", "DELETE"):
42 |                 pass
   |

invalid-syntax: unindent does not match any outer indentation level
  --> tests\backend\test_backend.py:41:1
   |
39 |                 pass
40 |                         headers = {}
41 |                     if method.upper() in ("POST", "PUT", "DELETE"):
   | ^^^^^^^^^^^^^^^^^^^^
42 |                 pass
43 |                         headers["X-CSRF-Token"] = csrf_token
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\backend\test_backend.py:42:17
   |
40 |                         headers = {}
41 |                     if method.upper() in ("POST", "PUT", "DELETE"):
42 |                 pass
   |                 ^^^^
43 |                         headers["X-CSRF-Token"] = csrf_token
44 |                     kwargs["headers"] = headers
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_backend.py:43:1
   |
41 |                     if method.upper() in ("POST", "PUT", "DELETE"):
42 |                 pass
43 |                         headers["X-CSRF-Token"] = csrf_token
   | ^^^^^^^^^^^^^^^^^^^^^^^^
44 |                     kwargs["headers"] = headers
45 |                     return super().request(method, url, **kwargs)
   |

invalid-syntax: unindent does not match any outer indentation level
  --> tests\backend\test_backend.py:44:1
   |
42 |                 pass
43 |                         headers["X-CSRF-Token"] = csrf_token
44 |                     kwargs["headers"] = headers
   | ^^^^^^^^^^^^^^^^^^^^
45 |                     return super().request(method, url, **kwargs)
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_backend.py:45:1
   |
43 |                         headers["X-CSRF-Token"] = csrf_token
44 |                     kwargs["headers"] = headers
45 |                     return super().request(method, url, **kwargs)
   | ^^^^^^^^^^^^^^^^^^^^
46 |
47 |         return CSRFTestClient(app)
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_backend.py:57:5
   |
55 |     #         patch('backend.backend.cache_manager') as mock_cache, \
56 |     #         patch('backend.backend.get_cache_manager') as mock_performance_cache:
57 |     pass
   |     ^
58 |     #         # Setup mock performance cache
59 |     #         mock_performance_cache.return_value.get.return_value = None  # Default to no cache hit
   |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend.py:140:1
    |
140 | class TestRequestModels:
    | ^
141 |     """Test Pydantic request models."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_backend.py:184:9
    |
182 |             "backend.backend.EmbeddingsManager"
183 |         ), patch("backend.backend.CacheManager"):
184 |         pass
    |         ^^^^
185 |             # Explicitly instantiate ModelManager to trigger the mock
186 |             from backend.backend import ModelManager
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend.py:186:1
    |
184 |         pass
185 |             # Explicitly instantiate ModelManager to trigger the mock
186 |             from backend.backend import ModelManager
    | ^^^^^^^^^^^^
187 |
188 |             ModelManager(hf_token = "***PLACEHOLDER***")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend.py:207:1
    |
207 | if __name__ == "__main__":
    | ^
208 |     pass
209 |     pytest.main([__file__])
    |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\backend\test_backend_comprehensive.py:53:13
   |
51 |             headers = kwargs.pop("headers", None)
52 |             if headers is None:
53 |             pass
   |             ^^^^
54 |                 headers = {}
55 |             if method.upper() in ("POST", "PUT", "DELETE"):
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_backend_comprehensive.py:54:1
   |
52 |             if headers is None:
53 |             pass
54 |                 headers = {}
   | ^^^^^^^^^^^^^^^^
55 |             if method.upper() in ("POST", "PUT", "DELETE"):
56 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\backend\test_backend_comprehensive.py:56:13
   |
54 |                 headers = {}
55 |             if method.upper() in ("POST", "PUT", "DELETE"):
56 |             pass
   |             ^^^^
57 |                 headers["X-CSRF-Token"] = csrf_token
58 |             kwargs["headers"] = headers
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_backend_comprehensive.py:57:1
   |
55 |             if method.upper() in ("POST", "PUT", "DELETE"):
56 |             pass
57 |                 headers["X-CSRF-Token"] = csrf_token
   | ^^^^^^^^^^^^^^^^
58 |             kwargs["headers"] = headers
59 |             return super().request(method, url, **kwargs)
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_backend_comprehensive.py:60:5
   |
58 |             kwargs["headers"] = headers
59 |             return super().request(method, url, **kwargs)
60 |     return CSRFTestClient(backend_app)
   |     ^
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_backend_comprehensive.py:63:1
   |
63 | class TestHealthEndpoints:
   | ^
64 |     """Test health check endpoints."""
   |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_backend_comprehensive.py:109:9
    |
107 |         assert response.status_code in [200, 400, 422]
108 |         if response.status_code == 200:
109 |         pass
    |         ^^^^
110 |             data = response.json()
111 |             # Adjust to actual response format
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend_comprehensive.py:110:1
    |
108 |         if response.status_code == 200:
109 |         pass
110 |             data = response.json()
    | ^^^^^^^^^^^^
111 |             # Adjust to actual response format
112 |             assert isinstance(data, dict)  # Should be some response
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend_comprehensive.py:121:1
    |
121 | class TestAskEndpoints:
    | ^
122 |     """Test the LLM ask endpoints."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_backend_comprehensive.py:134:9
    |
132 |         assert response.status_code in [200, 400, 422, 500]
133 |         if response.status_code == 200:
134 |         pass
    |         ^^^^
135 |             data = response.json()
136 |             assert "answer" in data
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend_comprehensive.py:135:1
    |
133 |         if response.status_code == 200:
134 |         pass
135 |             data = response.json()
    | ^^^^^^^^^^^^
136 |             assert "answer" in data
137 |             # In test environment without real models, accept either string or reasonable fallback
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_backend_comprehensive.py:147:9
    |
145 |         assert response.status_code in [200, 400, 422, 500]
146 |         if response.status_code == 200:
147 |         pass
    |         ^^^^
148 |             data = response.json()
149 |             assert "answer" in data
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend_comprehensive.py:148:1
    |
146 |         if response.status_code == 200:
147 |         pass
148 |             data = response.json()
    | ^^^^^^^^^^^^
149 |             assert "answer" in data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend_comprehensive.py:151:5
    |
149 |             assert "answer" in data
150 |
151 |     def test_ask_validation_error(self, client):
    |     ^
152 |         """Test ask endpoint with invalid request data."""
153 |         # Missing required question field
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend_comprehensive.py:166:1
    |
166 | class TestReindexEndpoints:
    | ^
167 |     """Test vault reindexing endpoints."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_backend_comprehensive.py:175:9
    |
173 |         assert response.status_code in [200, 400, 422, 500]
174 |         if response.status_code == 200:
175 |         pass
    |         ^^^^
176 |             data = response.json()
177 |             assert "files" in data or "chunks" in data
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend_comprehensive.py:176:1
    |
174 |         if response.status_code == 200:
175 |         pass
176 |             data = response.json()
    | ^^^^^^^^^^^^
177 |             assert "files" in data or "chunks" in data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend_comprehensive.py:198:1
    |
198 | class TestWebEndpoints:
    | ^
199 |     """Test web content processing endpoints."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_backend_comprehensive.py:210:9
    |
208 |         assert response.status_code in [200, 400, 422, 500]
209 |         if response.status_code == 200:
210 |         pass
    |         ^^^^
211 |             data = response.json()
212 |             assert "answer" in data or "content" in data
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend_comprehensive.py:211:1
    |
209 |         if response.status_code == 200:
210 |         pass
211 |             data = response.json()
    | ^^^^^^^^^^^^
212 |             assert "answer" in data or "content" in data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend_comprehensive.py:231:1
    |
231 | class TestAdditionalEndpoints:
    | ^
232 |     """Test additional endpoints like transcribe, search, etc."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_backend_comprehensive.py:296:9
    |
294 |         expected_endpoints = ["/health", "/ask", "/reindex", "/api/config"]
295 |         for endpoint in expected_endpoints:
296 |         pass
    |         ^^^^
297 |             assert (
298 |                 endpoint in routes
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend_comprehensive.py:297:1
    |
295 |         for endpoint in expected_endpoints:
296 |         pass
297 |             assert (
    | ^^^^^^^^^^^^
298 |                 endpoint in routes
299 |             ), f"Expected endpoint {endpoint} not found in {routes}"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend_comprehensive.py:308:1
    |
308 | class TestServiceIntegration:
    | ^
309 |     pass
310 |     """Test integration with backend services."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_backend_comprehensive.py:326:9
    |
324 |         response = client.post("/ask", json=request_data)
325 |         if response.status_code == 200:
326 |         pass
    |         ^^^^
327 |             # Verify performance cache was checked and model was called
328 |             mock_performance_cache.return_value.get.assert_called()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend_comprehensive.py:328:1
    |
326 |         pass
327 |             # Verify performance cache was checked and model was called
328 |             mock_performance_cache.return_value.get.assert_called()
    | ^^^^^^^^^^^^
329 |             mock_model.generate.assert_called()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_backend_comprehensive.py:339:9
    |
337 |         response = client.post("/reindex", json=request_data)
338 |         if response.status_code == 200:
339 |         pass
    |         ^^^^
340 |             mock_vault.reindex.assert_called()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_backend_comprehensive.py:340:1
    |
338 |         if response.status_code == 200:
339 |         pass
340 |             mock_vault.reindex.assert_called()
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_backend_comprehensive.py:343:1
    |
343 | if __name__ == "__main__":
    | ^
344 |     pass
345 |     pytest.main([__file__, "-v"])
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:157:9
    |
156 |         with tempfile.TemporaryDirectory() as temp_dir:
157 |         pass
    |         ^^^^
158 |             cache = EmbeddingCache(cache_dir=temp_dir)
159 |             assert cache.cache_file.parent == Path(temp_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:158:1
    |
156 |         with tempfile.TemporaryDirectory() as temp_dir:
157 |         pass
158 |             cache = EmbeddingCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
159 |             assert cache.cache_file.parent == Path(temp_dir)
160 |             assert cache.data == {}
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:167:9
    |
166 |         with tempfile.TemporaryDirectory() as temp_dir:
167 |         pass
    |         ^^^^
168 |             cache = EmbeddingCache(cache_dir=temp_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:168:1
    |
166 |         with tempfile.TemporaryDirectory() as temp_dir:
167 |         pass
168 |             cache = EmbeddingCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
169 |
170 |             def mock_embed_fn(text):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:179:5
    |
177 |             assert result2 == [0.1, 0.2, 0.3]  # Should return cached, not compute new
178 |
179 |     def test_embedding_cache_hash_key_consistent(self):
    |     ^
180 |         """Test that hash keys are consistent."""
181 |         from backend.caching import EmbeddingCache
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:184:9
    |
183 |         with tempfile.TemporaryDirectory() as temp_dir:
184 |         pass
    |         ^^^^
185 |             cache = EmbeddingCache(cache_dir=temp_dir)
186 |             hash1 = cache._hash_key("test text")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:185:1
    |
183 |         with tempfile.TemporaryDirectory() as temp_dir:
184 |         pass
185 |             cache = EmbeddingCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
186 |             hash1 = cache._hash_key("test text")
187 |             hash2 = cache._hash_key("test text")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:192:5
    |
190 |             assert hash1 == hash3  # Should strip whitespace
191 |
192 |     def test_embedding_cache_persist_and_reload(self):
    |     ^
193 |         """Test that cache persists to disk and reloads."""
194 |         from backend.caching import EmbeddingCache
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:197:9
    |
196 |         with tempfile.TemporaryDirectory() as temp_dir:
197 |         pass
    |         ^^^^
198 |             # First cache instance
199 |             cache1 = EmbeddingCache(cache_dir=temp_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:199:1
    |
197 |         pass
198 |             # First cache instance
199 |             cache1 = EmbeddingCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
200 |             cache1.get_or_compute("test", lambda x: [1, 2, 3])
201 |             # Second cache instance should load from disk
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:207:1
    |
207 | class TestFileHashCache:
    | ^
208 |     """Test FileHashCache class specifically."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:216:9
    |
215 |         with tempfile.TemporaryDirectory() as temp_dir:
216 |         pass
    |         ^^^^
217 |             cache = FileHashCache(cache_dir=temp_dir)
218 |             assert cache.cache_file.parent == Path(temp_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:217:1
    |
215 |         with tempfile.TemporaryDirectory() as temp_dir:
216 |         pass
217 |             cache = FileHashCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
218 |             assert cache.cache_file.parent == Path(temp_dir)
219 |             assert cache.data == {}
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:226:9
    |
225 |         with tempfile.TemporaryDirectory() as temp_dir:
226 |         pass
    |         ^^^^
227 |             cache = FileHashCache(cache_dir=temp_dir)
228 |             # Create a test file
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:227:1
    |
225 |         with tempfile.TemporaryDirectory() as temp_dir:
226 |         pass
227 |             cache = FileHashCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
228 |             # Create a test file
229 |             test_file = Path(temp_dir) / "test.txt"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:236:5
    |
234 |             assert cache.is_changed(test_file) is False
235 |
236 |     def test_file_hash_cache_detects_changes(self):
    |     ^
237 |         """Test that file changes are detected."""
238 |         from backend.caching import FileHashCache
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:241:9
    |
240 |         with tempfile.TemporaryDirectory() as temp_dir:
241 |         pass
    |         ^^^^
242 |             cache = FileHashCache(cache_dir=temp_dir)
243 |             # Create and cache a file
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:242:1
    |
240 |         with tempfile.TemporaryDirectory() as temp_dir:
241 |         pass
242 |             cache = FileHashCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
243 |             # Create and cache a file
244 |             test_file = Path(temp_dir) / "test.txt"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:252:5
    |
250 |             assert cache.is_changed(test_file is True)
251 |
252 |     def test_file_hash_cache_persist_and_reload(self):
    |     ^
253 |         pass
254 |         """Test that file hash cache persists and reloads."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:258:9
    |
257 |         with tempfile.TemporaryDirectory() as temp_dir:
258 |         pass
    |         ^^^^
259 |             # Create a test file
260 |             test_file = Path(temp_dir) / "test.txt"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:260:1
    |
258 |         pass
259 |             # Create a test file
260 |             test_file = Path(temp_dir) / "test.txt"
    | ^^^^^^^^^^^^
261 |             test_file.write_text("test content")
262 |             # First cache instance
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:270:1
    |
270 | class TestCachingErrorScenarios:
    | ^
271 |     """Test error handling scenarios in caching."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:279:9
    |
278 |         with tempfile.TemporaryDirectory() as temp_dir:
279 |         pass
    |         ^^^^
280 |             cache = EmbeddingCache(cache_dir=temp_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:280:1
    |
278 |         with tempfile.TemporaryDirectory() as temp_dir:
279 |         pass
280 |             cache = EmbeddingCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
281 |
282 |             def failing_embed_fn(text):
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:294:9
    |
293 |         with tempfile.TemporaryDirectory() as temp_dir:
294 |         pass
    |         ^^^^
295 |             cache = FileHashCache(cache_dir=temp_dir)
296 |             nonexistent_file = Path(temp_dir) / "nonexistent.txt"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:295:1
    |
293 |         with tempfile.TemporaryDirectory() as temp_dir:
294 |         pass
295 |             cache = FileHashCache(cache_dir=temp_dir)
    | ^^^^^^^^^^^^
296 |             nonexistent_file = Path(temp_dir) / "nonexistent.txt"
297 |             # Should handle gracefully and return True (changed/new)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:301:5
    |
299 |             assert result is True
300 |
301 |     def test_embedding_cache_corrupted_cache_file(self):
    |     ^
302 |         """Test EmbeddingCache with corrupted cache file."""
303 |         from backend.caching import EmbeddingCache
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:306:9
    |
305 |         with tempfile.TemporaryDirectory() as temp_dir:
306 |         pass
    |         ^^^^
307 |             # Create corrupted cache file
308 |             cache_file = Path(temp_dir) / "embeddings.json"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:308:1
    |
306 |         pass
307 |             # Create corrupted cache file
308 |             cache_file = Path(temp_dir) / "embeddings.json"
    | ^^^^^^^^^^^^
309 |             cache_file.write_text("invalid json content")
310 |             # Should handle gracefully and start with empty cache
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:314:5
    |
312 |             assert cache.data == {}
313 |
314 |     def test_file_hash_cache_corrupted_cache_file(self):
    |     ^
315 |         pass
316 |         """Test FileHashCache with corrupted cache file."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_caching.py:320:9
    |
319 |         with tempfile.TemporaryDirectory() as temp_dir:
320 |         pass
    |         ^^^^
321 |             # Create corrupted cache file
322 |             cache_file = Path(temp_dir) / "filehashes.json"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_caching.py:322:1
    |
320 |         pass
321 |             # Create corrupted cache file
322 |             cache_file = Path(temp_dir) / "filehashes.json"
    | ^^^^^^^^^^^^
323 |             cache_file.write_text("invalid json content")
324 |             # Should handle gracefully and start with empty cache
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_caching.py:329:1
    |
329 | if __name__ == "__main__":
    | ^
330 |     pass
331 |     pytest.main([__file__])
    |

invalid-syntax: Expected an indented block after `try` statement
  --> tests\backend\test_config_endpoints.py:23:9
   |
22 |         try:
23 |         pass
   |         ^^^^
24 |             get_settings.cache_clear()
25 |         except AttributeError:
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_config_endpoints.py:24:1
   |
22 |         try:
23 |         pass
24 |             get_settings.cache_clear()
   | ^^^^^^^^^^^^
25 |         except AttributeError:
26 |         pass
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_config_endpoints.py:25:9
   |
23 |         pass
24 |             get_settings.cache_clear()
25 |         except AttributeError:
   |         ^^^^^^
26 |         pass
27 |             pass
   |

invalid-syntax: Expected an expression
  --> tests\backend\test_config_endpoints.py:25:31
   |
23 |         pass
24 |             get_settings.cache_clear()
25 |         except AttributeError:
   |                               ^
26 |         pass
27 |             pass
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_config_endpoints.py:27:1
   |
25 |         except AttributeError:
26 |         pass
27 |             pass
   | ^^^^^^^^^^^^
28 |         self.client = TestClient(app)
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_config_endpoints.py:30:5
   |
28 |         self.client = TestClient(app)
29 |
30 |     def test_get_config_endpoint(self):
   |     ^
31 |         """Test GET /api/config returns current settings."""
32 |         response = self.client.get("/api/config")
   |

invalid-syntax: Expected a statement
   --> tests\backend\test_config_endpoints.py:103:1
    |
103 | class TestConfigEndpointIntegration:
    | ^
104 |     pass
105 |     """Integration tests for config endpoints with real settings."""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\backend\test_config_endpoints.py:112:9
    |
111 |         try:
112 |         pass
    |         ^^^^
113 |             get_settings.cache_clear()
114 |         except AttributeError:
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_config_endpoints.py:113:1
    |
111 |         try:
112 |         pass
113 |             get_settings.cache_clear()
    | ^^^^^^^^^^^^
114 |         except AttributeError:
115 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_config_endpoints.py:114:9
    |
112 |         pass
113 |             get_settings.cache_clear()
114 |         except AttributeError:
    |         ^^^^^^
115 |         pass
116 |             pass
    |

invalid-syntax: Expected an expression
   --> tests\backend\test_config_endpoints.py:114:31
    |
112 |         pass
113 |             get_settings.cache_clear()
114 |         except AttributeError:
    |                               ^
115 |         pass
116 |             pass
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_config_endpoints.py:116:1
    |
114 |         except AttributeError:
115 |         pass
116 |             pass
    | ^^^^^^^^^^^^
117 |         self.client = TestClient(app)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_config_endpoints.py:119:5
    |
117 |         self.client = TestClient(app)
118 |
119 |     def test_get_config_integration(self):
    |     ^
120 |         """Test that GET /api/config returns expected fields."""
121 |         response = self.client.get("/api/config")
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_config_endpoints.py:142:9
    |
140 |         ]
141 |         for field in expected_fields:
142 |         pass
    |         ^^^^
143 |             assert field in data, f"Expected field {field} not found in config response"
144 |         # Check types
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_config_endpoints.py:143:1
    |
141 |         for field in expected_fields:
142 |         pass
143 |             assert field in data, f"Expected field {field} not found in config response"
    | ^^^^^^^^^^^^
144 |         # Check types
145 |         assert isinstance(data["chunk_size"], int)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_config_endpoints.py:150:5
    |
148 |         assert isinstance(data["vault_path"], str)
149 |
150 |     def test_config_persistence_integration(self, tmp_path):
    |     ^
151 |         """Test that config updates persist and can be reloaded."""
152 |         # This test would require mocking the config file path or using a temp config
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_config_endpoints.py:183:1
    |
183 | if __name__ == "__main__":
    | ^
184 |     pass
185 |     pytest.main([__file__])
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_embeddings_comprehensive.py:253:9
    |
251 |         # Should raise the exception since from_settings() doesn't use safe_call
252 |         with pytest.raises(Exception, match="Settings not available"):
253 |         pass
    |         ^^^^
254 |         pass
255 |             EmbeddingsManager.from_settings()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_embeddings_comprehensive.py:255:1
    |
253 |         pass
254 |         pass
255 |             EmbeddingsManager.from_settings()
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_embeddings_comprehensive.py:258:1
    |
258 | class TestEmbeddingOperations:
    | ^
259 |     """Test core embedding operations."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_embeddings_comprehensive.py:357:9
    |
355 |         call_args, call_kwargs = mock_chroma_collection.upsert.call_args
356 |         if call_args:
357 |         pass
    |         ^^^^
358 |             # Called with positional arguments
359 |             call_data = call_args[0]
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_embeddings_comprehensive.py:359:1
    |
357 |         pass
358 |             # Called with positional arguments
359 |             call_data = call_args[0]
    | ^^^^^^^^^^^^
360 |             assert len(call_data) == 1
361 |             assert call_data[0]["id"] == "test_note.md"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_embeddings_comprehensive.py:364:9
    |
362 |             assert call_data[0]["embedding"] == [0.1, 0.2, 0.3, 0.4, 0.5]
363 |             assert call_data[0]["metadata"]["note_path"] == "test_note.md"
364 |         else:
    |         ^^^^
365 |         pass
366 |             # Called with keyword arguments - check that upsert was called
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_embeddings_comprehensive.py:364:13
    |
362 |             assert call_data[0]["embedding"] == [0.1, 0.2, 0.3, 0.4, 0.5]
363 |             assert call_data[0]["metadata"]["note_path"] == "test_note.md"
364 |         else:
    |             ^
365 |         pass
366 |             # Called with keyword arguments - check that upsert was called
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_embeddings_comprehensive.py:364:14
    |
362 |             assert call_data[0]["embedding"] == [0.1, 0.2, 0.3, 0.4, 0.5]
363 |             assert call_data[0]["metadata"]["note_path"] == "test_note.md"
364 |         else:
    |              ^
365 |         pass
366 |             # Called with keyword arguments - check that upsert was called
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_embeddings_comprehensive.py:368:1
    |
366 |             # Called with keyword arguments - check that upsert was called
367 |             # The actual implementation may vary, so just verify the call was made
368 |             assert mock_chroma_collection.upsert.called
    | ^^^^^^^^^^^^
369 |
370 |     @patch("backend.embeddings.PersistentClient")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_embeddings_comprehensive.py:370:5
    |
368 |             assert mock_chroma_collection.upsert.called
369 |
370 |     @patch("backend.embeddings.PersistentClient")
    |     ^
371 |     @patch("backend.embeddings.SentenceTransformer")
372 |     def test_add_embedding_no_collection(self, mock_st, mock_pc, temp_db_path):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_embeddings_comprehensive.py:385:1
    |
385 | class TestSearchOperations:
    | ^
386 |     pass
387 |     """Test search and query operations."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_embeddings_comprehensive.py:831:9
    |
829 |             side_effect=Exception("Skip model"),
830 |         ):
831 |         pass
    |         ^^^^
832 |             emb_mgr = EmbeddingsManager()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_embeddings_comprehensive.py:832:1
    |
830 |         ):
831 |         pass
832 |             emb_mgr = EmbeddingsManager()
    | ^^^^^^^^^^^^
833 |
834 |         text = "test content"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_embeddings_comprehensive.py:852:9
    |
850 |             side_effect=Exception("Skip model"),
851 |         ):
852 |         pass
    |         ^^^^
853 |             emb_mgr = EmbeddingsManager(chunk_size=5, overlap=2)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_embeddings_comprehensive.py:853:1
    |
851 |         ):
852 |         pass
853 |             emb_mgr = EmbeddingsManager(chunk_size=5, overlap=2)
    | ^^^^^^^^^^^^
854 |
855 |             # Test normal chunking
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_embeddings_comprehensive.py:872:5
    |
870 |             assert result[0] == short_text
871 |
872 |     def test_close_method(self):
    |     ^
873 |         pass
874 |         """Test resource cleanup with close() method."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_embeddings_comprehensive.py:881:9
    |
879 |             side_effect=Exception("Skip model"),
880 |         ):
881 |         pass
    |         ^^^^
882 |             emb_mgr = EmbeddingsManager()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_embeddings_comprehensive.py:882:1
    |
880 |         ):
881 |         pass
882 |             emb_mgr = EmbeddingsManager()
    | ^^^^^^^^^^^^
883 |
884 |         # Set some mock objects
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_embeddings_comprehensive.py:896:1
    |
896 | class TestIndexingMethods:
    | ^
897 |     """Test file indexing functionality."""
    |

invalid-syntax: Expected ',', found '.'
  --> tests\backend\test_enterprise_auth.py:14:4
   |
13 | # Ensure backend package importable before importing tested modules
14 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |    ^
15 |     EnterpriseAuthMiddleware,
16 |     SSOConfig,
   |

invalid-syntax: Expected ',', found '.'
  --> tests\backend\test_enterprise_auth.py:14:9
   |
13 | # Ensure backend package importable before importing tested modules
14 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |         ^
15 |     EnterpriseAuthMiddleware,
16 |     SSOConfig,
   |

invalid-syntax: Expected ')', found '('
  --> tests\backend\test_enterprise_auth.py:14:16
   |
13 | # Ensure backend package importable before importing tested modules
14 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |                ^
15 |     EnterpriseAuthMiddleware,
16 |     SSOConfig,
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_enterprise_auth.py:15:1
   |
13 | # Ensure backend package importable before importing tested modules
14 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
15 |     EnterpriseAuthMiddleware,
   | ^^^^
16 |     SSOConfig,
17 |     SSOManager,
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_enterprise_auth.py:20:1
   |
18 |     SSOProvider,
19 |     UserInfo,
20 | )
   | ^
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_enterprise_auth.py:20:2
   |
18 |     SSOProvider,
19 |     UserInfo,
20 | )
   |  ^
   |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_auth.py:169:9
    |
168 |         with patch.object(self.sso_manager, '_handle_azure_ad') as mock_handler:
169 |         pass
    |         ^^^^
170 |             mock_user = UserInfo(
171 |                 user_id="azure_123",
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_auth.py:170:1
    |
168 |         with patch.object(self.sso_manager, '_handle_azure_ad') as mock_handler:
169 |         pass
170 |             mock_user = UserInfo(
    | ^^^^^^^^^^^^
171 |                 user_id="azure_123",
172 |                 email="user@azure.com",
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_auth.py:259:9
    |
257 |         # Create a config with an invalid provider (mock it)
258 |         with patch.object(self.sso_manager.config, 'provider', 'invalid_provider'):
259 |         pass
    |         ^^^^
260 |             with patch.object(
261 |                 self.sso_manager.provider_handlers, 'get', return_value=None
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_auth.py:260:1
    |
258 |         with patch.object(self.sso_manager.config, 'provider', 'invalid_provider'):
259 |         pass
260 |             with patch.object(
    | ^^^^^^^^^^^^
261 |                 self.sso_manager.provider_handlers, 'get', return_value=None
262 |             ):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_auth.py:266:5
    |
264 |                 assert result is None
265 |
266 |     @pytest.mark.asyncio
    |     ^
267 |     async def test_authenticate_handler_exception(self):
268 |         pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_auth.py:273:9
    |
272 |         with patch.object(self.sso_manager, '_handle_azure_ad') as mock_handler:
273 |         pass
    |         ^^^^
274 |         pass
275 |             mock_handler.side_effect = Exception("Handler error")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_auth.py:275:1
    |
273 |         pass
274 |         pass
275 |             mock_handler.side_effect = Exception("Handler error")
    | ^^^^^^^^^^^^
276 |
277 |             result = await self.sso_manager.authenticate(auth_code)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_auth.py:281:5
    |
279 |             assert result is None
280 |
281 |     def test_generate_jwt_token(self):
    |     ^
282 |         """Test JWT token generation."""
283 |         user_info = UserInfo(
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_auth.py:398:1
    |
398 | class TestEnterpriseAuthMiddleware:
    | ^
399 |     pass
400 |     """Test suite for Enterprise Auth Middleware."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_enterprise_auth.py:536:9
    |
535 |         for handler in handlers:
536 |         pass
    |         ^^^^
537 |             result = await handler("test_code")
538 |             assert isinstance(result, UserInfo)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_auth.py:537:1
    |
535 |         for handler in handlers:
536 |         pass
537 |             result = await handler("test_code")
    | ^^^^^^^^^^^^
538 |             assert isinstance(result, UserInfo)
539 |             assert result.user_id is not None
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_auth.py:546:1
    |
546 | if __name__ == "__main__":
    | ^
547 |     pass
548 |     pytest.main([__file__])
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_enterprise_rbac.py:273:9
    |
272 |         for role in roles:
273 |         pass
    |         ^^^^
274 |             success = self.rbac_manager.assign_role_to_user(
275 |                 user_id, tenant_id, role, granted_by
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:274:1
    |
272 |         for role in roles:
273 |         pass
274 |             success = self.rbac_manager.assign_role_to_user(
    | ^^^^^^^^^^^^
275 |                 user_id, tenant_id, role, granted_by
276 |             )
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_enterprise_rbac.py:284:9
    |
282 |         assert len(user_perms.roles) == 2
283 |         for role in roles:
284 |         pass
    |         ^^^^
285 |             assert role in user_perms.roles
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:285:1
    |
283 |         for role in roles:
284 |         pass
285 |             assert role in user_perms.roles
    | ^^^^^^^^^^^^
286 |
287 |     def test_remove_role_from_user(self):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:287:5
    |
285 |             assert role in user_perms.roles
286 |
287 |     def test_remove_role_from_user(self):
    |     ^
288 |         """Test removing a role from a user."""
289 |         user_id = "remove_role_user"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_enterprise_rbac.py:303:9
    |
301 |         user_key = f"{user_id}:{tenant_id}"
302 |         if user_key in self.rbac_manager.user_permissions:
303 |         pass
    |         ^^^^
304 |             user_perms = self.rbac_manager.user_permissions[user_key]
305 |             assert role not in user_perms.roles
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:304:1
    |
302 |         if user_key in self.rbac_manager.user_permissions:
303 |         pass
304 |             user_perms = self.rbac_manager.user_permissions[user_key]
    | ^^^^^^^^^^^^
305 |             assert role not in user_perms.roles
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:307:5
    |
305 |             assert role not in user_perms.roles
306 |
307 |     def test_remove_role_from_nonexistent_user(self):
    |     ^
308 |         """Test removing a role from a user that doesn't exist."""
309 |         success = self.rbac_manager.remove_role_from_user(
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_enterprise_rbac.py:366:9
    |
365 |         for role in assigned_roles:
366 |         pass
    |         ^^^^
367 |             self.rbac_manager.assign_role_to_user(
368 |                 user_id, tenant_id, role, "admin"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:367:1
    |
365 |         for role in assigned_roles:
366 |         pass
367 |             self.rbac_manager.assign_role_to_user(
    | ^^^^^^^^^^^^
368 |                 user_id, tenant_id, role, "admin"
369 |             )
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_enterprise_rbac.py:376:9
    |
374 |         assert len(user_roles) == 2
375 |         for role in assigned_roles:
376 |         pass
    |         ^^^^
377 |             assert role in user_roles
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:377:1
    |
375 |         for role in assigned_roles:
376 |         pass
377 |             assert role in user_roles
    | ^^^^^^^^^^^^
378 |
379 |     def test_get_user_roles_nonexistent(self):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:379:5
    |
377 |             assert role in user_roles
378 |
379 |     def test_get_user_roles_nonexistent(self):
    |     ^
380 |         """Test getting roles for nonexistent user."""
381 |         user_roles = self.rbac_manager.get_user_roles("nonexistent", "tenant")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:454:1
    |
454 | class TestRBACDecorators:
    | ^
455 |     """Test suite for RBAC decorators."""
    |

invalid-syntax: Expected an indented block after function definition
   --> tests\backend\test_enterprise_rbac.py:466:9
    |
464 |         @require_permission(Permission.read_config)
465 |         def protected_function(user_id, tenant_id):
466 |         pass
    |         ^^^^
467 |             return "success"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:467:1
    |
465 |         def protected_function(user_id, tenant_id):
466 |         pass
467 |             return "success"
    | ^^^^^^^^^^^^
468 |
469 |         # Mock the check_user_permission to return True
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_rbac.py:471:9
    |
469 |         # Mock the check_user_permission to return True
470 |         with patch.object(self.rbac_manager, 'check_user_permission', return_value=True):
471 |         pass
    |         ^^^^
472 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
473 |                 result = protected_function("user", "tenant")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:472:1
    |
470 |         with patch.object(self.rbac_manager, 'check_user_permission', return_value=True):
471 |         pass
472 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
    | ^^^^^^^^^^^^
473 |                 result = protected_function("user", "tenant")
474 |                 assert result == "success"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:476:5
    |
474 |                 assert result == "success"
475 |
476 |     def test_require_permission_decorator_failure(self):
    |     ^
477 |         """Test require_permission decorator with insufficient permissions."""
478 |         @require_permission(Permission.system_admin)
    |

invalid-syntax: Expected an indented block after function definition
   --> tests\backend\test_enterprise_rbac.py:480:9
    |
478 |         @require_permission(Permission.system_admin)
479 |         def admin_function(user_id, tenant_id):
480 |         pass
    |         ^^^^
481 |             return "admin_success"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:481:1
    |
479 |         def admin_function(user_id, tenant_id):
480 |         pass
481 |             return "admin_success"
    | ^^^^^^^^^^^^
482 |
483 |         # Mock the check_user_permission to return False
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_rbac.py:485:9
    |
483 |         # Mock the check_user_permission to return False
484 |         with patch.object(self.rbac_manager, 'check_user_permission', return_value=False):
485 |         pass
    |         ^^^^
486 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
487 |                 with pytest.raises(PermissionError):
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:486:1
    |
484 |         with patch.object(self.rbac_manager, 'check_user_permission', return_value=False):
485 |         pass
486 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
    | ^^^^^^^^^^^^
487 |                 with pytest.raises(PermissionError):
488 |             pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_rbac.py:487:53
    |
485 |         pass
486 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
487 |                 with pytest.raises(PermissionError):
    |                                                     ^
488 |             pass
489 |                     admin_function("user", "tenant")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:489:1
    |
487 |                 with pytest.raises(PermissionError):
488 |             pass
489 |                     admin_function("user", "tenant")
    | ^^^^^^^^^^^^^^^^^^^^
490 |
491 |     def test_require_role_decorator_success(self):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:491:5
    |
489 |                     admin_function("user", "tenant")
490 |
491 |     def test_require_role_decorator_success(self):
    |     ^
492 |         """Test require_role decorator with correct role."""
493 |         @require_role(UserRole.USER)
    |

invalid-syntax: Expected an indented block after function definition
   --> tests\backend\test_enterprise_rbac.py:495:9
    |
493 |         @require_role(UserRole.USER)
494 |         def user_function(user_id, tenant_id):
495 |         pass
    |         ^^^^
496 |             return "user_success"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:496:1
    |
494 |         def user_function(user_id, tenant_id):
495 |         pass
496 |             return "user_success"
    | ^^^^^^^^^^^^
497 |
498 |         # Mock get_user_roles to return the required role
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_rbac.py:500:9
    |
498 |         # Mock get_user_roles to return the required role
499 |         with patch.object(self.rbac_manager, 'get_user_roles', return_value=[UserRole.USER]):
500 |         pass
    |         ^^^^
501 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
502 |                 result = user_function("user", "tenant")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:501:1
    |
499 |         with patch.object(self.rbac_manager, 'get_user_roles', return_value=[UserRole.USER]):
500 |         pass
501 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
    | ^^^^^^^^^^^^
502 |                 result = user_function("user", "tenant")
503 |                 assert result == "user_success"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:505:5
    |
503 |                 assert result == "user_success"
504 |
505 |     def test_require_role_decorator_failure(self):
    |     ^
506 |         """Test require_role decorator with incorrect role."""
507 |         @require_role(UserRole.SYSTEM_ADMIN)
    |

invalid-syntax: Expected an indented block after function definition
   --> tests\backend\test_enterprise_rbac.py:509:9
    |
507 |         @require_role(UserRole.SYSTEM_ADMIN)
508 |         def admin_function(user_id, tenant_id):
509 |         pass
    |         ^^^^
510 |             return "admin_success"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:510:1
    |
508 |         def admin_function(user_id, tenant_id):
509 |         pass
510 |             return "admin_success"
    | ^^^^^^^^^^^^
511 |
512 |         # Mock get_user_roles to return a different role
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_rbac.py:514:9
    |
512 |         # Mock get_user_roles to return a different role
513 |         with patch.object(self.rbac_manager, 'get_user_roles', return_value=[UserRole.USER]):
514 |         pass
    |         ^^^^
515 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
516 |                 with pytest.raises(PermissionError):
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:515:1
    |
513 |         with patch.object(self.rbac_manager, 'get_user_roles', return_value=[UserRole.USER]):
514 |         pass
515 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
    | ^^^^^^^^^^^^
516 |                 with pytest.raises(PermissionError):
517 |             pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_enterprise_rbac.py:516:53
    |
514 |         pass
515 |             with patch('backend.enterprise_rbac.rbac_manager', self.rbac_manager):
516 |                 with pytest.raises(PermissionError):
    |                                                     ^
517 |             pass
518 |                     admin_function("user", "tenant")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:518:1
    |
516 |                 with pytest.raises(PermissionError):
517 |             pass
518 |                     admin_function("user", "tenant")
    | ^^^^^^^^^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:521:1
    |
521 | class TestAuditLogger:
    | ^
522 |     """Test suite for Audit Logger."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_enterprise_rbac.py:599:9
    |
597 |         assert len(user1_logs) == 2
598 |         for log in user1_logs:
599 |         pass
    |         ^^^^
600 |             assert log["user_id"] == "user1"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_rbac.py:600:1
    |
598 |         for log in user1_logs:
599 |         pass
600 |             assert log["user_id"] == "user1"
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_rbac.py:603:1
    |
603 | class TestRBACIntegration:
    | ^
604 |     """Integration tests for RBAC system."""
    |

F401 [*] `datetime.datetime` imported but unused
 --> tests\backend\test_enterprise_rbac_fixed.py:5:22
  |
3 | from pathlib import Path
4 | import sys
5 | from datetime import datetime, timedelta
  |                      ^^^^^^^^
6 | from unittest.mock import Mock, patch
7 | import pytest
  |
help: Remove unused import

F401 [*] `datetime.timedelta` imported but unused
 --> tests\backend\test_enterprise_rbac_fixed.py:5:32
  |
3 | from pathlib import Path
4 | import sys
5 | from datetime import datetime, timedelta
  |                                ^^^^^^^^^
6 | from unittest.mock import Mock, patch
7 | import pytest
  |
help: Remove unused import

F401 [*] `unittest.mock.Mock` imported but unused
 --> tests\backend\test_enterprise_rbac_fixed.py:6:27
  |
4 | import sys
5 | from datetime import datetime, timedelta
6 | from unittest.mock import Mock, patch
  |                           ^^^^
7 | import pytest
8 | from backend.enterprise_rbac import Permission, UserRole, Role, UserPermissions, RBACManager, require_permission, require_role, AuditLo…
  |
help: Remove unused import

F401 [*] `unittest.mock.patch` imported but unused
 --> tests\backend\test_enterprise_rbac_fixed.py:6:33
  |
4 | import sys
5 | from datetime import datetime, timedelta
6 | from unittest.mock import Mock, patch
  |                                 ^^^^^
7 | import pytest
8 | from backend.enterprise_rbac import Permission, UserRole, Role, UserPermissions, RBACManager, require_permission, require_role, AuditLo…
  |
help: Remove unused import

F401 [*] `pytest` imported but unused
 --> tests\backend\test_enterprise_rbac_fixed.py:7:8
  |
5 | from datetime import datetime, timedelta
6 | from unittest.mock import Mock, patch
7 | import pytest
  |        ^^^^^^
8 | from backend.enterprise_rbac import Permission, UserRole, Role, UserPermissions, RBACManager, require_permission, require_role, AuditLo…
  |
help: Remove unused import: `pytest`

F401 [*] `backend.enterprise_rbac.Role` imported but unused
  --> tests\backend\test_enterprise_rbac_fixed.py:8:59
   |
 6 | from unittest.mock import Mock, patch
 7 | import pytest
 8 | from backend.enterprise_rbac import Permission, UserRole, Role, UserPermissions, RBACManager, require_permission, require_role, AuditL…
   |                                                           ^^^^
 9 |
10 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |
help: Remove unused import

F401 [*] `backend.enterprise_rbac.UserPermissions` imported but unused
  --> tests\backend\test_enterprise_rbac_fixed.py:8:65
   |
 6 | from unittest.mock import Mock, patch
 7 | import pytest
 8 | from backend.enterprise_rbac import Permission, UserRole, Role, UserPermissions, RBACManager, require_permission, require_role, AuditL…
   |                                                                 ^^^^^^^^^^^^^^^
 9 |
10 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |
help: Remove unused import

F401 [*] `backend.enterprise_rbac.RBACManager` imported but unused
  --> tests\backend\test_enterprise_rbac_fixed.py:8:82
   |
 6 | from unittest.mock import Mock, patch
 7 | import pytest
 8 | from backend.enterprise_rbac import Permission, UserRole, Role, UserPermissions, RBACManager, require_permission, require_role, AuditL…
   |                                                                                  ^^^^^^^^^^^
 9 |
10 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |
help: Remove unused import

F401 [*] `backend.enterprise_rbac.require_permission` imported but unused
  --> tests\backend\test_enterprise_rbac_fixed.py:8:95
   |
 6 | from unittest.mock import Mock, patch
 7 | import pytest
 8 | from backend.enterprise_rbac import Permission, UserRole, Role, UserPermissions, RBACManager, require_permission, require_role, AuditL…
   |                                                                                               ^^^^^^^^^^^^^^^^^^
 9 |
10 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |
help: Remove unused import

F401 [*] `backend.enterprise_rbac.require_role` imported but unused
  --> tests\backend\test_enterprise_rbac_fixed.py:8:115
   |
 6 | from unittest.mock import Mock, patch
 7 | import pytest
 8 | from backend.enterprise_rbac import Permission, UserRole, Role, UserPermissions, RBACManager, require_permission, require_role, AuditL…
   |                                                                                                                   ^^^^^^^^^^^^
 9 |
10 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |
help: Remove unused import

F401 [*] `backend.enterprise_rbac.AuditLogger` imported but unused
  --> tests\backend\test_enterprise_rbac_fixed.py:8:129
   |
 6 | …
 7 | …
 8 | …rPermissions, RBACManager, require_permission, require_role, AuditLogger
   |                                                               ^^^^^^^^^^^
 9 | …
10 | …
   |
help: Remove unused import

C405 Unnecessary list literal (rewrite as a set literal)
  --> tests\backend\test_enterprise_rbac_fixed.py:17:32
   |
15 |       def test_permission_enum_values(self):
16 |           pass
17 |           expected_permissions = set([
   |  ________________________________^
18 | |             "read_config", "write_config", "reload_config",
19 | |             "ask_questions", "voice_processing", "custom_models",
20 | |             "read_documents", "write_documents", "delete_documents",
21 | |             "manage_vault", "reindex_vault",
22 | |             "view_users", "manage_users", "assign_roles",
23 | |             "view_analytics", "view_logs", "view_audit_logs", "export_data",
24 | |             "system_admin", "tenant_admin", "billing_access"
25 | |         ])
   | |__________^
26 |           actual_permissions = {perm.value for perm in Permission}
27 |           assert actual_permissions == expected_permissions
   |
help: Rewrite as a set literal

C405 Unnecessary list literal (rewrite as a set literal)
  --> tests\backend\test_enterprise_rbac_fixed.py:39:26
   |
37 |       def test_user_role_enum_values(self):
38 |           pass
39 |           expected_roles = set([
   |  __________________________^
40 | |             "readonly", "user", "power_user",
41 | |             "team_admin", "tenant_admin", "system_admin"
42 | |         ])
   | |__________^
43 |           actual_roles = {role.value for role in UserRole}
44 |           assert actual_roles == expected_roles
   |
help: Rewrite as a set literal

invalid-syntax: Expected ',', found '.'
  --> tests\backend\test_enterprise_tenant.py:12:4
   |
11 | # Add the backend path before importing module under test
12 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |    ^
13 |     TenantConfig,
14 |     TenantEndpoints,
   |

invalid-syntax: Expected ',', found '.'
  --> tests\backend\test_enterprise_tenant.py:12:9
   |
11 | # Add the backend path before importing module under test
12 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |         ^
13 |     TenantConfig,
14 |     TenantEndpoints,
   |

invalid-syntax: Expected ')', found '('
  --> tests\backend\test_enterprise_tenant.py:12:16
   |
11 | # Add the backend path before importing module under test
12 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
   |                ^
13 |     TenantConfig,
14 |     TenantEndpoints,
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_enterprise_tenant.py:13:1
   |
11 | # Add the backend path before importing module under test
12 | sys.path.insert(0, str(Path(__file__).parent.parent.parent))
13 |     TenantConfig,
   | ^^^^
14 |     TenantEndpoints,
15 |     TenantLimits,
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_enterprise_tenant.py:19:1
   |
17 |     TenantTier,
18 |     TenantUsage,
19 | )
   | ^
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_enterprise_tenant.py:19:2
   |
17 |     TenantTier,
18 |     TenantUsage,
19 | )
   |  ^
   |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_enterprise_tenant.py:162:9
    |
161 |         for status in statuses:
162 |         pass
    |         ^^^^
163 |             config = TenantConfig(
164 |                 tenant_id=f"tenant_{status}",
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_tenant.py:163:1
    |
161 |         for status in statuses:
162 |         pass
163 |             config = TenantConfig(
    | ^^^^^^^^^^^^
164 |                 tenant_id=f"tenant_{status}",
165 |                 name=f"Test {status}",
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_tenant.py:176:1
    |
176 | class TestTenantUsageDataClass:
    | ^
177 |     """Test suite for TenantUsage data class."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_enterprise_tenant.py:258:9
    |
256 |         assert len(self.tenant_manager.tier_limits) == len(TenantTier)
257 |         for tier in TenantTier:
258 |         pass
    |         ^^^^
259 |             assert tier in self.tenant_manager.tier_limits
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_enterprise_tenant.py:259:1
    |
257 |         for tier in TenantTier:
258 |         pass
259 |             assert tier in self.tenant_manager.tier_limits
    | ^^^^^^^^^^^^
260 |
261 |     def test_default_tier_limits(self):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_enterprise_tenant.py:616:1
    |
616 | class TestTenantEndpoints:
    | ^
617 |     pass
618 |     """Test suite for TenantEndpoints."""
    |

E902 stream did not contain valid UTF-8
--> tests\backend\test_file_validation.py:1:1

invalid-syntax: Expected a statement
  --> tests\backend\test_indexing.py:90:5
   |
88 |     pass
89 |     """Test caching text to file."""
90 |     = "***PLACEHOLDER***"
   |     ^
91 |     text = "This is test content to cache"
92 |     cache_path = vault_indexer._cache_file(key, text)
   |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing.py:106:5
    |
104 | def test_load_cached_file_exists(vault_indexer):
105 |     """Test loading existing cached file."""
106 |     = "***PLACEHOLDER***"
    |     ^
107 |     content = "Cached content"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing.py:120:5
    |
118 | def test_load_cached_file_not_exists(vault_indexer):
119 |     """Test loading non-existing cached file."""
120 |     = "***PLACEHOLDER***"
    |     ^
121 |
122 |     loaded_content = vault_indexer._load_cached(key)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing.py:128:5
    |
126 | def test_load_cached_file_error(vault_indexer):
127 |     """Test loading cached file with read error."""
128 |     = "***PLACEHOLDER***"
    |     ^
129 |
130 |     # Create file but mock read to raise exception
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing.py:397:9
    |
395 |         """Test complete indexing workflow."""
396 |         with tempfile.TemporaryDirectory() as temp_dir:
397 |         pass
    |         ^^^^
398 |             indexer = VaultIndexer(emb_mgr=mock_embeddings_manager, cache_dir=temp_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing.py:398:1
    |
396 |         with tempfile.TemporaryDirectory() as temp_dir:
397 |         pass
398 |             indexer = VaultIndexer(emb_mgr=mock_embeddings_manager, cache_dir=temp_dir)
    | ^^^^^^^^^^^^
399 |
400 |             # Create vault with content
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing.py:413:13
    |
411 |                 indexer, "_fetch_web_content", return_value="Web content"
412 |             ):
413 |             pass
    |             ^^^^
414 |                 web_result = indexer.index_web_content("https://example.com")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing.py:414:1
    |
412 |             ):
413 |             pass
414 |                 web_result = indexer.index_web_content("https://example.com")
    | ^^^^^^^^^^^^^^^^
415 |
416 |             # Verify both operations succeeded
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing.py:425:1
    |
425 | if __name__ == "__main__":
    | ^
426 |     pass
427 |     pytest.main([__file__])
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:142:9
    |
141 |         with patch("backend.indexing.EmbeddingsManager"):
142 |         pass
    |         ^^^^
143 |             indexer = VaultIndexer(cache_dir="test")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:143:1
    |
141 |         with patch("backend.indexing.EmbeddingsManager"):
142 |         pass
143 |             indexer = VaultIndexer(cache_dir="test")
    | ^^^^^^^^^^^^
144 |
145 |         url1 = "https://example.com/page"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:167:9
    |
166 |         with patch("backend.indexing.EmbeddingsManager"):
167 |         pass
    |         ^^^^
168 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:168:1
    |
166 |         with patch("backend.indexing.EmbeddingsManager"):
167 |         pass
168 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
169 |
170 |         = "***PLACEHOLDER***"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:170:9
    |
168 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
169 |
170 |         = "***PLACEHOLDER***"
    |         ^
171 |         text = "This is test content to cache for later retrieval."
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:181:9
    |
179 |         # Verify content was written correctly
180 |         with open(cache_path, "r", encoding="utf-8") as f:
181 |         pass
    |         ^^^^
182 |             cached_content = f.read()
183 |         assert cached_content == text
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:182:1
    |
180 |         with open(cache_path, "r", encoding="utf-8") as f:
181 |         pass
182 |             cached_content = f.read()
    | ^^^^^^^^^^^^
183 |         assert cached_content == text
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:183:9
    |
181 |         pass
182 |             cached_content = f.read()
183 |         assert cached_content == text
    |         ^
184 |
185 |     def test_load_cached_existing_file(self, temp_cache_dir):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:185:5
    |
183 |         assert cached_content == text
184 |
185 |     def test_load_cached_existing_file(self, temp_cache_dir):
    |     ^
186 |         """Test loading existing cached file."""
187 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:190:9
    |
189 |         with patch("backend.indexing.EmbeddingsManager"):
190 |         pass
    |         ^^^^
191 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:191:1
    |
189 |         with patch("backend.indexing.EmbeddingsManager"):
190 |         pass
191 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
192 |
193 |         = "***PLACEHOLDER***"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:193:9
    |
191 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
192 |
193 |         = "***PLACEHOLDER***"
    |         ^
194 |         content = "Previously cached content"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:204:5
    |
202 |         assert loaded_content == content
203 |
204 |     def test_load_cached_missing_file(self, temp_cache_dir):
    |     ^
205 |         pass
206 |         """Test loading non-existent cached file."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:210:9
    |
209 |         with patch("backend.indexing.EmbeddingsManager"):
210 |         pass
    |         ^^^^
211 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:211:1
    |
209 |         with patch("backend.indexing.EmbeddingsManager"):
210 |         pass
211 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
212 |
213 |         loaded_content = indexer._load_cached("nonexistent_key")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:216:5
    |
214 |         assert loaded_content is None
215 |
216 |     def test_load_cached_read_error(self, temp_cache_dir):
    |     ^
217 |         """Test loading cached file with read error."""
218 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:221:9
    |
220 |         with patch("backend.indexing.EmbeddingsManager"):
221 |         pass
    |         ^^^^
222 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:222:1
    |
220 |         with patch("backend.indexing.EmbeddingsManager"):
221 |         pass
222 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
223 |
224 |         = "***PLACEHOLDER***"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:224:9
    |
222 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
223 |
224 |         = "***PLACEHOLDER***"
    |         ^
225 |
226 |         # Create file but make read fail
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:231:9
    |
230 |         with patch("builtins.open", side_effect=PermissionError("Permission denied")):
231 |         pass
    |         ^^^^
232 |             loaded_content = indexer._load_cached(key)
233 |             assert loaded_content is None
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:232:1
    |
230 |         with patch("builtins.open", side_effect=PermissionError("Permission denied")):
231 |         pass
232 |             loaded_content = indexer._load_cached(key)
    | ^^^^^^^^^^^^
233 |             assert loaded_content is None
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:236:1
    |
236 | class TestMarkdownProcessing:
    | ^
237 |     pass
238 |     pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:248:9
    |
247 |         with patch("backend.indexing.EmbeddingsManager"):
248 |         pass
    |         ^^^^
249 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:249:1
    |
247 |         with patch("backend.indexing.EmbeddingsManager"):
248 |         pass
249 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
250 |
251 |         # Create test markdown file
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:265:9
    |
264 |         with patch("backend.indexing.EmbeddingsManager"):
265 |         pass
    |         ^^^^
266 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:266:1
    |
264 |         with patch("backend.indexing.EmbeddingsManager"):
265 |         pass
266 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
267 |
268 |         content = indexer._read_markdown("nonexistent_file.md")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:271:5
    |
269 |         assert content is None
270 |
271 |     def test_read_markdown_encoding_error(self, temp_cache_dir):
    |     ^
272 |         """Test reading markdown file with encoding error."""
273 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:276:9
    |
275 |         with patch("backend.indexing.EmbeddingsManager"):
276 |         pass
    |         ^^^^
277 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:277:1
    |
275 |         with patch("backend.indexing.EmbeddingsManager"):
276 |         pass
277 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
278 |
279 |         md_file = Path(temp_cache_dir) / "bad_encoding.md"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:286:9
    |
284 |             side_effect=UnicodeDecodeError("utf-8", b"", 0, 1, "invalid"),
285 |         ):
286 |         pass
    |         ^^^^
287 |             content = indexer._read_markdown(str(md_file))
288 |             assert content is None
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:287:1
    |
285 |         ):
286 |         pass
287 |             content = indexer._read_markdown(str(md_file))
    | ^^^^^^^^^^^^
288 |             assert content is None
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:290:5
    |
288 |             assert content is None
289 |
290 |     def test_read_markdown_permission_error(self, temp_cache_dir):
    |     ^
291 |         """Test reading markdown file with permission error."""
292 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:295:9
    |
294 |         with patch("backend.indexing.EmbeddingsManager"):
295 |         pass
    |         ^^^^
296 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:296:1
    |
294 |         with patch("backend.indexing.EmbeddingsManager"):
295 |         pass
296 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
297 |
298 |         md_file = Path(temp_cache_dir) / "restricted.md"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:302:9
    |
301 |         with patch("builtins.open", side_effect=PermissionError("Access denied")):
302 |         pass
    |         ^^^^
303 |             content = indexer._read_markdown(str(md_file))
304 |             assert content is None
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:303:1
    |
301 |         with patch("builtins.open", side_effect=PermissionError("Access denied")):
302 |         pass
303 |             content = indexer._read_markdown(str(md_file))
    | ^^^^^^^^^^^^
304 |             assert content is None
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:307:1
    |
307 | class TestPDFProcessing:
    | ^
308 |     """Test PDF file processing methods."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:316:9
    |
315 |         with patch("backend.indexing.EmbeddingsManager"):
316 |         pass
    |         ^^^^
317 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:317:1
    |
315 |         with patch("backend.indexing.EmbeddingsManager"):
316 |         pass
317 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
318 |
319 |         # Mock PDF reader with single page
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:340:9
    |
339 |         with patch("backend.indexing.EmbeddingsManager"):
340 |         pass
    |         ^^^^
341 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:341:1
    |
339 |         with patch("backend.indexing.EmbeddingsManager"):
340 |         pass
341 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
342 |
343 |         # Mock PDF reader with multiple pages
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:363:5
    |
361 |         assert content == "First page content\nSecond page content\nFourth page content"
362 |
363 |     @patch("backend.indexing.PdfReader")
    |     ^
364 |     def test_read_pdf_empty_pages(self, mock_pdf_reader, temp_cache_dir):
365 |         pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:370:9
    |
369 |         with patch("backend.indexing.EmbeddingsManager"):
370 |         pass
    |         ^^^^
371 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:371:1
    |
369 |         with patch("backend.indexing.EmbeddingsManager"):
370 |         pass
371 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
372 |
373 |         mock_reader = Mock()
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:389:5
    |
387 |         assert content == ""
388 |
389 |     @patch("backend.indexing.PdfReader")
    |     ^
390 |     def test_read_pdf_parsing_error(self, mock_pdf_reader, temp_cache_dir):
391 |         """Test PDF reading with parsing error."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:395:9
    |
394 |         with patch("backend.indexing.EmbeddingsManager"):
395 |         pass
    |         ^^^^
396 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:396:1
    |
394 |         with patch("backend.indexing.EmbeddingsManager"):
395 |         pass
396 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
397 |
398 |         mock_pdf_reader.side_effect = Exception("PDF parsing failed")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:406:5
    |
404 |         assert content is None
405 |
406 |     def test_read_pdf_file_not_exists(self, temp_cache_dir):
    |     ^
407 |         """Test reading non-existent PDF file."""
408 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:411:9
    |
410 |         with patch("backend.indexing.EmbeddingsManager"):
411 |         pass
    |         ^^^^
412 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:412:1
    |
410 |         with patch("backend.indexing.EmbeddingsManager"):
411 |         pass
412 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
413 |
414 |         content = indexer._read_pdf("nonexistent.pdf")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:418:1
    |
418 | class TestWebContentFetching:
    | ^
419 |     """Test web content fetching methods."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:432:9
    |
431 |         with patch("backend.indexing.EmbeddingsManager"):
432 |         pass
    |         ^^^^
433 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:433:1
    |
431 |         with patch("backend.indexing.EmbeddingsManager"):
432 |         pass
433 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
434 |
435 |         # Mock requests response
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:468:9
    |
467 |         with patch("backend.indexing.EmbeddingsManager"):
468 |         pass
    |         ^^^^
469 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:469:1
    |
467 |         with patch("backend.indexing.EmbeddingsManager"):
468 |         pass
469 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
470 |
471 |         mock_requests.side_effect = Exception("Connection timeout")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:476:5
    |
474 |         assert content is None
475 |
476 |     @patch("backend.indexing.requests.get")
    |     ^
477 |     def test_fetch_web_content_http_error(self, mock_requests, temp_cache_dir):
478 |         """Test web content fetching with HTTP error."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:482:9
    |
481 |         with patch("backend.indexing.EmbeddingsManager"):
482 |         pass
    |         ^^^^
483 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:483:1
    |
481 |         with patch("backend.indexing.EmbeddingsManager"):
482 |         pass
483 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
484 |
485 |         mock_response = Mock()
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:492:5
    |
490 |         assert content is None
491 |
492 |     @patch("backend.indexing.BeautifulSoup")
    |     ^
493 |     @patch("backend.indexing.Document")
494 |     @patch("backend.indexing.requests.get")
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:503:9
    |
502 |         with patch("backend.indexing.EmbeddingsManager"):
503 |         pass
    |         ^^^^
504 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:504:1
    |
502 |         with patch("backend.indexing.EmbeddingsManager"):
503 |         pass
504 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
505 |
506 |         # Mock successful request but empty content
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:524:1
    |
524 | class TestVaultIndexing:
    | ^
525 |     """Test vault indexing methods."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:539:9
    |
537 |         # Mock PDF processing - mock the _read_pdf method to return content for our fake PDFs
538 |         with patch.object(indexer, "_read_pdf", return_value="Mocked PDF content"):
539 |         pass
    |         ^^^^
540 |             results = indexer.index_vault(str(temp_vault_dir))
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:540:1
    |
538 |         with patch.object(indexer, "_read_pdf", return_value="Mocked PDF content"):
539 |         pass
540 |             results = indexer.index_vault(str(temp_vault_dir))
    | ^^^^^^^^^^^^
541 |
542 |         # Should find all .md and .pdf files (including nested ones)
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:566:9
    |
564 |         # Mock file operations to raise errors
565 |         with patch("builtins.open", side_effect=PermissionError("Access denied")):
566 |         pass
    |         ^^^^
567 |             with patch.object(indexer, "index_pdf", side_effect=Exception("PDF error")):
568 |                 results = indexer.index_vault(str(temp_vault_dir))
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:567:1
    |
565 |         with patch("builtins.open", side_effect=PermissionError("Access denied")):
566 |         pass
567 |             with patch.object(indexer, "index_pdf", side_effect=Exception("PDF error")):
    | ^^^^^^^^^^^^
568 |                 results = indexer.index_vault(str(temp_vault_dir))
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:573:5
    |
571 |         assert isinstance(results, dict)
572 |
573 |     def test_reindex_with_clear_collection(
    |     ^
574 |         self, temp_vault_dir, mock_embeddings_manager, temp_cache_dir
575 |     ):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:680:1
    |
680 | class TestPDFIndexing:
    | ^
681 |     """Test PDF-specific indexing methods."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:690:9
    |
689 |         with patch("backend.indexing.EmbeddingsManager"):
690 |         pass
    |         ^^^^
691 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
692 |         mock_reader = Mock()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:691:1
    |
689 |         with patch("backend.indexing.EmbeddingsManager"):
690 |         pass
691 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
692 |         mock_reader = Mock()
693 |         mock_page1 = Mock()
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:711:9
    |
710 |         with patch("backend.indexing.EmbeddingsManager"):
711 |         pass
    |         ^^^^
712 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
713 |         mock_pdf_reader.side_effect = Exception("PDF parsing failed")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:712:1
    |
710 |         with patch("backend.indexing.EmbeddingsManager"):
711 |         pass
712 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
713 |         mock_pdf_reader.side_effect = Exception("PDF parsing failed")
714 |         pdf_path = str(Path(temp_cache_dir) / "corrupt.pdf")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:720:5
    |
718 |         assert text is None
719 |
720 |     def test_index_pdf_success(self, temp_cache_dir, mock_embeddings_manager):
    |     ^
721 |         """Test successful PDF indexing."""
722 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:731:9
    |
730 |         with patch.object(indexer, "_read_pdf", return_value="PDF content"):
731 |         pass
    |         ^^^^
732 |             result = indexer.index_pdf(pdf_path)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:732:1
    |
730 |         with patch.object(indexer, "_read_pdf", return_value="PDF content"):
731 |         pass
732 |             result = indexer.index_pdf(pdf_path)
    | ^^^^^^^^^^^^
733 |
734 |         assert result == 3  # Mock index_file returns 3
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:737:5
    |
735 |         mock_embeddings_manager.index_file.assert_called_once()
736 |
737 |     def test_index_pdf_empty_text(self, temp_cache_dir, mock_embeddings_manager):
    |     ^
738 |         """Test PDF indexing with empty extracted text."""
739 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:748:9
    |
747 |         with patch.object(indexer, "_read_pdf", return_value=""):
748 |         pass
    |         ^^^^
749 |             result = indexer.index_pdf(pdf_path)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:749:1
    |
747 |         with patch.object(indexer, "_read_pdf", return_value=""):
748 |         pass
749 |             result = indexer.index_pdf(pdf_path)
    | ^^^^^^^^^^^^
750 |
751 |         assert result == 0
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:754:5
    |
752 |         mock_embeddings_manager.index_file.assert_not_called()
753 |
754 |     def test_index_pdf_extraction_error(self, temp_cache_dir, mock_embeddings_manager):
    |     ^
755 |         """Test PDF indexing with extraction error."""
756 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:767:9
    |
765 |             indexer, "_read_pdf", side_effect=Exception("Extraction failed")
766 |         ):
767 |         pass
    |         ^^^^
768 |             result = indexer.index_pdf(pdf_path)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:768:1
    |
766 |         ):
767 |         pass
768 |             result = indexer.index_pdf(pdf_path)
    | ^^^^^^^^^^^^
769 |
770 |         assert result == 0
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:773:1
    |
773 | class TestWebPageIndexing:
    | ^
774 |     """Test web page indexing methods."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:781:9
    |
780 |         with patch("backend.indexing.EmbeddingsManager"):
781 |         pass
    |         ^^^^
782 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:782:1
    |
780 |         with patch("backend.indexing.EmbeddingsManager"):
781 |         pass
782 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
783 |
784 |         url = "https://example.com/article"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:796:9
    |
794 |             "backend.indexing.BeautifulSoup"
795 |         ) as mock_soup_class:
796 |         pass
    |         ^^^^
797 |             # Setup Document mock
798 |             mock_doc = Mock()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:798:1
    |
796 |         pass
797 |             # Setup Document mock
798 |             mock_doc = Mock()
    | ^^^^^^^^^^^^
799 |             mock_doc.summary.return_value = "<p>Fetched web content</p>"
800 |             mock_doc_class.return_value = mock_doc
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:817:5
    |
815 |             assert cache_path.exists()
816 |
817 |     def test_fetch_web_page_cached_content(self, temp_cache_dir):
    |     ^
818 |         """Test fetching cached web page content."""
819 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:822:9
    |
821 |         with patch("backend.indexing.EmbeddingsManager"):
822 |         pass
    |         ^^^^
823 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:823:1
    |
821 |         with patch("backend.indexing.EmbeddingsManager"):
822 |         pass
823 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
824 |
825 |         url = "https://example.com/cached"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:834:9
    |
833 |         with patch.object(indexer, "_fetch_web_content") as mock_fetch:
834 |         pass
    |         ^^^^
835 |             result = indexer.fetch_web_page(url, force=False)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:835:1
    |
833 |         with patch.object(indexer, "_fetch_web_content") as mock_fetch:
834 |         pass
835 |             result = indexer.fetch_web_page(url, force=False)
    | ^^^^^^^^^^^^
836 |
837 |         assert result == cached_content
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:837:9
    |
835 |             result = indexer.fetch_web_page(url, force=False)
836 |
837 |         assert result == cached_content
    |         ^
838 |         mock_fetch.assert_not_called()  # Should use cache, not fetch
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:840:5
    |
838 |         mock_fetch.assert_not_called()  # Should use cache, not fetch
839 |
840 |     def test_fetch_web_page_force_refresh(self, temp_cache_dir):
    |     ^
841 |         pass
842 |         """Test forcing web page refresh despite cache."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:846:9
    |
845 |         with patch("backend.indexing.EmbeddingsManager"):
846 |         pass
    |         ^^^^
847 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:847:1
    |
845 |         with patch("backend.indexing.EmbeddingsManager"):
846 |         pass
847 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
848 |
849 |         url = "https://example.com/forced"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:868:9
    |
866 |             "backend.indexing.BeautifulSoup"
867 |         ) as mock_soup_class:
868 |         pass
    |         ^^^^
869 |             # Setup Document mock
870 |             mock_doc = Mock()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:870:1
    |
868 |         pass
869 |             # Setup Document mock
870 |             mock_doc = Mock()
    | ^^^^^^^^^^^^
871 |             mock_doc.summary.return_value = "<p>Fresh fetched content</p>"
872 |             mock_doc_class.return_value = mock_doc
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:881:9
    |
879 |             result = indexer.fetch_web_page(url, force=True)
880 |
881 |         assert result == new_content
    |         ^
882 |         mock_get.assert_called_once_with(
883 |             url, timeout=10, headers={"User-Agent": "ObsidianAssistant/1.0"}
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:886:5
    |
884 |         )
885 |
886 |     def test_fetch_web_page_cache_read_error(self, temp_cache_dir):
    |     ^
887 |         """Test fetching web page with cache read error returns None."""
888 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:891:9
    |
890 |         with patch("backend.indexing.EmbeddingsManager"):
891 |         pass
    |         ^^^^
892 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:892:1
    |
890 |         with patch("backend.indexing.EmbeddingsManager"):
891 |         pass
892 |             indexer = VaultIndexer(cache_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
893 |
894 |         url = "https://example.com/cache-error"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:905:9
    |
903 |             "pathlib.Path.read_text", side_effect=PermissionError("Cache read failed")
904 |         ):
905 |         pass
    |         ^^^^
906 |             result = indexer.fetch_web_page(url, force=False)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:906:1
    |
904 |         ):
905 |         pass
906 |             result = indexer.fetch_web_page(url, force=False)
    | ^^^^^^^^^^^^
907 |
908 |         # Should return None when cache read fails (doesn't fallback to fetch when cache exists)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:909:9
    |
908 |         # Should return None when cache read fails (doesn't fallback to fetch when cache exists)
909 |         assert result is None
    |         ^
910 |
911 |     def test_index_web_page_success(self, temp_cache_dir, mock_embeddings_manager):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:911:5
    |
909 |         assert result is None
910 |
911 |     def test_index_web_page_success(self, temp_cache_dir, mock_embeddings_manager):
    |     ^
912 |         pass
913 |         """Test successful web page indexing."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:923:9
    |
922 |         with patch.object(indexer, "fetch_web_page", return_value="Web page content"):
923 |         pass
    |         ^^^^
924 |             result = indexer.index_web_page(url)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:924:1
    |
922 |         with patch.object(indexer, "fetch_web_page", return_value="Web page content"):
923 |         pass
924 |             result = indexer.index_web_page(url)
    | ^^^^^^^^^^^^
925 |
926 |         assert result == 3  # Mock index_file returns 3
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:929:5
    |
927 |         mock_embeddings_manager.index_file.assert_called_once()
928 |
929 |     def test_index_web_page_fetch_failure(
    |     ^
930 |         self, temp_cache_dir, mock_embeddings_manager
931 |     ):
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:942:9
    |
941 |         with patch.object(indexer, "fetch_web_page", return_value=None):
942 |         pass
    |         ^^^^
943 |             result = indexer.index_web_page(url)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:943:1
    |
941 |         with patch.object(indexer, "fetch_web_page", return_value=None):
942 |         pass
943 |             result = indexer.index_web_page(url)
    | ^^^^^^^^^^^^
944 |
945 |         assert result == 0
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:948:5
    |
946 |         mock_embeddings_manager.index_file.assert_not_called()
947 |
948 |     def test_index_web_content_success(self, temp_cache_dir, mock_embeddings_manager):
    |     ^
949 |         """Test successful web content indexing."""
950 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:959:9
    |
958 |         with patch.object(indexer, "_fetch_web_content", return_value="Web content"):
959 |         pass
    |         ^^^^
960 |             result = indexer.index_web_content(url)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:960:1
    |
958 |         with patch.object(indexer, "_fetch_web_content", return_value="Web content"):
959 |         pass
960 |             result = indexer.index_web_content(url)
    | ^^^^^^^^^^^^
961 |
962 |         assert result["url"] == url
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:967:5
    |
965 |         mock_embeddings_manager.add_documents.assert_called_once()
966 |
967 |     def test_index_web_content_cached(self, temp_cache_dir, mock_embeddings_manager):
    |     ^
968 |         """Test web content indexing using cached content."""
969 |         from backend.indexing import VaultIndexer
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_indexing_comprehensive.py:983:9
    |
982 |         with patch.object(indexer, "_fetch_web_content") as mock_fetch:
983 |         pass
    |         ^^^^
984 |             result = indexer.index_web_content(url)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_indexing_comprehensive.py:984:1
    |
982 |         with patch.object(indexer, "_fetch_web_content") as mock_fetch:
983 |         pass
984 |             result = indexer.index_web_content(url)
    | ^^^^^^^^^^^^
985 |
986 |         assert result["chunks"] == 3
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_indexing_comprehensive.py:990:5
    |
988 |         mock_embeddings_manager.add_documents.assert_called_once()
989 |
990 |     def test_index_web_content_fetch_failure(
    |     ^
991 |         self, temp_cache_dir, mock_embeddings_manager
992 |     ):
    |

invalid-syntax: Expected an indented block after `with` statement
    --> tests\backend\test_indexing_comprehensive.py:1003:9
     |
1002 |         with patch.object(indexer, "_fetch_web_content", return_value=None):
1003 |         pass
     |         ^^^^
1004 |             result = indexer.index_web_content(url)
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_indexing_comprehensive.py:1004:1
     |
1002 |         with patch.object(indexer, "_fetch_web_content", return_value=None):
1003 |         pass
1004 |             result = indexer.index_web_content(url)
     | ^^^^^^^^^^^^
1005 |
1006 |         assert result["url"] == url
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_indexing_comprehensive.py:1012:1
     |
1012 | class TestIndexingService:
     | ^
1013 |     pass
1014 |     """Test IndexingService wrapper class."""
     |

invalid-syntax: Expected an indented block after `if` statement
    --> tests\backend\test_indexing_comprehensive.py:1084:9
     |
1082 |         # Remove from_settings attribute to test fallback path
1083 |         if hasattr(mock_emb_class, "from_settings"):
1084 |         pass
     |         ^^^^
1085 |             delattr(mock_emb_class, "from_settings")
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_indexing_comprehensive.py:1085:1
     |
1083 |         if hasattr(mock_emb_class, "from_settings"):
1084 |         pass
1085 |             delattr(mock_emb_class, "from_settings")
     | ^^^^^^^^^^^^
1086 |
1087 |         mock_get_settings.return_value = mock_settings
     |

invalid-syntax: Expected an indented block after `with` statement
    --> tests\backend\test_indexing_comprehensive.py:1105:9
     |
1103 |             side_effect=Exception("Settings unavailable"),
1104 |         ):
1105 |         pass
     |         ^^^^
1106 |             service = IndexingService.from_settings()
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_indexing_comprehensive.py:1106:1
     |
1104 |         ):
1105 |         pass
1106 |             service = IndexingService.from_settings()
     | ^^^^^^^^^^^^
1107 |
1108 |             # Should still create service with default cache_dir when settings fail
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_indexing_comprehensive.py:1115:5
     |
1113 |             assert service.vault_indexer.cache_dir.name == "cache"
1114 |
1115 |     def test_indexing_service_delegation(self, mock_embeddings_manager, temp_cache_dir):
     |     ^
1116 |         pass
1117 |         """Test IndexingService method delegation to VaultIndexer."""
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_indexing_comprehensive.py:1148:1
     |
1148 | if __name__ == "__main__":
     | ^
1149 |     pass
1150 |     pytest.main([__file__, "-v"])
     |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_llm_router.py:309:9
    |
307 |         """Test a full conversation workflow."""
308 |         with patch("os.path.exists", return_value=True):
309 |         pass
    |         ^^^^
310 |             router = HybridLLMRouter(session_memory=True, memory_limit=3)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_llm_router.py:310:1
    |
308 |         with patch("os.path.exists", return_value=True):
309 |         pass
310 |             router = HybridLLMRouter(session_memory=True, memory_limit=3)
    | ^^^^^^^^^^^^
311 |
312 |             # Simulate a conversation
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_llm_router.py:322:13
    |
321 |             for question in questions:
322 |             pass
    |             ^^^^
323 |                 response = router.generate(question)
324 |                 responses.append(response)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_llm_router.py:323:1
    |
321 |             for question in questions:
322 |             pass
323 |                 response = router.generate(question)
    | ^^^^^^^^^^^^^^^^
324 |                 responses.append(response)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_llm_router.py:334:1
    |
334 | if __name__ == "__main__":
    | ^
335 |     pass
336 |     pytest.main([__file__])
    |

E902 stream did not contain valid UTF-8
--> tests\backend\test_modelmanager.py:1:1

invalid-syntax: Expected an indented block after `with` statement
  --> tests\backend\test_modelmanager_comprehensive.py:75:9
   |
73 |             "backend.modelmanager.huggingface_hub.hf_hub_download"
74 |         ):
75 |         pass
   |         ^^^^
76 |             manager = ModelManager.from_settings()
77 |             # Should use default values
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_modelmanager_comprehensive.py:76:1
   |
74 |         ):
75 |         pass
76 |             manager = ModelManager.from_settings()
   | ^^^^^^^^^^^^
77 |             # Should use default values
78 |             assert manager.models_dir == "./backend/models"
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_modelmanager_comprehensive.py:83:1
   |
83 | class TestRevisionPinningEnforcement:
   | ^
84 |     pass
85 |     """Test revision pinning enforcement for HuggingFace downloads."""
   |

invalid-syntax: Expected an indented block after `with` statement
  --> tests\backend\test_modelmanager_comprehensive.py:95:9
   |
93 |             match="Revision 'latest' is only allowed for automated downloads",
94 |         ):
95 |         pass
   |         ^^^^
96 |             manager.download_model("org/model", revision="latest")
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_modelmanager_comprehensive.py:96:1
   |
94 |         ):
95 |         pass
96 |             manager.download_model("org/model", revision="latest")
   | ^^^^^^^^^^^^
97 |
98 |     def test_download_main_revision_manual_raises(self, temp_cache_dir):
   |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:102:9
    |
100 |         manager = ModelManager(models_dir=temp_cache_dir, minimal_models=[])
101 |         with pytest.raises(ValueError, match="Revision must be explicitly pinned"):
102 |         pass
    |         ^^^^
103 |             manager.download_model("org/model", revision="main")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:103:1
    |
101 |         with pytest.raises(ValueError, match="Revision must be explicitly pinned"):
102 |         pass
103 |             manager.download_model("org/model", revision="main")
    | ^^^^^^^^^^^^
104 |
105 |     def test_download_no_revision_manual_raises(self, temp_cache_dir):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:105:5
    |
103 |             manager.download_model("org/model", revision="main")
104 |
105 |     def test_download_no_revision_manual_raises(self, temp_cache_dir):
    |     ^
106 |         """Manual download with revision=None should raise ValueError."""
107 |         manager = ModelManager(models_dir=temp_cache_dir, minimal_models=[])
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:109:9
    |
107 |         manager = ModelManager(models_dir=temp_cache_dir, minimal_models=[])
108 |         with pytest.raises(ValueError, match="Revision must be explicitly pinned"):
109 |         pass
    |         ^^^^
110 |             manager.download_model("org/model", revision=None)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:110:1
    |
108 |         with pytest.raises(ValueError, match="Revision must be explicitly pinned"):
109 |         pass
110 |             manager.download_model("org/model", revision=None)
    | ^^^^^^^^^^^^
111 |
112 |     def test_automated_download_allows_main(self, temp_cache_dir):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:112:5
    |
110 |             manager.download_model("org/model", revision=None)
111 |
112 |     def test_automated_download_allows_main(self, temp_cache_dir):
    |     ^
113 |         """Automated download allows revision='main'."""
114 |         manager = ModelManager(models_dir=temp_cache_dir, minimal_models=[])
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:121:9
    |
119 |             return_value="/fake/path/model.bin",
120 |         ):
121 |         pass
    |         ^^^^
122 |             result = manager.download_model("org/model", revision="main")
123 |             assert result["status"] == "downloaded"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:122:1
    |
120 |         ):
121 |         pass
122 |             result = manager.download_model("org/model", revision="main")
    | ^^^^^^^^^^^^
123 |             assert result["status"] == "downloaded"
124 |         del manager._automated_download
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:127:1
    |
127 | class TestHardwareSpecificSelection:
    | ^
128 |     pass
129 |     """Test hardware-specific model selection logic."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_modelmanager_comprehensive.py:212:9
    |
210 |         threads = [threading.Thread(target=download) for _ in range(5)]
211 |         for t in threads:
212 |         pass
    |         ^^^^
213 |             t.start()
214 |         for t in threads:
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:213:1
    |
211 |         for t in threads:
212 |         pass
213 |             t.start()
    | ^^^^^^^^^^^^
214 |         for t in threads:
215 |         pass
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_modelmanager_comprehensive.py:215:9
    |
213 |             t.start()
214 |         for t in threads:
215 |         pass
    |         ^^^^
216 |             t.join()
217 |         # All should succeed or exist, no race condition errors
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:216:1
    |
214 |         for t in threads:
215 |         pass
216 |             t.join()
    | ^^^^^^^^^^^^
217 |         # All should succeed or exist, no race condition errors
218 |         assert all(r in ("success", "exists") for r in results)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:220:5
    |
218 |         assert all(r in ("success", "exists") for r in results)
219 |
220 |     def test_concurrent_loads(self, temp_cache_dir):
    |     ^
221 |         pass
222 |         """Simulate concurrent loads of the same model."""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\backend\test_modelmanager_comprehensive.py:231:13
    |
229 |         def load():
230 |             try:
231 |             pass
    |             ^^^^
232 |                 res = manager.load_model("concurrent-load-model")
233 |                 results.append(res)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:232:1
    |
230 |             try:
231 |             pass
232 |                 res = manager.load_model("concurrent-load-model")
    | ^^^^^^^^^^^^^^^^
233 |                 results.append(res)
234 |             except Exception as e:
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:234:13
    |
232 |                 res = manager.load_model("concurrent-load-model")
233 |                 results.append(res)
234 |             except Exception as e:
    |             ^^^^^^
235 |             pass
236 |                 results.append(str(e))
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:234:30
    |
232 |                 res = manager.load_model("concurrent-load-model")
233 |                 results.append(res)
234 |             except Exception as e:
    |                              ^^
235 |             pass
236 |                 results.append(str(e))
    |

invalid-syntax: Expected an expression
   --> tests\backend\test_modelmanager_comprehensive.py:234:35
    |
232 |                 res = manager.load_model("concurrent-load-model")
233 |                 results.append(res)
234 |             except Exception as e:
    |                                   ^
235 |             pass
236 |                 results.append(str(e))
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:236:1
    |
234 |             except Exception as e:
235 |             pass
236 |                 results.append(str(e))
    | ^^^^^^^^^^^^^^^^
237 |
238 |         threads = [threading.Thread(target=load) for _ in range(5)]
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:238:9
    |
236 |                 results.append(str(e))
237 |
238 |         threads = [threading.Thread(target=load) for _ in range(5)]
    |         ^
239 |         for t in threads:
240 |         pass
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_modelmanager_comprehensive.py:240:9
    |
238 |         threads = [threading.Thread(target=load) for _ in range(5)]
239 |         for t in threads:
240 |         pass
    |         ^^^^
241 |             t.start()
242 |         for t in threads:
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:241:1
    |
239 |         for t in threads:
240 |         pass
241 |             t.start()
    | ^^^^^^^^^^^^
242 |         for t in threads:
243 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:242:9
    |
240 |         pass
241 |             t.start()
242 |         for t in threads:
    |         ^
243 |         pass
244 |             t.join()
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_modelmanager_comprehensive.py:243:9
    |
241 |             t.start()
242 |         for t in threads:
243 |         pass
    |         ^^^^
244 |             t.join()
245 |         # All should return a router instance or cached model
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:244:1
    |
242 |         for t in threads:
243 |         pass
244 |             t.join()
    | ^^^^^^^^^^^^
245 |         # All should return a router instance or cached model
246 |         assert all(r is not None for r in results)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:246:9
    |
244 |             t.join()
245 |         # All should return a router instance or cached model
246 |         assert all(r is not None for r in results)
    |         ^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:249:1
    |
249 | @pytest.fixture
    | ^
250 | def temp_cache_dir():
251 |     pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:299:9
    |
297 |             "builtins.print"
298 |         ) as mock_print:
299 |         pass
    |         ^^^^
300 |             # Create manager instance for testing
301 |             _ = ModelManager(models_dir=temp_cache_dir, env_file=non_existent)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:301:1
    |
299 |         pass
300 |             # Create manager instance for testing
301 |             _ = ModelManager(models_dir=temp_cache_dir, env_file=non_existent)
    | ^^^^^^^^^^^^
302 |
303 |             mock_load_dotenv.assert_not_called()
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:320:9
    |
318 |             "builtins.print"
319 |         ) as mock_print:
320 |         pass
    |         ^^^^
321 |             _ = ModelManager(models_dir=temp_cache_dir)  # Create instance to test login
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:321:1
    |
319 |         ) as mock_print:
320 |         pass
321 |             _ = ModelManager(models_dir=temp_cache_dir)  # Create instance to test login
    | ^^^^^^^^^^^^
322 |
323 |             mock_login.assert_called_once_with( = "***PLACEHOLDER***")
    |

invalid-syntax: Expected an expression or a ')'
   --> tests\backend\test_modelmanager_comprehensive.py:323:49
    |
321 |             _ = ModelManager(models_dir=temp_cache_dir)  # Create instance to test login
322 |
323 |             mock_login.assert_called_once_with( = "***PLACEHOLDER***")
    |                                                 ^
324 |             # Check success message was printed
325 |             success_found = any(
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:330:5
    |
328 |             assert success_found
329 |
330 |     def test_hf_login_failure(self, temp_cache_dir):
    |     ^
331 |         pass
332 |         """Test HuggingFace login failure handling."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:341:9
    |
339 |             "builtins.print"
340 |         ) as mock_print:
341 |         pass
    |         ^^^^
342 |             manager = ModelManager(models_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:342:1
    |
340 |         ) as mock_print:
341 |         pass
342 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
343 |
344 |             # Should still store the token even if login fails
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:353:5
    |
351 |             assert warning_found
352 |
353 |     def test_llm_router_init_failure(self, temp_cache_dir):
    |     ^
354 |         pass
355 |         """Test handling of LLM router initialization failure."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:362:9
    |
360 |             side_effect=Exception("Router init failed"),
361 |         ):
362 |         pass
    |         ^^^^
363 |             manager = ModelManager(models_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:363:1
    |
361 |         ):
362 |         pass
363 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
364 |
365 |             # Should handle router init failure gracefully
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:368:5
    |
366 |             assert manager.llm_router is None
367 |
368 |     def test_models_directory_creation(self, temp_cache_dir):
    |     ^
369 |         """Test that models directory is created."""
370 |         models_dir = Path(temp_cache_dir) / "new_models"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:377:9
    |
375 |             "backend.modelmanager.HybridLLMRouter"
376 |         ):
377 |         pass
    |         ^^^^
378 |             _ = ModelManager(
379 |                 models_dir=str(models_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:378:1
    |
376 |         ):
377 |         pass
378 |             _ = ModelManager(
    | ^^^^^^^^^^^^
379 |                 models_dir=str(models_dir)
380 |             )  # Create instance to test directory creation
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:385:5
    |
383 |             assert models_dir.exists()
384 |
385 |     def test_local_models_detection(self, temp_cache_dir):
    |     ^
386 |         """Test detection of existing local model files."""
387 |         # Create some local model files with appropriate extensions
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:398:9
    |
396 |             "backend.modelmanager.HybridLLMRouter"
397 |         ):
398 |         pass
    |         ^^^^
399 |             manager = ModelManager(models_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:399:1
    |
397 |         ):
398 |         pass
399 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
400 |
401 |             # Should detect local models
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:406:5
    |
404 |             assert manager.available_models["claude"] == "local:claude.bin"
405 |
406 |     def test_default_model_fallback(self, temp_cache_dir):
    |     ^
407 |         """Test default model fallback when specified default not available."""
408 |         models_file = Path(temp_cache_dir) / "backend/models/models.txt"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:419:9
    |
417 |             "builtins.print"
418 |         ) as mock_print:
419 |         pass
    |         ^^^^
420 |             manager = ModelManager(
421 |                 models_dir=temp_cache_dir,
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:420:1
    |
418 |         ) as mock_print:
419 |         pass
420 |             manager = ModelManager(
    | ^^^^^^^^^^^^
421 |                 models_dir=temp_cache_dir,
422 |                 models_file=str(models_file),
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:436:1
    |
436 | class TestModelsFileLoading:
    | ^
437 |     pass
438 |     """Test _load_models_file method scenarios."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:453:9
    |
451 |             "builtins.print"
452 |         ) as mock_print:
453 |         pass
    |         ^^^^
454 |             manager = ModelManager(
455 |                 models_dir=temp_cache_dir, models_file=str(models_file)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:454:1
    |
452 |         ) as mock_print:
453 |         pass
454 |             manager = ModelManager(
    | ^^^^^^^^^^^^
455 |                 models_dir=temp_cache_dir, models_file=str(models_file)
456 |             )
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:478:9
    |
476 |             "builtins.print"
477 |         ) as mock_print:
478 |         pass
    |         ^^^^
479 |             manager = ModelManager(
480 |                 models_dir=temp_cache_dir, models_file="non_existent.txt"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:479:1
    |
477 |         ) as mock_print:
478 |         pass
479 |             manager = ModelManager(
    | ^^^^^^^^^^^^
480 |                 models_dir=temp_cache_dir, models_file="non_existent.txt"
481 |             )
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:493:5
    |
491 |             assert warning_found
492 |
493 |     def test_load_models_file_read_error(self, temp_cache_dir):
    |     ^
494 |         pass
495 |         """Test handling of file read errors."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:508:9
    |
506 |             "builtins.open", side_effect=PermissionError("Access denied")
507 |         ):
508 |         pass
    |         ^^^^
509 |         pass
510 |             manager = ModelManager(
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:510:1
    |
508 |         pass
509 |         pass
510 |             manager = ModelManager(
    | ^^^^^^^^^^^^
511 |                 models_dir=temp_cache_dir, models_file=str(models_file)
512 |             )
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:518:1
    |
518 | class TestModelDownloading:
    | ^
519 |     """Test model downloading functionality."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:530:9
    |
528 |             "backend.modelmanager.huggingface_hub.hf_hub_download"
529 |         ) as mock_download:
530 |         pass
    |         ^^^^
531 |             mock_download.return_value = f"{temp_cache_dir}/model.bin"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:531:1
    |
529 |         ) as mock_download:
530 |         pass
531 |             mock_download.return_value = f"{temp_cache_dir}/model.bin"
    | ^^^^^^^^^^^^
532 |
533 |             manager = ModelManager(models_dir=temp_cache_dir, minimal_models=[])
    |

invalid-syntax: Expected ',', found '='
   --> tests\backend\test_modelmanager_comprehensive.py:545:17
    |
543 |                 revision="abc123def",
544 |                 local_dir=temp_cache_dir,
545 |                 = "***PLACEHOLDER***",
    |                 ^
546 |             )
    |

invalid-syntax: Positional argument cannot follow keyword argument
   --> tests\backend\test_modelmanager_comprehensive.py:545:19
    |
543 |                 revision="abc123def",
544 |                 local_dir=temp_cache_dir,
545 |                 = "***PLACEHOLDER***",
    |                   ^^^^^^^^^^^^^^^^^^^
546 |             )
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:559:9
    |
557 |             side_effect=Exception("Network error"),
558 |         ):
559 |         pass
    |         ^^^^
560 |             manager = ModelManager(models_dir=temp_cache_dir, minimal_models=[])
561 |             result = manager.download_model("org/model", revision="abc123def")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:560:1
    |
558 |         ):
559 |         pass
560 |             manager = ModelManager(models_dir=temp_cache_dir, minimal_models=[])
    | ^^^^^^^^^^^^
561 |             result = manager.download_model("org/model", revision="abc123def")
562 |             assert result["status"] == "error"
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:565:5
    |
563 |             assert "Network error" in result["error"]
564 |
565 |     def test_download_local_model_exists(self, temp_cache_dir):
    |     ^
566 |         """Test download when local model already exists."""
567 |         model_file = Path(temp_cache_dir) / "local-model"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:575:9
    |
573 |             "backend.modelmanager.HybridLLMRouter"
574 |         ):
575 |         pass
    |         ^^^^
576 |             manager = ModelManager(models_dir=temp_cache_dir)
577 |             result = manager.download_model("local-model")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:576:1
    |
574 |         ):
575 |         pass
576 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
577 |             result = manager.download_model("local-model")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:582:5
    |
580 |             assert result["path"] == str(model_file)
581 |
582 |     def test_download_local_model_create(self, temp_cache_dir):
    |     ^
583 |         """Test creating a new local model file."""
584 |         with patch("backend.modelmanager.load_dotenv"), patch(
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:589:9
    |
587 |             "backend.modelmanager.HybridLLMRouter"
588 |         ):
589 |         pass
    |         ^^^^
590 |             manager = ModelManager(models_dir=temp_cache_dir)
591 |             result = manager.download_model("new-model")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:590:1
    |
588 |         ):
589 |         pass
590 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
591 |             result = manager.download_model("new-model")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:596:5
    |
594 |             assert Path(result["path"]).exists()
595 |
596 |     def test_download_local_model_error(self, temp_cache_dir):
    |     ^
597 |         """Test local model download error."""
598 |         with patch("backend.modelmanager.load_dotenv"), patch(
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:605:9
    |
603 |             "pathlib.Path.touch", side_effect=PermissionError("Access denied")
604 |         ):
605 |         pass
    |         ^^^^
606 |             manager = ModelManager(models_dir=temp_cache_dir)
607 |             result = manager.download_model("new-model")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:606:1
    |
604 |         ):
605 |         pass
606 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
607 |             result = manager.download_model("new-model")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:613:1
    |
613 | class TestModelLoading:
    | ^
614 |     """Test load_model functionality."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:623:9
    |
621 |             "backend.modelmanager.HybridLLMRouter"
622 |         ) as mock_router_class:
623 |         pass
    |         ^^^^
624 |             mock_router = Mock()
625 |             mock_router_class.return_value = mock_router
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:624:1
    |
622 |         ) as mock_router_class:
623 |         pass
624 |             mock_router = Mock()
    | ^^^^^^^^^^^^
625 |             mock_router_class.return_value = mock_router
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:633:13
    |
631 |             # Mock download_model to return success
632 |             with patch.object(manager, "download_model") as mock_download:
633 |             pass
    |             ^^^^
634 |                 model_path = Path(temp_cache_dir) / "test-model"
635 |                 model_path.mkdir()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:634:1
    |
632 |             with patch.object(manager, "download_model") as mock_download:
633 |             pass
634 |                 model_path = Path(temp_cache_dir) / "test-model"
    | ^^^^^^^^^^^^^^^^
635 |                 model_path.mkdir()
636 |                 mock_download.return_value = model_path
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:643:5
    |
641 |                 mock_download.assert_called_once_with("test-model")
642 |
643 |     def test_load_model_specific(self, temp_cache_dir):
    |     ^
644 |         pass
645 |         """Test loading specific model by name."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:651:9
    |
649 |             "backend.modelmanager.HybridLLMRouter"
650 |         ) as mock_router_class:
651 |         pass
    |         ^^^^
652 |             mock_router = Mock()
653 |             mock_router_class.return_value = mock_router
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:652:1
    |
650 |         ) as mock_router_class:
651 |         pass
652 |             mock_router = Mock()
    | ^^^^^^^^^^^^
653 |             mock_router_class.return_value = mock_router
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:659:13
    |
657 |             # Mock download_model to return success
658 |             with patch.object(manager, "download_model") as mock_download:
659 |             pass
    |             ^^^^
660 |                 model_path = Path(temp_cache_dir) / "specific-model"
661 |                 model_path.mkdir()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:660:1
    |
658 |             with patch.object(manager, "download_model") as mock_download:
659 |             pass
660 |                 model_path = Path(temp_cache_dir) / "specific-model"
    | ^^^^^^^^^^^^^^^^
661 |                 model_path.mkdir()
662 |                 mock_download.return_value = model_path
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:669:5
    |
667 |                 mock_download.assert_called_once_with("specific-model")
668 |
669 |     def test_load_model_no_default(self, temp_cache_dir):
    |     ^
670 |         pass
671 |         """Test loading model when no default is available."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:677:9
    |
675 |             "backend.modelmanager.HybridLLMRouter"
676 |         ):
677 |         pass
    |         ^^^^
678 |             manager = ModelManager(models_dir=temp_cache_dir, default_model=None)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:678:1
    |
676 |         ):
677 |         pass
678 |             manager = ModelManager(models_dir=temp_cache_dir, default_model=None)
    | ^^^^^^^^^^^^
679 |
680 |             with pytest.raises(ValueError, match="No default model available"):
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:681:13
    |
680 |             with pytest.raises(ValueError, match="No default model available"):
681 |             pass
    |             ^^^^
682 |                 manager.load_model()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:682:1
    |
680 |             with pytest.raises(ValueError, match="No default model available"):
681 |             pass
682 |                 manager.load_model()
    | ^^^^^^^^^^^^^^^^
683 |
684 |     def test_load_model_already_loaded(self, temp_cache_dir):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:684:5
    |
682 |                 manager.load_model()
683 |
684 |     def test_load_model_already_loaded(self, temp_cache_dir):
    |     ^
685 |         """Test loading model that's already in cache."""
686 |         with patch("backend.modelmanager.load_dotenv"), patch(
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:691:9
    |
689 |             "backend.modelmanager.HybridLLMRouter"
690 |         ):
691 |         pass
    |         ^^^^
692 |             manager = ModelManager(models_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:692:1
    |
690 |         ):
691 |         pass
692 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
693 |
694 |             # Pre-populate loaded models cache
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:702:5
    |
700 |             assert result == mock_model
701 |
702 |     def test_load_model_download_failure(self, temp_cache_dir):
    |     ^
703 |         """Test loading model when download fails."""
704 |         with patch("backend.modelmanager.load_dotenv"), patch(
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:709:9
    |
707 |             "backend.modelmanager.HybridLLMRouter"
708 |         ):
709 |         pass
    |         ^^^^
710 |             manager = ModelManager(models_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:710:1
    |
708 |         ):
709 |         pass
710 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
711 |
712 |             # Mock download_model to return non-existent path
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:714:13
    |
712 |             # Mock download_model to return non-existent path
713 |             with patch.object(manager, "download_model") as mock_download:
714 |             pass
    |             ^^^^
715 |                 mock_download.return_value = Path(temp_cache_dir) / "non-existent"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:715:1
    |
713 |             with patch.object(manager, "download_model") as mock_download:
714 |             pass
715 |                 mock_download.return_value = Path(temp_cache_dir) / "non-existent"
    | ^^^^^^^^^^^^^^^^
716 |
717 |                 with pytest.raises(RuntimeError, match="No offline model available"):
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:717:86
    |
715 |                 mock_download.return_value = Path(temp_cache_dir) / "non-existent"
716 |
717 |                 with pytest.raises(RuntimeError, match="No offline model available"):
    |                                                                                      ^
718 |             pass
719 |                     manager.load_model("failing-model")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:719:1
    |
717 |                 with pytest.raises(RuntimeError, match="No offline model available"):
718 |             pass
719 |                     manager.load_model("failing-model")
    | ^^^^^^^^^^^^^^^^^^^^
720 |
721 |     def test_load_model_instantiation_failure(self, temp_cache_dir):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:721:5
    |
719 |                     manager.load_model("failing-model")
720 |
721 |     def test_load_model_instantiation_failure(self, temp_cache_dir):
    |     ^
722 |         """Test loading model when router instantiation fails."""
723 |         with patch("backend.modelmanager.load_dotenv"), patch(
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:729:9
    |
727 |             side_effect=Exception("Router creation failed"),
728 |         ):
729 |         pass
    |         ^^^^
730 |             manager = ModelManager(models_dir=temp_cache_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:730:1
    |
728 |         ):
729 |         pass
730 |             manager = ModelManager(models_dir=temp_cache_dir)
    | ^^^^^^^^^^^^
731 |
732 |             # Mock download_model to return success
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:734:13
    |
732 |             # Mock download_model to return success
733 |             with patch.object(manager, "download_model") as mock_download:
734 |             pass
    |             ^^^^
735 |                 model_path = Path(temp_cache_dir) / "test-model"
736 |                 model_path.mkdir()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:735:1
    |
733 |             with patch.object(manager, "download_model") as mock_download:
734 |             pass
735 |                 model_path = Path(temp_cache_dir) / "test-model"
    | ^^^^^^^^^^^^^^^^
736 |                 model_path.mkdir()
737 |                 mock_download.return_value = model_path
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:741:19
    |
739 |                 with pytest.raises(
740 |                     RuntimeError, match="Failed to instantiate model router"
741 |                 ):
    |                   ^
742 |             pass
743 |                     manager.load_model("test-model")
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:743:1
    |
741 |                 ):
742 |             pass
743 |                     manager.load_model("test-model")
    | ^^^^^^^^^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:746:1
    |
746 | class TestFromSettings:
    | ^
747 |     """Test from_settings class method."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:806:9
    |
804 |             "backend.modelmanager.huggingface_hub.hf_hub_download"
805 |         ):
806 |         pass
    |         ^^^^
807 |             manager = ModelManager.from_settings()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:807:1
    |
805 |         ):
806 |         pass
807 |             manager = ModelManager.from_settings()
    | ^^^^^^^^^^^^
808 |
809 |             # Should use default values
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:815:1
    |
815 | class TestGenerateText:
    | ^
816 |     """Test text generation functionality."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:825:9
    |
823 |             "backend.modelmanager.HybridLLMRouter"
824 |         ) as mock_router_class:
825 |         pass
    |         ^^^^
826 |             # Initialize with router creation failure
827 |             mock_router_class.side_effect = [Exception("Init failed"), Mock()]
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:827:1
    |
825 |         pass
826 |             # Initialize with router creation failure
827 |             mock_router_class.side_effect = [Exception("Init failed"), Mock()]
    | ^^^^^^^^^^^^
828 |
829 |             manager = ModelManager(models_dir=temp_cache_dir)
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:854:9
    |
852 |             "backend.modelmanager.HybridLLMRouter"
853 |         ) as mock_router_class:
854 |         pass
    |         ^^^^
855 |             mock_router = Mock()
856 |             mock_router.generate.return_value = "Response with context"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:855:1
    |
853 |         ) as mock_router_class:
854 |         pass
855 |             mock_router = Mock()
    | ^^^^^^^^^^^^
856 |             mock_router.generate.return_value = "Response with context"
857 |             mock_router_class.return_value = mock_router
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:868:5
    |
866 |             assert result == "Response with context"
867 |
868 |     def test_generate_without_context(self, temp_cache_dir):
    |     ^
869 |         pass
870 |         """Test generate without context parameter."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:876:9
    |
874 |             "backend.modelmanager.HybridLLMRouter"
875 |         ) as mock_router_class:
876 |         pass
    |         ^^^^
877 |             mock_router = Mock()
878 |             mock_router.generate.return_value = "Response without context"
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:877:1
    |
875 |         ) as mock_router_class:
876 |         pass
877 |             mock_router = Mock()
    | ^^^^^^^^^^^^
878 |             mock_router.generate.return_value = "Response without context"
879 |             mock_router_class.return_value = mock_router
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:891:1
    |
891 | class TestGetModelInfo:
    | ^
892 |     pass
893 |     """Test get_model_info functionality."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:902:9
    |
900 |             "backend.modelmanager.HybridLLMRouter"
901 |         ) as mock_router_class:
902 |         pass
    |         ^^^^
903 |             # Initialize with router creation failure
904 |             mock_router_class.side_effect = [Exception("Init failed"), Mock()]
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:904:1
    |
902 |         pass
903 |             # Initialize with router creation failure
904 |             mock_router_class.side_effect = [Exception("Init failed"), Mock()]
    | ^^^^^^^^^^^^
905 |
906 |             manager = ModelManager(models_dir=temp_cache_dir)
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:931:9
    |
929 |             "backend.modelmanager.HybridLLMRouter"
930 |         ) as mock_router_class:
931 |         pass
    |         ^^^^
932 |             mock_router = Mock()
933 |             mock_router.get_available_models.return_value = {
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:932:1
    |
930 |         ) as mock_router_class:
931 |         pass
932 |             mock_router = Mock()
    | ^^^^^^^^^^^^
933 |             mock_router.get_available_models.return_value = {
934 |                 "llama": False,
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_modelmanager_comprehensive.py:950:1
    |
950 | class TestModelManagerEdgeCases:
    | ^
951 |     """Test edge cases and error scenarios."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_modelmanager_comprehensive.py:966:9
    |
964 |             "builtins.print"
965 |         ) as mock_print:
966 |         pass
    |         ^^^^
967 |             manager = ModelManager(
968 |                 models_dir=temp_cache_dir, models_file=str(models_file)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_modelmanager_comprehensive.py:967:1
    |
965 |         ) as mock_print:
966 |         pass
967 |             manager = ModelManager(
    | ^^^^^^^^^^^^
968 |                 models_dir=temp_cache_dir, models_file=str(models_file)
969 |             )
    |

invalid-syntax: Expected an indented block after `with` statement
    --> tests\backend\test_modelmanager_comprehensive.py:998:9
     |
 996 |             "backend.modelmanager.HybridLLMRouter"
 997 |         ):
 998 |         pass
     |         ^^^^
 999 |             manager = ModelManager(
1000 |                 models_dir=temp_cache_dir, models_file=str(models_file)
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:999:1
     |
 997 |         ):
 998 |         pass
 999 |             manager = ModelManager(
     | ^^^^^^^^^^^^
1000 |                 models_dir=temp_cache_dir, models_file=str(models_file)
1001 |             )
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_modelmanager_comprehensive.py:1011:5
     |
1009 |             )
1010 |
1011 |     def test_no_models_available_scenario(self, temp_cache_dir):
     |     ^
1012 |         pass
1013 |         """Test scenario with no models available at all."""
     |

invalid-syntax: Expected an indented block after `with` statement
    --> tests\backend\test_modelmanager_comprehensive.py:1021:9
     |
1019 |             "builtins.print"
1020 |         ) as mock_print:
1021 |         pass
     |         ^^^^
1022 |             manager = ModelManager(
1023 |                 models_dir=temp_cache_dir,
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1022:1
     |
1020 |         ) as mock_print:
1021 |         pass
1022 |             manager = ModelManager(
     | ^^^^^^^^^^^^
1023 |                 models_dir=temp_cache_dir,
1024 |                 models_file="non_existent.txt",
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_modelmanager_comprehensive.py:1037:5
     |
1035 |             assert no_models_found
1036 |
1037 |     def test_model_directory_permissions_error(self, temp_cache_dir):
     |     ^
1038 |         pass
1039 |         """Test handling of model directory creation failure."""
     |

invalid-syntax: Expected an indented block after `with` statement
    --> tests\backend\test_modelmanager_comprehensive.py:1047:9
     |
1045 |             "pathlib.Path.mkdir", side_effect=PermissionError("Access denied")
1046 |         ):
1047 |         pass
     |         ^^^^
1048 |             # Should handle directory creation failure gracefully
1049 |             try:
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1049:1
     |
1047 |         pass
1048 |             # Should handle directory creation failure gracefully
1049 |             try:
     | ^^^^^^^^^^^^
1050 |             pass
1051 |                 manager = ModelManager(models_dir=temp_cache_dir)
     |

invalid-syntax: Expected an indented block after `try` statement
    --> tests\backend\test_modelmanager_comprehensive.py:1050:13
     |
1048 |             # Should handle directory creation failure gracefully
1049 |             try:
1050 |             pass
     |             ^^^^
1051 |                 manager = ModelManager(models_dir=temp_cache_dir)
1052 |                 # Should still initialize even if directory creation fails
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1051:1
     |
1049 |             try:
1050 |             pass
1051 |                 manager = ModelManager(models_dir=temp_cache_dir)
     | ^^^^^^^^^^^^^^^^
1052 |                 # Should still initialize even if directory creation fails
1053 |                 assert hasattr(manager, "models_dir")
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_modelmanager_comprehensive.py:1054:13
     |
1052 |                 # Should still initialize even if directory creation fails
1053 |                 assert hasattr(manager, "models_dir")
1054 |             except PermissionError:
     |             ^^^^^^
1055 |         pass
1056 |             pass
     |

invalid-syntax: Expected an expression
    --> tests\backend\test_modelmanager_comprehensive.py:1054:36
     |
1052 |                 # Should still initialize even if directory creation fails
1053 |                 assert hasattr(manager, "models_dir")
1054 |             except PermissionError:
     |                                    ^
1055 |         pass
1056 |             pass
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_modelmanager_comprehensive.py:1055:9
     |
1053 |                 assert hasattr(manager, "models_dir")
1054 |             except PermissionError:
1055 |         pass
     |         ^
1056 |             pass
1057 |                 # Or it might propagate the error, which is also valid
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1056:1
     |
1054 |             except PermissionError:
1055 |         pass
1056 |             pass
     | ^^^^^^^^^^^^
1057 |                 # Or it might propagate the error, which is also valid
1058 |                 pass
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1058:1
     |
1056 |             pass
1057 |                 # Or it might propagate the error, which is also valid
1058 |                 pass
     | ^^^^^^^^^^^^^^^^
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_modelmanager_comprehensive.py:1061:1
     |
1061 | class TestModelRemoval:
     | ^
1062 |     """Test model removal functionality."""
     |

invalid-syntax: Expected an indented block after `with` statement
    --> tests\backend\test_modelmanager_comprehensive.py:1079:9
     |
1077 |         # Patch unlink to raise error
1078 |         with patch.object(Path, "unlink", side_effect=PermissionError("Access denied")):
1079 |         pass
     |         ^^^^
1080 |             try:
1081 |                 model_file.unlink()
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1080:1
     |
1078 |         with patch.object(Path, "unlink", side_effect=PermissionError("Access denied")):
1079 |         pass
1080 |             try:
     | ^^^^^^^^^^^^
1081 |                 model_file.unlink()
1082 |             except PermissionError as e:
     |

invalid-syntax: Expected an indented block after `except` clause
    --> tests\backend\test_modelmanager_comprehensive.py:1083:13
     |
1081 |                 model_file.unlink()
1082 |             except PermissionError as e:
1083 |             pass
     |             ^^^^
1084 |                 assert "Access denied" in str(e)
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1084:1
     |
1082 |             except PermissionError as e:
1083 |             pass
1084 |                 assert "Access denied" in str(e)
     | ^^^^^^^^^^^^^^^^
1085 |
1086 |     def test_remove_directory_model(self, temp_cache_dir):
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_modelmanager_comprehensive.py:1086:5
     |
1084 |                 assert "Access denied" in str(e)
1085 |
1086 |     def test_remove_directory_model(self, temp_cache_dir):
     |     ^
1087 |         """Test removal of a model stored as a directory."""
1088 |         model_dir = Path(temp_cache_dir) / "removable-model-dir"
     |

invalid-syntax: Expected an indented block after `with` statement
    --> tests\backend\test_modelmanager_comprehensive.py:1103:9
     |
1101 |         # Patch rmtree to raise error
1102 |         with patch("shutil.rmtree", side_effect=PermissionError("Access denied")):
1103 |         pass
     |         ^^^^
1104 |             try:
1105 |                 shutil.rmtree(model_dir)
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1104:1
     |
1102 |         with patch("shutil.rmtree", side_effect=PermissionError("Access denied")):
1103 |         pass
1104 |             try:
     | ^^^^^^^^^^^^
1105 |                 shutil.rmtree(model_dir)
1106 |             except PermissionError as e:
     |

invalid-syntax: Expected an indented block after `except` clause
    --> tests\backend\test_modelmanager_comprehensive.py:1107:13
     |
1105 |                 shutil.rmtree(model_dir)
1106 |             except PermissionError as e:
1107 |             pass
     |             ^^^^
1108 |                 assert "Access denied" in str(e)
     |

invalid-syntax: Unexpected indentation
    --> tests\backend\test_modelmanager_comprehensive.py:1108:1
     |
1106 |             except PermissionError as e:
1107 |             pass
1108 |                 assert "Access denied" in str(e)
     | ^^^^^^^^^^^^^^^^
     |

invalid-syntax: Expected a statement
    --> tests\backend\test_modelmanager_comprehensive.py:1111:1
     |
1111 | if __name__ == "__main__":
     | ^
1112 |     pass
1113 |     pytest.main([__file__, "-v"])
     |

E902 stream did not contain valid UTF-8
--> tests\backend\test_security.py:1:1

invalid-syntax: Expected ',', found '.'
  --> tests\backend\test_settings.py:15:4
   |
15 | sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))
   |    ^
16 |     Settings,
17 |     _load_yaml_config,
   |

invalid-syntax: Expected ',', found '.'
  --> tests\backend\test_settings.py:15:9
   |
15 | sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))
   |         ^
16 |     Settings,
17 |     _load_yaml_config,
   |

invalid-syntax: Expected ')', found '('
  --> tests\backend\test_settings.py:15:16
   |
15 | sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))
   |                ^
16 |     Settings,
17 |     _load_yaml_config,
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_settings.py:16:1
   |
15 | sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), "../..")))
16 |     Settings,
   | ^^^^
17 |     _load_yaml_config,
18 |     _merge_env,
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_settings.py:22:1
   |
20 |     reload_settings,
21 |     update_settings,
22 | )
   | ^
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_settings.py:22:2
   |
20 |     reload_settings,
21 |     update_settings,
22 | )
   |  ^
   |

invalid-syntax: Expected an indented block after `try` statement
  --> tests\backend\test_settings.py:89:9
   |
87 |         """Clear any cached settings before each test."""
88 |         try:
89 |         pass
   |         ^^^^
90 |             get_settings.cache_clear()
91 |         except AttributeError:
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_settings.py:90:1
   |
88 |         try:
89 |         pass
90 |             get_settings.cache_clear()
   | ^^^^^^^^^^^^
91 |         except AttributeError:
92 |         pass
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_settings.py:91:9
   |
89 |         pass
90 |             get_settings.cache_clear()
91 |         except AttributeError:
   |         ^^^^^^
92 |         pass
93 |             pass
   |

invalid-syntax: Expected an expression
  --> tests\backend\test_settings.py:91:31
   |
89 |         pass
90 |             get_settings.cache_clear()
91 |         except AttributeError:
   |                               ^
92 |         pass
93 |             pass
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_settings.py:93:1
   |
91 |         except AttributeError:
92 |         pass
93 |             pass
   | ^^^^^^^^^^^^
94 |
95 |     def test_yaml_override_defaults(self):
   |

invalid-syntax: Expected a statement
  --> tests\backend\test_settings.py:95:5
   |
93 |             pass
94 |
95 |     def test_yaml_override_defaults(self):
   |     ^
96 |         """Test that YAML config overrides defaults."""
97 |         # Mock _load_yaml_config to return test data directly
   |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:106:9
    |
105 |         with patch("backend.settings._load_yaml_config", return_value=mock_yaml_data):
106 |         pass
    |         ^^^^
107 |             with patch.dict(os.environ, {}, clear=True):  # Clear env vars
108 |                 s = get_settings()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:107:1
    |
105 |         with patch("backend.settings._load_yaml_config", return_value=mock_yaml_data):
106 |         pass
107 |             with patch.dict(os.environ, {}, clear=True):  # Clear env vars
    | ^^^^^^^^^^^^
108 |                 s = get_settings()
109 |                 assert s.api_port == 9000
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:119:5
    |
117 |                 assert s.allow_network is False
118 |
119 |     def test_env_override_yaml_and_defaults(self):
    |     ^
120 |         """Test that environment variables override both YAML and defaults."""
121 |         # Mock YAML data that should be overridden by env vars
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:139:9
    |
138 |         with patch("backend.settings._load_yaml_config", return_value=mock_yaml_data):
139 |         pass
    |         ^^^^
140 |             with patch.dict(os.environ, env_vars, clear=True):
141 |                 s = get_settings()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:140:1
    |
138 |         with patch("backend.settings._load_yaml_config", return_value=mock_yaml_data):
139 |         pass
140 |             with patch.dict(os.environ, env_vars, clear=True):
    | ^^^^^^^^^^^^
141 |                 s = get_settings()
142 |                 # Environment should win over YAML
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:151:5
    |
149 |                 assert s.backend_url == "http://127.0.0.1:7000"
150 |
151 |     def test_invalid_env_values_ignored(self):
    |     ^
152 |         """Test that invalid environment values are ignored gracefully."""
153 |         # Use empty YAML and test invalid env vars
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:155:9
    |
153 |         # Use empty YAML and test invalid env vars
154 |         with patch("backend.settings._load_yaml_config", return_value={}):
155 |         pass
    |         ^^^^
156 |             with patch.dict(
157 |                 os.environ, {"CHUNK_SIZE": "not_a_number", "GPU": "maybe"}, clear=True
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:156:1
    |
154 |         with patch("backend.settings._load_yaml_config", return_value={}):
155 |         pass
156 |             with patch.dict(
    | ^^^^^^^^^^^^
157 |                 os.environ, {"CHUNK_SIZE": "not_a_number", "GPU": "maybe"}, clear=True
158 |             ):
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:165:1
    |
165 | class TestSettingsHelpers:
    | ^
166 |     """Test helper functions for settings management."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:175:9
    |
173 |         """Test loading YAML when file doesn't exist."""
174 |         with patch("backend.settings.Path") as mock_path_cls:
175 |         pass
    |         ^^^^
176 |             mock_path = Mock()
177 |             mock_path.exists.return_value = False
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:176:1
    |
174 |         with patch("backend.settings.Path") as mock_path_cls:
175 |         pass
176 |             mock_path = Mock()
    | ^^^^^^^^^^^^
177 |             mock_path.exists.return_value = False
178 |             mock_path_cls.return_value = mock_path
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:188:9
    |
186 |             "builtins.__import__", side_effect=ImportError("No module named 'yaml'")
187 |         ):
188 |         pass
    |         ^^^^
189 |             result = _load_yaml_config()
190 |             assert result == {}
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:189:1
    |
187 |         ):
188 |         pass
189 |             result = _load_yaml_config()
    | ^^^^^^^^^^^^
190 |             assert result == {}
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:192:5
    |
190 |             assert result == {}
191 |
192 |     def test_load_yaml_config_invalid_yaml(self, tmp_path):
    |     ^
193 |         """Test loading YAML with invalid content."""
194 |         config_path = tmp_path / "config.yaml"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:197:9
    |
195 |         config_path.write_text("invalid: yaml: content: :[")
196 |         with patch("backend.settings.Path") as mock_path_cls:
197 |         pass
    |         ^^^^
198 |             mock_path = Mock()
199 |             mock_path.parent = tmp_path
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:198:1
    |
196 |         with patch("backend.settings.Path") as mock_path_cls:
197 |         pass
198 |             mock_path = Mock()
    | ^^^^^^^^^^^^
199 |             mock_path.parent = tmp_path
200 |             mock_path_cls.return_value = mock_path
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:203:13
    |
201 |             mock_path_cls.__file__ = str(tmp_path / "settings.py")
202 |             with patch("backend.settings.open", create=True) as mock_open:
203 |             pass
    |             ^^^^
204 |                 mock_open.side_effect = Exception("YAML parse error")
205 |                 result = _load_yaml_config()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:204:1
    |
202 |             with patch("backend.settings.open", create=True) as mock_open:
203 |             pass
204 |                 mock_open.side_effect = Exception("YAML parse error")
    | ^^^^^^^^^^^^^^^^
205 |                 result = _load_yaml_config()
206 |                 assert result == {}
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:208:5
    |
206 |                 assert result == {}
207 |
208 |     @patch.dict(
    |     ^
209 |         os.environ,
210 |         {
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:240:1
    |
240 | class TestUpdateSettings:
    | ^
241 |     pass
242 |     """Test settings update functionality."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:258:13
    |
257 |             if "w" in mode:
258 |             pass
    |             ^^^^
259 |                 # Use StringIO to properly accumulate YAML content
260 |                 buffer = StringIO()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:260:1
    |
258 |             pass
259 |                 # Use StringIO to properly accumulate YAML content
260 |                 buffer = StringIO()
    | ^^^^^^^^^^^^^^^^
261 |
262 |                 def write_wrapper(content):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:270:45
    |
269 |                     full_content = buffer.getvalue()
270 |                     if full_content.strip():
    |                                             ^
271 |                 pass
272 |                         try:
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:272:1
    |
270 |                     if full_content.strip():
271 |                 pass
272 |                         try:
    | ^^^^^^^^^^^^^^^^^^^^^^^^
273 |                             loaded_data = yaml.safe_load(full_content)
274 |                             if isinstance(loaded_data, dict):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:274:62
    |
272 |                         try:
273 |                             loaded_data = yaml.safe_load(full_content)
274 |                             if isinstance(loaded_data, dict):
    |                                                              ^
275 |                     pass
276 |                                 mock_config_data.clear()
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\backend\test_settings.py:275:21
    |
273 |                             loaded_data = yaml.safe_load(full_content)
274 |                             if isinstance(loaded_data, dict):
275 |                     pass
    |                     ^
276 |                                 mock_config_data.clear()
277 |                                 mock_config_data.update(loaded_data)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:276:1
    |
274 |                             if isinstance(loaded_data, dict):
275 |                     pass
276 |                                 mock_config_data.clear()
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
277 |                                 mock_config_data.update(loaded_data)
278 |                         except yaml.YAMLError:
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\backend\test_settings.py:278:1
    |
276 |                                 mock_config_data.clear()
277 |                                 mock_config_data.update(loaded_data)
278 |                         except yaml.YAMLError:
    | ^^^^^^^^^^^^^^^^^^^^^^^^
279 |                 pass
280 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:278:25
    |
276 |                                 mock_config_data.clear()
277 |                                 mock_config_data.update(loaded_data)
278 |                         except yaml.YAMLError:
    |                         ^^^^^^
279 |                 pass
280 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Expected an expression
   --> tests\backend\test_settings.py:278:47
    |
276 |                                 mock_config_data.clear()
277 |                                 mock_config_data.update(loaded_data)
278 |                         except yaml.YAMLError:
    |                                               ^
279 |                 pass
280 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:280:1
    |
278 |                         except yaml.YAMLError:
279 |                 pass
280 |                             pass  # Ignore invalid YAML
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
281 |
282 |                 mock_file = Mock()
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:287:13
    |
285 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
286 |                 return mock_file
287 |             else:
    |             ^^^^
288 |             pass
289 |                 # Return read operations from mock data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:287:17
    |
285 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
286 |                 return mock_file
287 |             else:
    |                 ^
288 |             pass
289 |                 # Return read operations from mock data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:287:18
    |
285 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
286 |                 return mock_file
287 |             else:
    |                  ^
288 |             pass
289 |                 # Return read operations from mock data
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:290:1
    |
288 |             pass
289 |                 # Return read operations from mock data
290 |                 import yaml
    | ^^^^^^^^^^^^^^^^
291 |
292 |                 content = yaml.safe_dump(mock_config_data)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:296:9
    |
294 |                 return mock_file
295 |
296 |         with patch("backend.settings.open", mock_open_func), patch(
    |         ^
297 |             "backend.settings.reload_settings", return_value=Settings()
298 |         ):
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:299:9
    |
297 |             "backend.settings.reload_settings", return_value=Settings()
298 |         ):
299 |         pass
    |         ^^^^
300 |             updates = {
301 |                 "vault_path": "new_vault",
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:300:1
    |
298 |         ):
299 |         pass
300 |             updates = {
    | ^^^^^^^^^^^^
301 |                 "vault_path": "new_vault",
302 |                 "chunk_size": 1500,
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:318:5
    |
316 |             assert "malicious_key" not in mock_config_data
317 |
318 |     def test_update_settings_type_coercion(self, tmp_path):
    |     ^
319 |         """Test that update_settings coerces types correctly."""
320 |         # Mock config data
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:327:13
    |
326 |             if "w" in mode:
327 |             pass
    |             ^^^^
328 |                 # Use StringIO to properly accumulate YAML content
329 |                 buffer = StringIO()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:329:1
    |
327 |             pass
328 |                 # Use StringIO to properly accumulate YAML content
329 |                 buffer = StringIO()
    | ^^^^^^^^^^^^^^^^
330 |
331 |                 def write_wrapper(content):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:339:45
    |
338 |                     full_content = buffer.getvalue()
339 |                     if full_content.strip():
    |                                             ^
340 |                 pass
341 |                         try:
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:341:1
    |
339 |                     if full_content.strip():
340 |                 pass
341 |                         try:
    | ^^^^^^^^^^^^^^^^^^^^^^^^
342 |                             loaded_data = yaml.safe_load(full_content)
343 |                             if isinstance(loaded_data, dict):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:343:62
    |
341 |                         try:
342 |                             loaded_data = yaml.safe_load(full_content)
343 |                             if isinstance(loaded_data, dict):
    |                                                              ^
344 |                     pass
345 |                                 mock_config_data.clear()
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\backend\test_settings.py:344:21
    |
342 |                             loaded_data = yaml.safe_load(full_content)
343 |                             if isinstance(loaded_data, dict):
344 |                     pass
    |                     ^
345 |                                 mock_config_data.clear()
346 |                                 mock_config_data.update(loaded_data)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:345:1
    |
343 |                             if isinstance(loaded_data, dict):
344 |                     pass
345 |                                 mock_config_data.clear()
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
346 |                                 mock_config_data.update(loaded_data)
347 |                         except yaml.YAMLError:
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\backend\test_settings.py:347:1
    |
345 |                                 mock_config_data.clear()
346 |                                 mock_config_data.update(loaded_data)
347 |                         except yaml.YAMLError:
    | ^^^^^^^^^^^^^^^^^^^^^^^^
348 |                 pass
349 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:347:25
    |
345 |                                 mock_config_data.clear()
346 |                                 mock_config_data.update(loaded_data)
347 |                         except yaml.YAMLError:
    |                         ^^^^^^
348 |                 pass
349 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Expected an expression
   --> tests\backend\test_settings.py:347:47
    |
345 |                                 mock_config_data.clear()
346 |                                 mock_config_data.update(loaded_data)
347 |                         except yaml.YAMLError:
    |                                               ^
348 |                 pass
349 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:349:1
    |
347 |                         except yaml.YAMLError:
348 |                 pass
349 |                             pass  # Ignore invalid YAML
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
350 |
351 |                 mock_file = Mock()
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:356:13
    |
354 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
355 |                 return mock_file
356 |             else:
    |             ^^^^
357 |             pass
358 |                 # Return read operations from mock data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:356:17
    |
354 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
355 |                 return mock_file
356 |             else:
    |                 ^
357 |             pass
358 |                 # Return read operations from mock data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:356:18
    |
354 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
355 |                 return mock_file
356 |             else:
    |                  ^
357 |             pass
358 |                 # Return read operations from mock data
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:359:1
    |
357 |             pass
358 |                 # Return read operations from mock data
359 |                 import yaml
    | ^^^^^^^^^^^^^^^^
360 |
361 |                 content = yaml.safe_dump(mock_config_data) if mock_config_data else ""
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:365:9
    |
363 |                 return mock_file
364 |
365 |         with patch("backend.settings.open", mock_open_func), patch(
    |         ^
366 |             "backend.settings.reload_settings", return_value=Settings()
367 |         ):
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:368:9
    |
366 |             "backend.settings.reload_settings", return_value=Settings()
367 |         ):
368 |         pass
    |         ^^^^
369 |             updates = {
370 |                 "chunk_size": "2000",  # String -> int
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:369:1
    |
367 |         ):
368 |         pass
369 |             updates = {
    | ^^^^^^^^^^^^
370 |                 "chunk_size": "2000",  # String -> int
371 |                 "gpu": "true",  # String -> bool
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:382:5
    |
380 |             assert mock_config_data["vault_path"] == "123"
381 |
382 |     def test_update_settings_invalid_types_removed(self, tmp_path):
    |     ^
383 |         """Test that invalid type coercions are removed from updates."""
384 |         # Mock config data
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:391:13
    |
390 |             if "w" in mode:
391 |             pass
    |             ^^^^
392 |                 # Use StringIO to properly accumulate YAML content
393 |                 buffer = StringIO()
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:393:1
    |
391 |             pass
392 |                 # Use StringIO to properly accumulate YAML content
393 |                 buffer = StringIO()
    | ^^^^^^^^^^^^^^^^
394 |
395 |                 def write_wrapper(content):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:403:45
    |
402 |                     full_content = buffer.getvalue()
403 |                     if full_content.strip():
    |                                             ^
404 |                 pass
405 |                         try:
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:405:1
    |
403 |                     if full_content.strip():
404 |                 pass
405 |                         try:
    | ^^^^^^^^^^^^^^^^^^^^^^^^
406 |                             loaded_data = yaml.safe_load(full_content)
407 |                             if isinstance(loaded_data, dict):
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\backend\test_settings.py:407:62
    |
405 |                         try:
406 |                             loaded_data = yaml.safe_load(full_content)
407 |                             if isinstance(loaded_data, dict):
    |                                                              ^
408 |                     pass
409 |                                 mock_config_data.clear()
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\backend\test_settings.py:408:21
    |
406 |                             loaded_data = yaml.safe_load(full_content)
407 |                             if isinstance(loaded_data, dict):
408 |                     pass
    |                     ^
409 |                                 mock_config_data.clear()
410 |                                 mock_config_data.update(loaded_data)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:409:1
    |
407 |                             if isinstance(loaded_data, dict):
408 |                     pass
409 |                                 mock_config_data.clear()
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
410 |                                 mock_config_data.update(loaded_data)
411 |                         except yaml.YAMLError:
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\backend\test_settings.py:411:1
    |
409 |                                 mock_config_data.clear()
410 |                                 mock_config_data.update(loaded_data)
411 |                         except yaml.YAMLError:
    | ^^^^^^^^^^^^^^^^^^^^^^^^
412 |                 pass
413 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:411:25
    |
409 |                                 mock_config_data.clear()
410 |                                 mock_config_data.update(loaded_data)
411 |                         except yaml.YAMLError:
    |                         ^^^^^^
412 |                 pass
413 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Expected an expression
   --> tests\backend\test_settings.py:411:47
    |
409 |                                 mock_config_data.clear()
410 |                                 mock_config_data.update(loaded_data)
411 |                         except yaml.YAMLError:
    |                                               ^
412 |                 pass
413 |                             pass  # Ignore invalid YAML
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:413:1
    |
411 |                         except yaml.YAMLError:
412 |                 pass
413 |                             pass  # Ignore invalid YAML
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
414 |
415 |                 mock_file = Mock()
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:420:13
    |
418 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
419 |                 return mock_file
420 |             else:
    |             ^^^^
421 |             pass
422 |                 # Return read operations from mock data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:420:17
    |
418 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
419 |                 return mock_file
420 |             else:
    |                 ^
421 |             pass
422 |                 # Return read operations from mock data
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:420:18
    |
418 |                 mock_file.__exit__ = Mock(side_effect=mock_exit)
419 |                 return mock_file
420 |             else:
    |                  ^
421 |             pass
422 |                 # Return read operations from mock data
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:423:1
    |
421 |             pass
422 |                 # Return read operations from mock data
423 |                 import yaml
    | ^^^^^^^^^^^^^^^^
424 |
425 |                 content = yaml.safe_dump(mock_config_data) if mock_config_data else ""
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:429:9
    |
427 |                 return mock_file
428 |
429 |         with patch("backend.settings.open", mock_open_func), patch(
    |         ^
430 |             "backend.settings.reload_settings", return_value=Settings()
431 |         ):
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_settings.py:432:9
    |
430 |             "backend.settings.reload_settings", return_value=Settings()
431 |         ):
432 |         pass
    |         ^^^^
433 |             updates = {
434 |                 "chunk_size": "not_a_number",
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_settings.py:433:1
    |
431 |         ):
432 |         pass
433 |             updates = {
    | ^^^^^^^^^^^^
434 |                 "chunk_size": "not_a_number",
435 |                 "similarity_threshold": "also_invalid",
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_settings.py:446:1
    |
446 | if __name__ == "__main__":
    | ^
447 |     pass
448 |     pytest.main([__file__])
    |

invalid-syntax: Expected an indented block after `with` statement
  --> tests\backend\test_voice.py:93:9
   |
91 |         temp_file = tempfile.NamedTemporaryFile(suffix=".wav", delete=False)
92 |         with wave.open(temp_file.name, "wb") as wf:
93 |         pass
   |         ^^^^
94 |             wf.setnchannels(channels)
95 |             wf.setsampwidth(sample_width)
   |

invalid-syntax: Unexpected indentation
  --> tests\backend\test_voice.py:94:1
   |
92 |         with wave.open(temp_file.name, "wb") as wf:
93 |         pass
94 |             wf.setnchannels(channels)
   | ^^^^^^^^^^^^
95 |             wf.setsampwidth(sample_width)
96 |             wf.setframerate(sample_rate)
   |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_voice.py:102:13
    |
100 |             frames = int(duration * sample_rate)
101 |             for i in range(frames):
102 |             pass
    |             ^^^^
103 |                 value = int(32767 * math.sin(2 * math.pi * 440 * i / sample_rate))
104 |                 data = struct.pack("<h", value)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:103:1
    |
101 |             for i in range(frames):
102 |             pass
103 |                 value = int(32767 * math.sin(2 * math.pi * 440 * i / sample_rate))
    | ^^^^^^^^^^^^^^^^
104 |                 data = struct.pack("<h", value)
105 |                 wf.writeframes(data)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:108:5
    |
106 |         return temp_file.name
107 |
108 |     @pytest.fixture
    |     ^
109 |     def test_client(self):
110 |         """Create a test client for the voice router."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_voice.py:284:9
    |
283 |         with pytest.raises(wave.Error):
284 |         pass
    |         ^^^^
285 |         pass
286 |             await voice_transcribe(mock_file)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:286:1
    |
284 |         pass
285 |         pass
286 |             await voice_transcribe(mock_file)
    | ^^^^^^^^^^^^
287 |
288 |     @patch("backend.voice.wave.open")
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:288:5
    |
286 |             await voice_transcribe(mock_file)
287 |
288 |     @patch("backend.voice.wave.open")
    |     ^
289 |     @patch("backend.voice.vosk.KaldiRecognizer")
290 |     @patch("builtins.open", mock_open())
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_voice.py:314:9
    |
313 |         with pytest.raises(json.JSONDecodeError):
314 |         pass
    |         ^^^^
315 |             await voice_transcribe(mock_file)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:315:1
    |
313 |         with pytest.raises(json.JSONDecodeError):
314 |         pass
315 |             await voice_transcribe(mock_file)
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:318:1
    |
318 | class TestVoiceEndpointIntegration:
    | ^
319 |     """Test voice endpoints without async markers."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_voice.py:330:9
    |
328 |         temp_file = tempfile.NamedTemporaryFile(suffix=".wav", delete=False)
329 |         with wave.open(temp_file.name, "wb") as wf:
330 |         pass
    |         ^^^^
331 |             wf.setnchannels(channels)
332 |             wf.setsampwidth(sample_width)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:331:1
    |
329 |         with wave.open(temp_file.name, "wb") as wf:
330 |         pass
331 |             wf.setnchannels(channels)
    | ^^^^^^^^^^^^
332 |             wf.setsampwidth(sample_width)
333 |             wf.setframerate(sample_rate)
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\backend\test_voice.py:337:13
    |
335 |             frames = int(duration * sample_rate)
336 |             for _i in range(frames):
337 |             pass
    |             ^^^^
338 |                 value = int(32767 * 0.1)  # Low volume to avoid clipping
339 |                 packed_value = struct.pack("<h", value)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:338:1
    |
336 |             for _i in range(frames):
337 |             pass
338 |                 value = int(32767 * 0.1)  # Low volume to avoid clipping
    | ^^^^^^^^^^^^^^^^
339 |                 packed_value = struct.pack("<h", value)
340 |                 wf.writeframes(packed_value)
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:343:5
    |
341 |         return temp_file.name
342 |
343 |     def test_voice_transcribe_endpoint_integration(self, client):
    |     ^
344 |         """Test the voice transcription endpoint integration."""
345 |         # Create a simple test audio file
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\backend\test_voice.py:348:9
    |
346 |         test_wav = self.create_test_wav_file()
347 |         try:
348 |         pass
    |         ^^^^
349 |             with patch("backend.voice.vosk.KaldiRecognizer") as mock_kaldi:
350 |                 # Mock the recognizer
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:349:1
    |
347 |         try:
348 |         pass
349 |             with patch("backend.voice.vosk.KaldiRecognizer") as mock_kaldi:
    | ^^^^^^^^^^^^
350 |                 # Mock the recognizer
351 |                 mock_recognizer = Mock()
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_voice.py:358:48
    |
356 |                 mock_kaldi.return_value = mock_recognizer
357 |                 # Upload the file
358 |                 with open(test_wav, "rb") as f:
    |                                                ^
359 |             pass
360 |                     response = client.post(
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:360:1
    |
358 |                 with open(test_wav, "rb") as f:
359 |             pass
360 |                     response = client.post(
    | ^^^^^^^^^^^^^^^^^^^^
361 |                         "/api/voice_transcribe",
362 |                         files={"file": ("test.wav", f, "audio/wav")},
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\backend\test_voice.py:364:1
    |
362 |                         files={"file": ("test.wav", f, "audio/wav")},
363 |                     )
364 |                 assert response.status_code == 200
    | ^^^^^^^^^^^^^^^^
365 |                 data = response.json()
366 |                 assert "transcription" in data
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:365:1
    |
363 |                     )
364 |                 assert response.status_code == 200
365 |                 data = response.json()
    | ^^^^^^^^^^^^^^^^
366 |                 assert "transcription" in data
367 |         finally:
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:367:9
    |
365 |                 data = response.json()
366 |                 assert "transcription" in data
367 |         finally:
    |         ^
368 |         pass
369 |             # Clean up
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:367:16
    |
365 |                 data = response.json()
366 |                 assert "transcription" in data
367 |         finally:
    |                ^
368 |         pass
369 |             # Clean up
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:367:17
    |
365 |                 data = response.json()
366 |                 assert "transcription" in data
367 |         finally:
    |                 ^
368 |         pass
369 |             # Clean up
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:370:1
    |
368 |         pass
369 |             # Clean up
370 |             os.unlink(test_wav)
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:373:1
    |
373 | class TestVoiceUtilities:
    | ^
374 |     """Test utility functions and edge cases for voice module."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_voice.py:449:9
    |
448 |         with pytest.raises(RuntimeError):
449 |         pass
    |         ^^^^
450 |             await voice_transcribe(mock_file)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:450:1
    |
448 |         with pytest.raises(RuntimeError):
449 |         pass
450 |             await voice_transcribe(mock_file)
    | ^^^^^^^^^^^^
451 |
452 |     @patch("builtins.open", side_effect=IOError("Cannot write temp file"))
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\backend\test_voice.py:460:9
    |
459 |         with pytest.raises(IOError):
460 |         pass
    |         ^^^^
461 |             await voice_transcribe(mock_file)
    |

invalid-syntax: Unexpected indentation
   --> tests\backend\test_voice.py:461:1
    |
459 |         with pytest.raises(IOError):
460 |         pass
461 |             await voice_transcribe(mock_file)
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\backend\test_voice.py:464:1
    |
464 | if __name__ == "__main__":
    | ^
465 |     pass
466 |     pytest.main([__file__])
    |

E902 stream did not contain valid UTF-8
--> tests\comprehensive_test_runner.py:1:1

E902 stream did not contain valid UTF-8
--> tests\conftest.py:1:1

E902 stream did not contain valid UTF-8
--> tests\integration\run_integration_tests.py:1:1

invalid-syntax: Expected an indented block after `if` statement
  --> tests\integration\test_api_integration.py:49:13
   |
47 |             headers = kwargs.pop("headers", None)
48 |             if headers is None:
49 |             pass
   |             ^^^^
50 |                 headers = {}
51 |             if method.upper() in ("POST", "PUT", "DELETE"):
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_api_integration.py:50:1
   |
48 |             if headers is None:
49 |             pass
50 |                 headers = {}
   | ^^^^^^^^^^^^^^^^
51 |             if method.upper() in ("POST", "PUT", "DELETE"):
52 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\integration\test_api_integration.py:52:13
   |
50 |                 headers = {}
51 |             if method.upper() in ("POST", "PUT", "DELETE"):
52 |             pass
   |             ^^^^
53 |                 headers["X-CSRF-Token"] = csrf_token
54 |             kwargs["headers"] = headers
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_api_integration.py:53:1
   |
51 |             if method.upper() in ("POST", "PUT", "DELETE"):
52 |             pass
53 |                 headers["X-CSRF-Token"] = csrf_token
   | ^^^^^^^^^^^^^^^^
54 |             kwargs["headers"] = headers
55 |             return await super().request(method, url, **kwargs)
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_api_integration.py:56:5
   |
54 |             kwargs["headers"] = headers
55 |             return await super().request(method, url, **kwargs)
56 |     async with CSRFClient(transport=transport, base_url="http://testserver") as client:
   |     ^
57 |         yield client
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_api_integration.py:59:1
   |
57 |         yield client
58 |
59 | @pytest_asyncio.fixture(scope="session")
   | ^
60 | async def backend_available():
61 |     """Check if backend health endpoint is reachable."""
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\integration\test_api_integration.py:67:13
   |
65 |             response = await client.get("/health", timeout=2)
66 |             if response.status_code == 200:
67 |             pass
   |             ^^^^
68 |                 return True
69 |     except Exception:
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_api_integration.py:68:1
   |
66 |             if response.status_code == 200:
67 |             pass
68 |                 return True
   | ^^^^^^^^^^^^^^^^
69 |     except Exception:
70 |         pass
   |

invalid-syntax: Expected `except` or `finally` after `try` block
  --> tests\integration\test_api_integration.py:69:5
   |
67 |             pass
68 |                 return True
69 |     except Exception:
   |     ^
70 |         pass
71 |         pass
   |

invalid-syntax: Expected an expression
  --> tests\integration\test_api_integration.py:69:22
   |
67 |             pass
68 |                 return True
69 |     except Exception:
   |                      ^
70 |         pass
71 |         pass
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_api_integration.py:70:1
   |
68 |                 return True
69 |     except Exception:
70 |         pass
   | ^^^^^^^^
71 |         pass
72 |     pytest.skip("Backend server is not running or /health is unreachable.")
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_api_integration.py:72:5
   |
70 |         pass
71 |         pass
72 |     pytest.skip("Backend server is not running or /health is unreachable.")
   |     ^
73 |
74 | class TestAPIIntegration:
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_api_integration.py:74:1
   |
72 |     pytest.skip("Backend server is not running or /health is unreachable.")
73 |
74 | class TestAPIIntegration:
   | ^
75 |     """Test API endpoints with full HTTP request/response cycle."""
   |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\integration\test_api_integration.py:147:9
    |
145 |         # Accept either success (with mock responses) or expected error
146 |         if response.status_code == 500:
147 |         pass
    |         ^^^^
148 |             # If no valid model is present, expect 500 error and specific message
149 |             data = response.json()
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:149:1
    |
147 |         pass
148 |             # If no valid model is present, expect 500 error and specific message
149 |             data = response.json()
    | ^^^^^^^^^^^^
150 |             assert "detail" in data
151 |             assert (
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:154:9
    |
152 |                 "Model unavailable or failed to generate an answer." in data["detail"]
153 |             )
154 |         else:
    |         ^^^^
155 |         pass
156 |             # Or accept successful response with fallback behavior in test environment
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:154:13
    |
152 |                 "Model unavailable or failed to generate an answer." in data["detail"]
153 |             )
154 |         else:
    |             ^
155 |         pass
156 |             # Or accept successful response with fallback behavior in test environment
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:154:14
    |
152 |                 "Model unavailable or failed to generate an answer." in data["detail"]
153 |             )
154 |         else:
    |              ^
155 |         pass
156 |             # Or accept successful response with fallback behavior in test environment
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:157:1
    |
155 |         pass
156 |             # Or accept successful response with fallback behavior in test environment
157 |             assert response.status_code == 200
    | ^^^^^^^^^^^^
158 |             data = response.json()
159 |             assert "answer" in data
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:161:5
    |
159 |             assert "answer" in data
160 |
161 |     @pytest.mark.asyncio
    |     ^
162 |     async def test_reindex_endpoint_integration(
163 |         self, client, backend_available, mock_all_services
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\integration\test_api_integration.py:173:9
    |
171 |         # Handle both mock response (dict) and real response (bool/other)
172 |         if isinstance(data, dict):
173 |         pass
    |         ^^^^
174 |             # Verify reindex response (mocked scenario)
175 |             assert "indexed" in data or "files_indexed" in data
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:175:1
    |
173 |         pass
174 |             # Verify reindex response (mocked scenario)
175 |             assert "indexed" in data or "files_indexed" in data
    | ^^^^^^^^^^^^
176 |         else:
177 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:176:9
    |
174 |             # Verify reindex response (mocked scenario)
175 |             assert "indexed" in data or "files_indexed" in data
176 |         else:
    |         ^^^^
177 |         pass
178 |             # Accept real implementation behavior
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:176:13
    |
174 |             # Verify reindex response (mocked scenario)
175 |             assert "indexed" in data or "files_indexed" in data
176 |         else:
    |             ^
177 |         pass
178 |             # Accept real implementation behavior
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:176:14
    |
174 |             # Verify reindex response (mocked scenario)
175 |             assert "indexed" in data or "files_indexed" in data
176 |         else:
    |              ^
177 |         pass
178 |             # Accept real implementation behavior
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:179:1
    |
177 |         pass
178 |             # Accept real implementation behavior
179 |             assert data is not None
    | ^^^^^^^^^^^^
180 |         # Verify vault indexer was called
181 |         mock_all_services["vault_indexer"].reindex.assert_called_once_with(
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:181:9
    |
179 |             assert data is not None
180 |         # Verify vault indexer was called
181 |         mock_all_services["vault_indexer"].reindex.assert_called_once_with(
    |         ^
182 |             "./test_vault"
183 |         )
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:185:5
    |
183 |         )
184 |
185 |     @pytest.mark.asyncio
    |     ^
186 |     async def test_search_endpoint_integration(self, client, mock_all_services):
187 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\integration\test_api_integration.py:198:9
    |
196 |         assert isinstance(data["results"], (list, dict))
197 |         if isinstance(data["results"], list) and len(data["results"]) > 0:
198 |         pass
    |         ^^^^
199 |             # Only check score if we have results
200 |             assert "score" in data["results"][0]
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:200:1
    |
198 |         pass
199 |             # Only check score if we have results
200 |             assert "score" in data["results"][0]
    | ^^^^^^^^^^^^
201 |         # Verify embeddings manager was called
202 |         mock_all_services["emb_manager"].search.assert_called_once_with(
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:207:5
    |
207 |     @pytest.mark.asyncio
    |     ^
208 |     async def test_scan_vault_endpoint_integration(self, client, mock_all_services):
209 |         pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\integration\test_api_integration.py:228:9
    |
226 |         ], f"Expected 200, 400, or 422, got {response.status_code}"
227 |         if response.status_code == 400:
228 |         pass
    |         ^^^^
229 |             # Validation error as expected
230 |             data = response.json()
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:230:1
    |
228 |         pass
229 |             # Validation error as expected
230 |             data = response.json()
    | ^^^^^^^^^^^^
231 |             assert "detail" in data
232 |             assert "Invalid vault path" in data["detail"]
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:233:9
    |
231 |             assert "detail" in data
232 |             assert "Invalid vault path" in data["detail"]
233 |         else:
    |         ^^^^
234 |         pass
235 |             # Real implementation may handle non-existent paths gracefully
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:233:13
    |
231 |             assert "detail" in data
232 |             assert "Invalid vault path" in data["detail"]
233 |         else:
    |             ^
234 |         pass
235 |             # Real implementation may handle non-existent paths gracefully
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:233:14
    |
231 |             assert "detail" in data
232 |             assert "Invalid vault path" in data["detail"]
233 |         else:
    |              ^
234 |         pass
235 |             # Real implementation may handle non-existent paths gracefully
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:236:1
    |
234 |         pass
235 |             # Real implementation may handle non-existent paths gracefully
236 |             data = response.json()
    | ^^^^^^^^^^^^
237 |             assert data is not None
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:239:5
    |
237 |             assert data is not None
238 |
239 |     @pytest.mark.asyncio
    |     ^
240 |     async def test_config_reload_endpoint_integration(self, client):
241 |         """Test config reload endpoint integration."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\integration\test_api_integration.py:243:9
    |
241 |         """Test config reload endpoint integration."""
242 |         with patch("backend.backend.reload_settings") as mock_reload:
243 |         pass
    |         ^^^^
244 |             # Configure settings mock
245 |             settings_mock = Mock()
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:245:1
    |
243 |         pass
244 |             # Configure settings mock
245 |             settings_mock = Mock()
    | ^^^^^^^^^^^^
246 |             settings_mock.dict.return_value = {
247 |                 "model_backend": "gpt-4",
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:261:5
    |
259 |             mock_reload.assert_called_once()
260 |
261 |     @pytest.mark.asyncio
    |     ^
262 |     async def test_config_update_endpoint_integration(self, client):
263 |         pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\integration\test_api_integration.py:266:9
    |
264 |         """Test config update endpoint integration."""
265 |         with patch("backend.backend.update_settings") as mock_update:
266 |         pass
    |         ^^^^
267 |             # Configure settings mock
268 |             updated_settings = Mock()
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:268:1
    |
266 |         pass
267 |             # Configure settings mock
268 |             updated_settings = Mock()
    | ^^^^^^^^^^^^
269 |             updated_settings.dict.return_value = {
270 |                 "model_backend": "claude-3",
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:286:1
    |
286 | class TestAPIErrorHandling:
    | ^
287 |     pass
288 |     """Test API error handling and edge cases."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\integration\test_api_integration.py:320:9
    |
318 |             "backend.backend.emb_manager"
319 |         ) as mock_em:
320 |         pass
    |         ^^^^
321 |             # Configure service to fail
322 |             mock_mm.generate.side_effect = Exception("Model service unavailable")
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:322:1
    |
320 |         pass
321 |             # Configure service to fail
322 |             mock_mm.generate.side_effect = Exception("Model service unavailable")
    | ^^^^^^^^^^^^
323 |             mock_em.search.return_value = []  # Ensure search doesn't fail
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\integration\test_api_integration.py:341:13
    |
339 |             data = response.json()
340 |             if response.status_code == 500:
341 |             pass
    |             ^^^^
342 |                 assert (
343 |                     "Model unavailable or failed to generate an answer."
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:342:1
    |
340 |             if response.status_code == 500:
341 |             pass
342 |                 assert (
    | ^^^^^^^^^^^^^^^^
343 |                     "Model unavailable or failed to generate an answer."
344 |                     in data["detail"]
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:346:13
    |
344 |                     in data["detail"]
345 |                 )
346 |             else:
    |             ^^^^
347 |             pass
348 |                 # Real implementation might return success with fallback response
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:346:17
    |
344 |                     in data["detail"]
345 |                 )
346 |             else:
    |                 ^
347 |             pass
348 |                 # Real implementation might return success with fallback response
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:346:18
    |
344 |                     in data["detail"]
345 |                 )
346 |             else:
    |                  ^
347 |             pass
348 |                 # Real implementation might return success with fallback response
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:349:1
    |
347 |             pass
348 |                 # Real implementation might return success with fallback response
349 |                 assert data is not None
    | ^^^^^^^^^^^^^^^^
350 |
351 |     @pytest.mark.asyncio
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:351:5
    |
349 |                 assert data is not None
350 |
351 |     @pytest.mark.asyncio
    |     ^
352 |     async def test_config_endpoint_error_handling(self, client):
353 |         pass
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\integration\test_api_integration.py:356:9
    |
354 |         """Test config endpoint error handling."""
355 |         with patch("backend.backend.reload_settings") as mock_reload:
356 |         pass
    |         ^^^^
357 |             # Configure reload to fail
358 |             mock_reload.side_effect = Exception("Settings file not found")
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:358:1
    |
356 |         pass
357 |             # Configure reload to fail
358 |             mock_reload.side_effect = Exception("Settings file not found")
    | ^^^^^^^^^^^^
359 |
360 |             response = await client.post("/api/config/reload")
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:370:1
    |
370 | class TestAPIPerformance:
    | ^
371 |     pass
372 |     """Test API performance characteristics."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_api_integration.py:385:9
    |
383 |         tasks = []
384 |         for i in range(5):
385 |         pass
    |         ^^^^
386 |             request_data = {"question": f"Question {i}", "vault_path": "./vault"}
387 |             task = client.post("/api/ask", json=request_data)
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:386:1
    |
384 |         for i in range(5):
385 |         pass
386 |             request_data = {"question": f"Question {i}", "vault_path": "./vault"}
    | ^^^^^^^^^^^^
387 |             task = client.post("/api/ask", json=request_data)
388 |             tasks.append(task)
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_api_integration.py:396:9
    |
394 |         assert len(responses) == 5
395 |         for response in responses:
396 |         pass
    |         ^^^^
397 |             assert response.status_code == 200
398 |             data = response.json()
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_api_integration.py:397:1
    |
395 |         for response in responses:
396 |         pass
397 |             assert response.status_code == 200
    | ^^^^^^^^^^^^
398 |             data = response.json()
399 |             assert data["answer"] == "Quick response"
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:402:5
    |
402 |     @pytest.mark.asyncio
    |     ^
403 |     async def test_large_request_handling(self, client, mock_all_services):
404 |         """Test handling of large requests."""
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_api_integration.py:426:1
    |
426 | class TestCORSIntegration:
    | ^
427 |     """Test CORS (Cross-Origin Resource Sharing) configuration."""
    |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\integration\test_backend_integration.py:40:9
   |
39 |         for module_name in modules:
40 |         pass
   |         ^^^^
41 |             spec = importlib.util.find_spec(module_name)
42 |             if spec is None:
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_backend_integration.py:41:1
   |
39 |         for module_name in modules:
40 |         pass
41 |             spec = importlib.util.find_spec(module_name)
   | ^^^^^^^^^^^^
42 |             if spec is None:
43 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\integration\test_backend_integration.py:43:13
   |
41 |             spec = importlib.util.find_spec(module_name)
42 |             if spec is None:
43 |             pass
   |             ^^^^
44 |                 pytest.fail(f"Module {module_name} not found")
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_backend_integration.py:44:1
   |
42 |             if spec is None:
43 |             pass
44 |                 pytest.fail(f"Module {module_name} not found")
   | ^^^^^^^^^^^^^^^^
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_backend_integration.py:47:5
   |
47 |     def test_fastapi_app_creation(self):
   |     ^
48 |         """Test that FastAPI app is created correctly."""
49 |         from backend.backend import app
   |

invalid-syntax: Expected an indented block after `try` statement
  --> tests\integration\test_backend_integration.py:69:9
   |
68 |         try:
69 |         pass
   |         ^^^^
70 |             from backend.backend import init_services
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_backend_integration.py:70:1
   |
68 |         try:
69 |         pass
70 |             from backend.backend import init_services
   | ^^^^^^^^^^^^
71 |
72 |             init_services()
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_backend_integration.py:74:9
   |
72 |             init_services()
73 |             assert True
74 |         except Exception as e:
   |         ^^^^^^
75 |         pass
76 |             # We expect some services might fail in test environment
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_backend_integration.py:74:26
   |
72 |             init_services()
73 |             assert True
74 |         except Exception as e:
   |                          ^^
75 |         pass
76 |             # We expect some services might fail in test environment
   |

invalid-syntax: Expected an expression
  --> tests\integration\test_backend_integration.py:74:31
   |
72 |             init_services()
73 |             assert True
74 |         except Exception as e:
   |                               ^
75 |         pass
76 |             # We expect some services might fail in test environment
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_backend_integration.py:77:1
   |
75 |         pass
76 |             # We expect some services might fail in test environment
77 |             assert True
   | ^^^^^^^^^^^^
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_backend_integration.py:80:1
   |
80 | class TestBackendServiceAccess:
   | ^
81 |     """Test that backend services can be accessed after initialization."""
   |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:106:9
    |
104 |         """Test that settings can be loaded."""
105 |         try:
106 |         pass
    |         ^^^^
107 |             from backend.settings import get_settings
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:107:1
    |
105 |         try:
106 |         pass
107 |             from backend.settings import get_settings
    | ^^^^^^^^^^^^
108 |
109 |             settings = get_settings()
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:116:9
    |
114 |             assert hasattr(settings, "model_backend")
115 |
116 |         except Exception as e:
    |         ^^^^^^
117 |         pass
118 |             # Settings might fail in test environment, that's acceptable
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:116:26
    |
114 |             assert hasattr(settings, "model_backend")
115 |
116 |         except Exception as e:
    |                          ^^
117 |         pass
118 |             # Settings might fail in test environment, that's acceptable
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:116:31
    |
114 |             assert hasattr(settings, "model_backend")
115 |
116 |         except Exception as e:
    |                               ^
117 |         pass
118 |             # Settings might fail in test environment, that's acceptable
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:121:1
    |
121 | class TestMockedWorkflowIntegration:
    | ^
122 |     """Test integration workflows with proper mocking."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\integration\test_backend_integration.py:133:9
    |
131 |             "backend.backend.cache_manager"
132 |         ) as mock_cm:
133 |         pass
    |         ^^^^
134 |             # Configure realistic mock responses using standardized patterns
135 |             mock_mm.generate.return_value = "AI response from model"
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:135:1
    |
133 |         pass
134 |             # Configure realistic mock responses using standardized patterns
135 |             mock_mm.generate.return_value = "AI response from model"
    | ^^^^^^^^^^^^
136 |             mock_mm.is_ready.return_value = True
137 |             mock_mm.get_available_models.return_value = ["test-model"]
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:172:9
    |
171 |         try:
172 |         pass
    |         ^^^^
173 |             response = _ask_impl(request)
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:173:1
    |
171 |         try:
172 |         pass
173 |             response = _ask_impl(request)
    | ^^^^^^^^^^^^
174 |
175 |             # Verify workflow executed
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:182:9
    |
180 |             mock_services["model_manager"].generate.assert_called_once()
181 |
182 |         except Exception as e:
    |         ^^^^^^
183 |         pass
184 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:182:26
    |
180 |             mock_services["model_manager"].generate.assert_called_once()
181 |
182 |         except Exception as e:
    |                          ^^
183 |         pass
184 |         pass
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:182:31
    |
180 |             mock_services["model_manager"].generate.assert_called_once()
181 |
182 |         except Exception as e:
    |                               ^
183 |         pass
184 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:187:5
    |
185 |             # Some failures expected in test environment
186 |
187 |     def test_search_integration(self, mock_services):
    |     ^
188 |         """Test search functionality integration."""
189 |         import asyncio
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:194:9
    |
193 |         try:
194 |         pass
    |         ^^^^
195 |             response = asyncio.run(search("test query", top_k=3))
196 |             assert response is not None
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:195:1
    |
193 |         try:
194 |         pass
195 |             response = asyncio.run(search("test query", top_k=3))
    | ^^^^^^^^^^^^
196 |             assert response is not None
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:203:9
    |
201 |             )
202 |
203 |         except Exception as e:
    |         ^^^^^^
204 |     pass
205 |     pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:203:26
    |
201 |             )
202 |
203 |         except Exception as e:
    |                          ^^
204 |     pass
205 |     pass
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:203:31
    |
201 |             )
202 |
203 |         except Exception as e:
    |                               ^
204 |     pass
205 |     pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:204:5
    |
203 |         except Exception as e:
204 |     pass
    |     ^
205 |     pass
206 |     def test_vault_indexing_integration(self, mock_services):
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:213:9
    |
212 |         try:
213 |         pass
    |         ^^^^
214 |             response = asyncio.run(scan_vault("./test_vault"))
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:214:1
    |
212 |         try:
213 |         pass
214 |             response = asyncio.run(scan_vault("./test_vault"))
    | ^^^^^^^^^^^^
215 |
216 |             assert response is not None
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:223:9
    |
221 |             )
222 |
223 |         except Exception as e:
    |         ^^^^^^
224 |     pass
225 |     pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:223:26
    |
221 |             )
222 |
223 |         except Exception as e:
    |                          ^^
224 |     pass
225 |     pass
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:223:31
    |
221 |             )
222 |
223 |         except Exception as e:
    |                               ^
224 |     pass
225 |     pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:224:5
    |
223 |         except Exception as e:
224 |     pass
    |     ^
225 |     pass
226 | class TestConfigurationIntegration:
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:226:1
    |
224 |     pass
225 |     pass
226 | class TestConfigurationIntegration:
    | ^
227 |     """Test configuration and settings integration."""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:232:9
    |
230 |         """Test that settings can be loaded and accessed."""
231 |         try:
232 |         pass
    |         ^^^^
233 |             from backend.settings import get_settings
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:233:1
    |
231 |         try:
232 |         pass
233 |             from backend.settings import get_settings
    | ^^^^^^^^^^^^
234 |
235 |             settings = get_settings()
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:240:9
    |
238 |             assert settings is not None
239 |
240 |         except Exception as e:
    |         ^^^^^^
241 |     pass
242 |     @patch("backend.settings.reload_settings")
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:240:26
    |
238 |             assert settings is not None
239 |
240 |         except Exception as e:
    |                          ^^
241 |     pass
242 |     @patch("backend.settings.reload_settings")
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:240:31
    |
238 |             assert settings is not None
239 |
240 |         except Exception as e:
    |                               ^
241 |     pass
242 |     @patch("backend.settings.reload_settings")
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:255:9
    |
254 |         try:
255 |         pass
    |         ^^^^
256 |             response = asyncio.run(post_reload_config())
257 |             assert response is not None
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:256:1
    |
254 |         try:
255 |         pass
256 |             response = asyncio.run(post_reload_config())
    | ^^^^^^^^^^^^
257 |             assert response is not None
258 |             assert response.get("ok") is True
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:262:9
    |
260 |             mock_reload.assert_called_once()
261 |
262 |         except Exception as e:
    |         ^^^^^^
263 |     pass
264 |     @patch("backend.settings.update_settings")
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:262:26
    |
260 |             mock_reload.assert_called_once()
261 |
262 |         except Exception as e:
    |                          ^^
263 |     pass
264 |     @patch("backend.settings.update_settings")
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:262:31
    |
260 |             mock_reload.assert_called_once()
261 |
262 |         except Exception as e:
    |                               ^
263 |     pass
264 |     @patch("backend.settings.update_settings")
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:263:5
    |
262 |         except Exception as e:
263 |     pass
    |     ^
264 |     @patch("backend.settings.update_settings")
265 |     def test_config_update_endpoint(self, mock_update):
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:278:9
    |
277 |         try:
278 |         pass
    |         ^^^^
279 |             response = asyncio.run(post_update_config(update_data))
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:279:1
    |
277 |         try:
278 |         pass
279 |             response = asyncio.run(post_update_config(update_data))
    | ^^^^^^^^^^^^
280 |
281 |             assert response is not None
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:286:9
    |
284 |             mock_update.assert_called_once_with(update_data)
285 |
286 |         except Exception as e:
    |         ^^^^^^
287 |     pass
288 |     pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:286:26
    |
284 |             mock_update.assert_called_once_with(update_data)
285 |
286 |         except Exception as e:
    |                          ^^
287 |     pass
288 |     pass
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:286:31
    |
284 |             mock_update.assert_called_once_with(update_data)
285 |
286 |         except Exception as e:
    |                               ^
287 |     pass
288 |     pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:287:5
    |
286 |         except Exception as e:
287 |     pass
    |     ^
288 |     pass
289 | class TestErrorHandlingIntegration:
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:289:1
    |
287 |     pass
288 |     pass
289 | class TestErrorHandlingIntegration:
    | ^
290 |     """Test error handling across integrated components."""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:301:9
    |
300 |         try:
301 |         pass
    |         ^^^^
302 |             backend.backend.model_manager = None
303 |             backend.backend.emb_manager = None
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:302:1
    |
300 |         try:
301 |         pass
302 |             backend.backend.model_manager = None
    | ^^^^^^^^^^^^
303 |             backend.backend.emb_manager = None
304 |             from backend.backend import AskRequest, _ask_impl
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:310:13
    |
308 |             # Should handle missing services gracefully
309 |             try:
310 |             pass
    |             ^^^^
311 |                 _ask_impl(request)
312 |             except Exception as e:
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:311:1
    |
309 |             try:
310 |             pass
311 |                 _ask_impl(request)
    | ^^^^^^^^^^^^^^^^
312 |             except Exception as e:
313 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:312:13
    |
310 |             pass
311 |                 _ask_impl(request)
312 |             except Exception as e:
    |             ^^^^^^
313 |         pass
314 |         finally:
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:312:30
    |
310 |             pass
311 |                 _ask_impl(request)
312 |             except Exception as e:
    |                              ^^
313 |         pass
314 |         finally:
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:312:35
    |
310 |             pass
311 |                 _ask_impl(request)
312 |             except Exception as e:
    |                                   ^
313 |         pass
314 |         finally:
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:314:9
    |
312 |             except Exception as e:
313 |         pass
314 |         finally:
    |         ^^^^^^^
315 |         pass
316 |             # Restore original services
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:314:16
    |
312 |             except Exception as e:
313 |         pass
314 |         finally:
    |                ^
315 |         pass
316 |             # Restore original services
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:314:17
    |
312 |             except Exception as e:
313 |         pass
314 |         finally:
    |                 ^
315 |         pass
316 |             # Restore original services
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:317:1
    |
315 |         pass
316 |             # Restore original services
317 |             backend.backend.model_manager = original_mm
    | ^^^^^^^^^^^^
318 |             backend.backend.emb_manager = original_em
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:320:5
    |
318 |             backend.backend.emb_manager = original_em
319 |
320 |     @patch("backend.backend.model_manager")
    |     ^
321 |     def test_service_failure_handling(self, mock_mm):
322 |         """Test handling of service failures."""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_backend_integration.py:330:9
    |
329 |         try:
330 |         pass
    |         ^^^^
331 |             _ask_impl(request)
332 |         except Exception as e:
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_backend_integration.py:331:1
    |
329 |         try:
330 |         pass
331 |             _ask_impl(request)
    | ^^^^^^^^^^^^
332 |         except Exception as e:
333 |     pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:332:9
    |
330 |         pass
331 |             _ask_impl(request)
332 |         except Exception as e:
    |         ^^^^^^
333 |     pass
334 | if __name__ == "__main__":
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:332:26
    |
330 |         pass
331 |             _ask_impl(request)
332 |         except Exception as e:
    |                          ^^
333 |     pass
334 | if __name__ == "__main__":
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_backend_integration.py:332:31
    |
330 |         pass
331 |             _ask_impl(request)
332 |         except Exception as e:
    |                               ^
333 |     pass
334 | if __name__ == "__main__":
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:333:5
    |
331 |             _ask_impl(request)
332 |         except Exception as e:
333 |     pass
    |     ^
334 | if __name__ == "__main__":
335 |     pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_backend_integration.py:334:1
    |
332 |         except Exception as e:
333 |     pass
334 | if __name__ == "__main__":
    | ^
335 |     pass
336 |     # Run integration tests
    |

invalid-syntax: Expected an indented block after `with` statement
  --> tests\integration\test_e2e_workflows.py:31:9
   |
29 |         # Use real cache manager but mock AI services
30 |         with patch("backend.backend.init_services"):
31 |         pass
   |         ^^^^
32 |             with patch("backend.backend.model_manager") as mock_model, patch(
33 |                 "backend.backend.emb_manager"
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_e2e_workflows.py:32:1
   |
30 |         with patch("backend.backend.init_services"):
31 |         pass
32 |             with patch("backend.backend.model_manager") as mock_model, patch(
   | ^^^^^^^^^^^^
33 |                 "backend.backend.emb_manager"
34 |             ) as mock_emb, patch("backend.backend.vault_indexer") as mock_vault:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\integration\test_e2e_workflows.py:77:9
   |
75 |         ], f"Expected 200, 400, or 422, got {response.status_code}"
76 |         if response.status_code == 200:
77 |         pass
   |         ^^^^
78 |             indexed = response.json()
79 |             assert "indexed_files" in indexed
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_e2e_workflows.py:78:1
   |
76 |         if response.status_code == 200:
77 |         pass
78 |             indexed = response.json()
   | ^^^^^^^^^^^^
79 |             assert "indexed_files" in indexed
80 |         else:
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_e2e_workflows.py:80:9
   |
78 |             indexed = response.json()
79 |             assert "indexed_files" in indexed
80 |         else:
   |         ^^^^
81 |         pass
82 |             # Vault path doesn't exist - that's okay for this test
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_e2e_workflows.py:80:13
   |
78 |             indexed = response.json()
79 |             assert "indexed_files" in indexed
80 |         else:
   |             ^
81 |         pass
82 |             # Vault path doesn't exist - that's okay for this test
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_e2e_workflows.py:80:14
   |
78 |             indexed = response.json()
79 |             assert "indexed_files" in indexed
80 |         else:
   |              ^
81 |         pass
82 |             # Vault path doesn't exist - that's okay for this test
   |

invalid-syntax: Unexpected indentation
  --> tests\integration\test_e2e_workflows.py:83:1
   |
81 |         pass
82 |             # Vault path doesn't exist - that's okay for this test
83 |             assert response.json() is not None
   | ^^^^^^^^^^^^
84 |
85 |         # Step 4: Ask first question (should not be cached)
   |

invalid-syntax: Expected a statement
  --> tests\integration\test_e2e_workflows.py:86:9
   |
85 |         # Step 4: Ask first question (should not be cached)
86 |         first_question = {
   |         ^
87 |             "question": "What is machine learning?",
88 |             "prefer_fast": True,
   |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:116:5
    |
114 |         assert search_results["results"][0]["score"] > 0.9
115 |
116 |     def test_power_user_workflow(self, test_client_with_real_cache):
    |     ^
117 |         pass
118 |         """Test advanced power user workflow with performance monitoring"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_e2e_workflows.py:137:9
    |
135 |         answers = []
136 |         for question in questions:
137 |         pass
    |         ^^^^
138 |             response = client.post(
139 |                 "/api/ask",
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:138:1
    |
136 |         for question in questions:
137 |         pass
138 |             response = client.post(
    | ^^^^^^^^^^^^
139 |                 "/api/ask",
140 |                 json={"question": question, "prefer_fast": True, "max_tokens": 150},
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_e2e_workflows.py:148:9
    |
146 |         assert len(answers) == 5
147 |         for answer in answers:
148 |         pass
    |         ^^^^
149 |             assert "answer" in answer
150 |             assert answer["answer"].startswith("AI response to:")
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:149:1
    |
147 |         for answer in answers:
148 |         pass
149 |             assert "answer" in answer
    | ^^^^^^^^^^^^
150 |             assert answer["answer"].startswith("AI response to:")
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:153:9
    |
152 |         # Step 3: Check updated performance metrics
153 |         response = client.get("/api/performance/metrics")
    |         ^
154 |         assert response.status_code == 200
155 |         updated = response.json()["metrics"]
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_e2e_workflows.py:164:9
    |
163 |         for query in search_queries:
164 |         pass
    |         ^^^^
165 |             response = client.post("/api/search", params={"query": query, "top_k": 3})
166 |             assert response.status_code == 200
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:165:1
    |
163 |         for query in search_queries:
164 |         pass
165 |             response = client.post("/api/search", params={"query": query, "top_k": 3})
    | ^^^^^^^^^^^^
166 |             assert response.status_code == 200
167 |             results = response.json()
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:171:9
    |
170 |         # Step 5: Get cache statistics
171 |         response = client.get("/api/performance/cache/stats")
    |         ^
172 |         assert response.status_code == 200
173 |         cache_stats = response.json()["cache_stats"]
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:186:5
    |
184 |         assert optimization["status"] == "success"
185 |
186 |     def test_content_management_workflow(self, test_client_with_real_cache):
    |     ^
187 |         pass
188 |         """Test content management and reindexing workflow"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\integration\test_e2e_workflows.py:201:9
    |
199 |         scan_result = response.json()
200 |         if response.status_code == 200:
201 |         pass
    |         ^^^^
202 |             assert scan_result is not None
203 |         else:
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:202:1
    |
200 |         if response.status_code == 200:
201 |         pass
202 |             assert scan_result is not None
    | ^^^^^^^^^^^^
203 |         else:
204 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:203:9
    |
201 |         pass
202 |             assert scan_result is not None
203 |         else:
    |         ^^^^
204 |         pass
205 |             assert scan_result is not None  # Error response is still valid
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:203:13
    |
201 |         pass
202 |             assert scan_result is not None
203 |         else:
    |             ^
204 |         pass
205 |             assert scan_result is not None  # Error response is still valid
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:203:14
    |
201 |         pass
202 |             assert scan_result is not None
203 |         else:
    |              ^
204 |         pass
205 |             assert scan_result is not None  # Error response is still valid
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:205:1
    |
203 |         else:
204 |         pass
205 |             assert scan_result is not None  # Error response is still valid
    | ^^^^^^^^^^^^
206 |
207 |         # Step 2: Search for existing content
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:208:9
    |
207 |         # Step 2: Search for existing content
208 |         response = client.post(
    |         ^
209 |             "/api/search", params={"query": "machine learning", "top_k": 5}
210 |         )
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\integration\test_e2e_workflows.py:238:9
    |
236 |         pdf_result = response.json()
237 |         if response.status_code == 200:
238 |         pass
    |         ^^^^
239 |             assert "chunks_indexed" in pdf_result
240 |         else:
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:239:1
    |
237 |         if response.status_code == 200:
238 |         pass
239 |             assert "chunks_indexed" in pdf_result
    | ^^^^^^^^^^^^
240 |         else:
241 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:240:9
    |
238 |         pass
239 |             assert "chunks_indexed" in pdf_result
240 |         else:
    |         ^
241 |         pass
242 |             # Error response should contain detail
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:240:13
    |
238 |         pass
239 |             assert "chunks_indexed" in pdf_result
240 |         else:
    |             ^
241 |         pass
242 |             # Error response should contain detail
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:240:14
    |
238 |         pass
239 |             assert "chunks_indexed" in pdf_result
240 |         else:
    |              ^
241 |         pass
242 |             # Error response should contain detail
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:243:1
    |
241 |         pass
242 |             # Error response should contain detail
243 |             assert "detail" in pdf_result
    | ^^^^^^^^^^^^
244 |
245 |     def test_configuration_and_settings_workflow(self, test_client_with_real_cache):
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:245:5
    |
243 |             assert "detail" in pdf_result
244 |
245 |     def test_configuration_and_settings_workflow(self, test_client_with_real_cache):
    |     ^
246 |         pass
247 |         """Test configuration management workflow"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_e2e_workflows.py:305:9
    |
304 |         for endpoint, data in invalid_requests:
305 |         pass
    |         ^^^^
306 |             if endpoint == "/api/search":
307 |                 response = client.post(endpoint, params=data)
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:306:1
    |
304 |         for endpoint, data in invalid_requests:
305 |         pass
306 |             if endpoint == "/api/search":
    | ^^^^^^^^^^^^
307 |                 response = client.post(endpoint, params=data)
308 |             else:
    |

invalid-syntax: Expected an indented block after `else` clause
   --> tests\integration\test_e2e_workflows.py:309:13
    |
307 |                 response = client.post(endpoint, params=data)
308 |             else:
309 |             pass
    |             ^^^^
310 |                 response = client.post(endpoint, json=data)
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:310:1
    |
308 |             else:
309 |             pass
310 |                 response = client.post(endpoint, json=data)
    | ^^^^^^^^^^^^^^^^
311 |
312 |             # Should handle errors gracefully
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:313:9
    |
312 |             # Should handle errors gracefully
313 |         assert response.status_code in [
    |         ^
314 |             200,
315 |             400,
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:337:1
    |
337 | class TestPerformanceBenchmarks:
    | ^
338 |     pass
339 |     """Performance benchmarking integration tests"""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\integration\test_e2e_workflows.py:350:9
    |
349 |         with patch("backend.backend.init_services"):
350 |         pass
    |         ^^^^
351 |             # Fast mock responses for benchmarking
352 |             with patch("backend.backend.model_manager") as mock_model, patch(
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:352:1
    |
350 |         pass
351 |             # Fast mock responses for benchmarking
352 |             with patch("backend.backend.model_manager") as mock_model, patch(
    | ^^^^^^^^^^^^
353 |                 "backend.backend.emb_manager"
354 |             ) as mock_emb:
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\integration\test_e2e_workflows.py:355:13
    |
353 |                 "backend.backend.emb_manager"
354 |             ) as mock_emb:
355 |             pass
    |             ^^^^
356 |                 mock_model.generate.return_value = "Fast AI response"
357 |                 mock_emb.search.return_value = [{"text": "Result", "score": 0.9}]
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:356:1
    |
354 |             ) as mock_emb:
355 |             pass
356 |                 mock_model.generate.return_value = "Fast AI response"
    | ^^^^^^^^^^^^^^^^
357 |                 mock_emb.search.return_value = [{"text": "Result", "score": 0.9}]
358 |                 yield TestClient(app)
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:360:5
    |
358 |                 yield TestClient(app)
359 |
360 |     def test_concurrent_request_handling(self, benchmark_client):
    |     ^
361 |         """Test handling of concurrent requests"""
362 |         import threading
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_e2e_workflows.py:371:13
    |
369 |         def make_request(request_id):
370 |             try:
371 |             pass
    |             ^^^^
372 |                 start_time = time.time()
373 |                 response = client.post(
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:372:1
    |
370 |             try:
371 |             pass
372 |                 start_time = time.time()
    | ^^^^^^^^^^^^^^^^
373 |                 response = client.post(
374 |                     "/api/ask",
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:389:13
    |
387 |                     }
388 |                 )
389 |             except Exception as e:
    |             ^^^^^^
390 |             pass
391 |                 errors.append(f"Request {request_id}: {e}")
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:389:30
    |
387 |                     }
388 |                 )
389 |             except Exception as e:
    |                              ^^
390 |             pass
391 |                 errors.append(f"Request {request_id}: {e}")
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_e2e_workflows.py:389:35
    |
387 |                     }
388 |                 )
389 |             except Exception as e:
    |                                   ^
390 |             pass
391 |                 errors.append(f"Request {request_id}: {e}")
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:391:1
    |
389 |             except Exception as e:
390 |             pass
391 |                 errors.append(f"Request {request_id}: {e}")
    | ^^^^^^^^^^^^^^^^
392 |
393 |         # Launch 10 concurrent requests
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:394:9
    |
393 |         # Launch 10 concurrent requests
394 |         threads = []
    |         ^
395 |         for i in range(10):
396 |         pass
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_e2e_workflows.py:396:9
    |
394 |         threads = []
395 |         for i in range(10):
396 |         pass
    |         ^^^^
397 |             thread = threading.Thread(target=make_request, args=(i,))
398 |             threads.append(thread)
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:397:1
    |
395 |         for i in range(10):
396 |         pass
397 |             thread = threading.Thread(target=make_request, args=(i,))
    | ^^^^^^^^^^^^
398 |             threads.append(thread)
399 |             thread.start()
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:401:9
    |
399 |             thread.start()
400 |         # Wait for all to complete
401 |         for thread in threads:
    |         ^
402 |         pass
403 |             thread.join()
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_e2e_workflows.py:402:9
    |
400 |         # Wait for all to complete
401 |         for thread in threads:
402 |         pass
    |         ^^^^
403 |             thread.join()
404 |         # Analyze results
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:403:1
    |
401 |         for thread in threads:
402 |         pass
403 |             thread.join()
    | ^^^^^^^^^^^^
404 |         # Analyze results
405 |         assert len(errors) == 0, f"Errors occurred: {errors}"
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:405:9
    |
403 |             thread.join()
404 |         # Analyze results
405 |         assert len(errors) == 0, f"Errors occurred: {errors}"
    |         ^
406 |         assert len(results) == 10
407 |         # Most requests should succeed (allow for some model unavailability issues)
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:423:5
    |
421 |         ), f"Max response time too high: {max_response_time:.3f}s"
422 |
423 |     def test_cache_performance_benchmark(self, benchmark_client):
    |     ^
424 |         pass
425 |         """Benchmark cache performance improvements"""
    |

invalid-syntax: Expected an indented block after `try` statement
   --> tests\integration\test_e2e_workflows.py:453:9
    |
451 |         """Monitor memory usage during operations"""
452 |         try:
453 |         pass
    |         ^^^^
454 |             import os
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:454:1
    |
452 |         try:
453 |         pass
454 |             import os
    | ^^^^^^^^^^^^
455 |
456 |             import psutil
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:457:9
    |
456 |             import psutil
457 |         except ImportError:
    |         ^^^^^^
458 |         pass
459 |             pytest.skip("psutil package not available for memory monitoring")
    |

invalid-syntax: Expected an expression
   --> tests\integration\test_e2e_workflows.py:457:28
    |
456 |             import psutil
457 |         except ImportError:
    |                            ^
458 |         pass
459 |             pytest.skip("psutil package not available for memory monitoring")
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:459:1
    |
457 |         except ImportError:
458 |         pass
459 |             pytest.skip("psutil package not available for memory monitoring")
    | ^^^^^^^^^^^^
460 |
461 |         client = benchmark_client
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:461:9
    |
459 |             pytest.skip("psutil package not available for memory monitoring")
460 |
461 |         client = benchmark_client
    |         ^
462 |         process = psutil.Process(os.getpid())
463 |         # Get baseline memory
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\integration\test_e2e_workflows.py:467:9
    |
465 |         # Perform memory-intensive operations
466 |         for i in range(50):
467 |         pass
    |         ^^^^
468 |             response = client.post(
469 |                 "/api/ask",
    |

invalid-syntax: Unexpected indentation
   --> tests\integration\test_e2e_workflows.py:468:1
    |
466 |         for i in range(50):
467 |         pass
468 |             response = client.post(
    | ^^^^^^^^^^^^
469 |                 "/api/ask",
470 |                 json={
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:477:9
    |
475 |             assert response.status_code == 200
476 |         # Get final memory
477 |         final_memory = process.memory_info().rss / 1024 / 1024  # MB
    |         ^
478 |         memory_increase = final_memory - initial_memory
479 |         # Memory increase should be reasonable
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:485:5
    |
483 |         # Get performance metrics
484 |
485 |     def test_performance_metrics(self):
    |     ^
486 |         pass
487 |         from fastapi.testclient import TestClient
    |

invalid-syntax: Expected a statement
   --> tests\integration\test_e2e_workflows.py:498:1
    |
498 | if __name__ == "__main__":
    | ^
499 |     pass
500 |     pytest.main([__file__, "-v", "--tb=short"])
    |

E902 stream did not contain valid UTF-8
--> tests\integration\test_enterprise_integration.py:1:1

E902 stream did not contain valid UTF-8
--> tests\integration\test_full_workflow.py:1:1

E902 stream did not contain valid UTF-8
--> tests\integration\test_service_integration.py:1:1

invalid-syntax: Expected an indented block after `if` statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:28:9
   |
26 |         # Skip empty lines
27 |         if not line.strip():
28 |         pass
   |         ^^^^
29 |             fixed_lines.append("")
30 |             continue
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:29:1
   |
27 |         if not line.strip():
28 |         pass
29 |             fixed_lines.append("")
   | ^^^^^^^^^^^^
30 |             continue
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:42:9
   |
40 |         indent_match = re.match(r"^(\s*)", line_no_tabs)
41 |         if indent_match:
42 |         pass
   |         ^^^^
43 |             current_indent = indent_match.group(1)
44 |             # Convert 2-space indents to 4-space
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:43:1
   |
41 |         if indent_match:
42 |         pass
43 |             current_indent = indent_match.group(1)
   | ^^^^^^^^^^^^
44 |             # Convert 2-space indents to 4-space
45 |             if "  " in current_indent and "    " not in current_indent:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:46:13
   |
44 |             # Convert 2-space indents to 4-space
45 |             if "  " in current_indent and "    " not in current_indent:
46 |             pass
   |             ^^^^
47 |                 # This is likely 2-space indentation
48 |                 indent_level = len(current_indent) // 2
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:48:1
   |
46 |             pass
47 |                 # This is likely 2-space indentation
48 |                 indent_level = len(current_indent) // 2
   | ^^^^^^^^^^^^^^^^
49 |                 new_indent = "    " * indent_level
50 |                 fixed_line = new_indent + content_part
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:51:13
   |
49 |                 new_indent = "    " * indent_level
50 |                 fixed_line = new_indent + content_part
51 |             else:
   |             ^^^^
52 |             pass
53 |                 # Keep existing 4-space or handle mixed indentation
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:51:17
   |
49 |                 new_indent = "    " * indent_level
50 |                 fixed_line = new_indent + content_part
51 |             else:
   |                 ^
52 |             pass
53 |                 # Keep existing 4-space or handle mixed indentation
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:51:18
   |
49 |                 new_indent = "    " * indent_level
50 |                 fixed_line = new_indent + content_part
51 |             else:
   |                  ^
52 |             pass
53 |                 # Keep existing 4-space or handle mixed indentation
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:54:1
   |
52 |             pass
53 |                 # Keep existing 4-space or handle mixed indentation
54 |                 fixed_line = line_no_tabs
   | ^^^^^^^^^^^^^^^^
55 |         else:
56 |         pass
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:55:9
   |
53 |                 # Keep existing 4-space or handle mixed indentation
54 |                 fixed_line = line_no_tabs
55 |         else:
   |         ^
56 |         pass
57 |             fixed_line = line_no_tabs
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:55:13
   |
53 |                 # Keep existing 4-space or handle mixed indentation
54 |                 fixed_line = line_no_tabs
55 |         else:
   |             ^
56 |         pass
57 |             fixed_line = line_no_tabs
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:55:14
   |
53 |                 # Keep existing 4-space or handle mixed indentation
54 |                 fixed_line = line_no_tabs
55 |         else:
   |              ^
56 |         pass
57 |             fixed_line = line_no_tabs
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:57:1
   |
55 |         else:
56 |         pass
57 |             fixed_line = line_no_tabs
   | ^^^^^^^^^^^^
58 |
59 |         fixed_lines.append(fixed_line)
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:59:9
   |
57 |             fixed_line = line_no_tabs
58 |
59 |         fixed_lines.append(fixed_line)
   |         ^
60 |
61 |     return "\n".join(fixed_lines)
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:61:5
   |
59 |         fixed_lines.append(fixed_line)
60 |
61 |     return "\n".join(fixed_lines)
   |     ^
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_indentation.py:64:1
   |
64 | def improve_js_style(content):
   | ^
65 |     """
66 |     Apply PEP8-like style improvements to JavaScript
   |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:106:9
    |
104 |         # Write back the formatted content
105 |         with open(file_path, "w", encoding="utf-8") as f:
106 |         pass
    |         ^^^^
107 |             f.write(improved_content)
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:107:1
    |
105 |         with open(file_path, "w", encoding="utf-8") as f:
106 |         pass
107 |             f.write(improved_content)
    | ^^^^^^^^^^^^
108 |
109 |         return True
    |

invalid-syntax: Expected `except` or `finally` after `try` block
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:109:9
    |
107 |             f.write(improved_content)
108 |
109 |         return True
    |         ^^^^^^
110 |
111 |     except Exception as e:
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:111:5
    |
109 |         return True
110 |
111 |     except Exception as e:
    |     ^^^^^^
112 |         pass
113 |         return False
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:111:22
    |
109 |         return True
110 |
111 |     except Exception as e:
    |                      ^^
112 |         pass
113 |         return False
    |

invalid-syntax: Expected an expression
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:111:27
    |
109 |         return True
110 |
111 |     except Exception as e:
    |                           ^
112 |         pass
113 |         return False
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:112:1
    |
111 |     except Exception as e:
112 |         pass
    | ^^^^^^^^
113 |         return False
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:116:1
    |
116 | def main():
    | ^
117 |     """
118 |     Format all JavaScript files in the plugin directory
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:135:9
    |
133 |         pass
134 |         if format_javascript_file(js_file):
135 |         pass
    |         ^^^^
136 |             success_count += 1
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:136:1
    |
134 |         if format_javascript_file(js_file):
135 |         pass
136 |             success_count += 1
    | ^^^^^^^^^^^^
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:140:5
    |
139 |     if success_count == len(js_files):
140 |     pass
    |     ^^^^
141 |     else:
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:141:5
    |
139 |     if success_count == len(js_files):
140 |     pass
141 |     else:
    |     ^^^^
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:141:9
    |
139 |     if success_count == len(js_files):
140 |     pass
141 |     else:
    |         ^
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:141:10
    |
139 |     if success_count == len(js_files):
140 |     pass
141 |     else:
    |          ^
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_indentation.py:144:1
    |
144 | if __name__ == "__main__":
    | ^
145 |     pass
146 |     main()
    |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:49:9
   |
48 |         if leading_spaces > 0:
49 |         pass
   |         ^^^^
50 |             # Round to nearest 4-space multiple
51 |             corrected_spaces = (leading_spaces + 2) // 4 * 4
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_quality.py:51:1
   |
49 |         pass
50 |             # Round to nearest 4-space multiple
51 |             corrected_spaces = (leading_spaces + 2) // 4 * 4
   | ^^^^^^^^^^^^
52 |             # But don't reduce indentation too much - preserve basic structure
53 |             if corrected_spaces < leading_spaces - 2:
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:54:13
   |
52 |             # But don't reduce indentation too much - preserve basic structure
53 |             if corrected_spaces < leading_spaces - 2:
54 |             pass
   |             ^^^^
55 |                 corrected_spaces = leading_spaces
56 |             fixed_line = " " * corrected_spaces + content_part
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_quality.py:55:1
   |
53 |             if corrected_spaces < leading_spaces - 2:
54 |             pass
55 |                 corrected_spaces = leading_spaces
   | ^^^^^^^^^^^^^^^^
56 |             fixed_line = " " * corrected_spaces + content_part
57 |         else:
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:57:9
   |
55 |                 corrected_spaces = leading_spaces
56 |             fixed_line = " " * corrected_spaces + content_part
57 |         else:
   |         ^^^^
58 |         pass
59 |             fixed_line = line
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:57:13
   |
55 |                 corrected_spaces = leading_spaces
56 |             fixed_line = " " * corrected_spaces + content_part
57 |         else:
   |             ^
58 |         pass
59 |             fixed_line = line
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:57:14
   |
55 |                 corrected_spaces = leading_spaces
56 |             fixed_line = " " * corrected_spaces + content_part
57 |         else:
   |              ^
58 |         pass
59 |             fixed_line = line
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_quality.py:59:1
   |
57 |         else:
58 |         pass
59 |             fixed_line = line
   | ^^^^^^^^^^^^
60 |
61 |         fixed_lines.append(fixed_line)
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:61:9
   |
59 |             fixed_line = line
60 |
61 |         fixed_lines.append(fixed_line)
   |         ^
62 |
63 |     return "\n".join(fixed_lines)
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:63:5
   |
61 |         fixed_lines.append(fixed_line)
62 |
63 |     return "\n".join(fixed_lines)
   |     ^
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:66:1
   |
66 | def fix_quotes_to_double(content):
   | ^
67 |     """Convert single quotes to double quotes where reasonable"""
68 |     # This is a simple approach - more sophisticated parsing would be better
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:80:9
   |
78 |         # If the inner content contains double quotes, keep single quotes
79 |         if '"' in inner_content:
80 |         pass
   |         ^^^^
81 |             return match.group(0)
82 |         else:
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_quality.py:81:1
   |
79 |         if '"' in inner_content:
80 |         pass
81 |             return match.group(0)
   | ^^^^^^^^^^^^
82 |         else:
83 |         pass
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:82:9
   |
80 |         pass
81 |             return match.group(0)
82 |         else:
   |         ^^^^
83 |         pass
84 |             # Replace with double quotes
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:82:13
   |
80 |         pass
81 |             return match.group(0)
82 |         else:
   |             ^
83 |         pass
84 |             # Replace with double quotes
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:82:14
   |
80 |         pass
81 |             return match.group(0)
82 |         else:
   |              ^
83 |         pass
84 |             # Replace with double quotes
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\fix_js_quality.py:85:1
   |
83 |         pass
84 |             # Replace with double quotes
85 |             return f'"{inner_content}"'
   | ^^^^^^^^^^^^
86 |
87 |     content = re.sub(single_quote_pattern, replace_single_quote, content)
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:87:5
   |
85 |             return f'"{inner_content}"'
86 |
87 |     content = re.sub(single_quote_pattern, replace_single_quote, content)
   |     ^
88 |
89 |     return content
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\fix_js_quality.py:92:1
   |
92 | def add_basic_error_handling(content):
   | ^
93 |     pass
94 |     """Add basic try-catch blocks to functions that lack error handling"""
   |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:111:9
    |
109 |         # Detect async function start
110 |         if re.match(r"\s*async\s+\w+\s*\([^)]*\)\s*{", stripped):
111 |         pass
    |         ^^^^
112 |             in_async_function = True
113 |             function_indent = len(line) - len(line.lstrip())
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_quality.py:112:1
    |
110 |         if re.match(r"\s*async\s+\w+\s*\([^)]*\)\s*{", stripped):
111 |         pass
112 |             in_async_function = True
    | ^^^^^^^^^^^^
113 |             function_indent = len(line) - len(line.lstrip())
114 |             needs_try_catch = True
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:119:9
    |
118 |         # Detect if function already has try-catch
119 |         elif in_async_function and "try" in stripped:
    |         ^^^^
120 |         pass
121 |             has_try_catch = True
    |

invalid-syntax: Invalid annotated assignment target
   --> tests\obsidian-ai-assistant\fix_js_quality.py:119:14
    |
118 |         # Detect if function already has try-catch
119 |         elif in_async_function and "try" in stripped:
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
120 |         pass
121 |             has_try_catch = True
    |

invalid-syntax: Expected an expression
   --> tests\obsidian-ai-assistant\fix_js_quality.py:119:54
    |
118 |         # Detect if function already has try-catch
119 |         elif in_async_function and "try" in stripped:
    |                                                      ^
120 |         pass
121 |             has_try_catch = True
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_quality.py:121:1
    |
119 |         elif in_async_function and "try" in stripped:
120 |         pass
121 |             has_try_catch = True
    | ^^^^^^^^^^^^
122 |             fixed_lines.append(line)
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:125:9
    |
124 |         # Detect end of function
125 |         elif (
    |         ^^^^
126 |             in_async_function
127 |             and stripped == "}"
    |

invalid-syntax: Invalid annotated assignment target
   --> tests\obsidian-ai-assistant\fix_js_quality.py:126:13
    |
124 |           # Detect end of function
125 |           elif (
126 | /             in_async_function
127 | |             and stripped == "}"
128 | |             and len(line) - len(line.lstrip()) == function_indent
    | |_________________________________________________________________^
129 |           ):
130 |           pass
    |

invalid-syntax: Expected an expression
   --> tests\obsidian-ai-assistant\fix_js_quality.py:129:11
    |
127 |             and stripped == "}"
128 |             and len(line) - len(line.lstrip()) == function_indent
129 |         ):
    |           ^
130 |         pass
131 |             # End of function - add try-catch if needed
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_quality.py:132:1
    |
130 |         pass
131 |             # End of function - add try-catch if needed
132 |             if needs_try_catch and not has_try_catch and len(fixed_lines) > 1:
    | ^^^^^^^^^^^^
133 |             pass
134 |                 # Insert try-catch around function body
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:133:13
    |
131 |             # End of function - add try-catch if needed
132 |             if needs_try_catch and not has_try_catch and len(fixed_lines) > 1:
133 |             pass
    |             ^^^^
134 |                 # Insert try-catch around function body
135 |                 function_start_idx = len(fixed_lines) - 1
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_quality.py:135:1
    |
133 |             pass
134 |                 # Insert try-catch around function body
135 |                 function_start_idx = len(fixed_lines) - 1
    | ^^^^^^^^^^^^^^^^
136 |                 while (
137 |                     function_start_idx > 0
    |

invalid-syntax: Expected an indented block after `while` statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:139:19
    |
137 |                     function_start_idx > 0
138 |                     and "async" not in fixed_lines[function_start_idx]
139 |                 ):
    |                   ^
140 |             pass
141 |                     function_start_idx -= 1
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:140:13
    |
138 |                     and "async" not in fixed_lines[function_start_idx]
139 |                 ):
140 |             pass
    |             ^
141 |                     function_start_idx -= 1
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_quality.py:141:1
    |
139 |                 ):
140 |             pass
141 |                     function_start_idx -= 1
    | ^^^^^^^^^^^^^^^^^^^^
142 |
143 |                 # Simple approach: just add a catch block before the closing brace
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\obsidian-ai-assistant\fix_js_quality.py:144:1
    |
143 |                 # Simple approach: just add a catch block before the closing brace
144 |                 indent = " " * (function_indent + 4)
    | ^^^^^^^^^^^^^^^^
145 |                 catch_block = [
146 |                     indent + "} catch (error) {",
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_quality.py:145:1
    |
143 |                 # Simple approach: just add a catch block before the closing brace
144 |                 indent = " " * (function_indent + 4)
145 |                 catch_block = [
    | ^^^^^^^^^^^^^^^^
146 |                     indent + "} catch (error) {",
147 |                     indent + '    console.error("Error:", error);',
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:152:47
    |
151 |                 # Insert catch block before closing brace
152 |                 for catch_line in catch_block:
    |                                               ^
153 |             pass
154 |                     fixed_lines.append(catch_line)
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:153:13
    |
151 |                 # Insert catch block before closing brace
152 |                 for catch_line in catch_block:
153 |             pass
    |             ^
154 |                     fixed_lines.append(catch_line)
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_quality.py:154:1
    |
152 |                 for catch_line in catch_block:
153 |             pass
154 |                     fixed_lines.append(catch_line)
    | ^^^^^^^^^^^^^^^^^^^^
155 |
156 |             fixed_lines.append(line)
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:156:13
    |
154 |                     fixed_lines.append(catch_line)
155 |
156 |             fixed_lines.append(line)
    |             ^
157 |             in_async_function = False
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:159:9
    |
157 |             in_async_function = False
158 |
159 |         else:
    |         ^
160 |         pass
161 |             fixed_lines.append(line)
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:159:13
    |
157 |             in_async_function = False
158 |
159 |         else:
    |             ^
160 |         pass
161 |             fixed_lines.append(line)
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:159:14
    |
157 |             in_async_function = False
158 |
159 |         else:
    |              ^
160 |         pass
161 |             fixed_lines.append(line)
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\fix_js_quality.py:161:1
    |
159 |         else:
160 |         pass
161 |             fixed_lines.append(line)
    | ^^^^^^^^^^^^
162 |
163 |         i += 1
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:163:9
    |
161 |             fixed_lines.append(line)
162 |
163 |         i += 1
    |         ^
164 |
165 |     return "\n".join(fixed_lines)
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:165:5
    |
163 |         i += 1
164 |
165 |     return "\n".join(fixed_lines)
    |     ^
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\fix_js_quality.py:168:1
    |
168 | def fix_typos(content):
    | ^
169 |     """Fix common typos in the code"""
170 |     # Fix the typo in voice.js: stopRecordiing -> stopRecording
    |

invalid-syntax: Expected an indented block after `except` clause
   --> tests\obsidian-ai-assistant\fix_js_quality.py:232:31
    |
230 |         try:
231 |             process_js_file(js_file)
232 |         except Exception as e:
    |                               ^
233 |     pass
234 | if __name__ == "__main__":
    |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:52:9
   |
51 |         for file in required_files:
52 |         pass
   |         ^^^^
53 |             file_path = plugin_dir / file
54 |             assert file_path.exists(), f"Required file {file} should exist"
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:53:1
   |
51 |         for file in required_files:
52 |         pass
53 |             file_path = plugin_dir / file
   | ^^^^^^^^^^^^
54 |             assert file_path.exists(), f"Required file {file} should exist"
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:59:9
   |
57 |         """Test that JavaScript files are not empty"""
58 |         for js_file in js_files:
59 |         pass
   |         ^^^^
60 |             content = js_file.read_text(encoding="utf-8")
61 |             assert (
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:60:1
   |
58 |         for js_file in js_files:
59 |         pass
60 |             content = js_file.read_text(encoding="utf-8")
   | ^^^^^^^^^^^^
61 |             assert (
62 |                 len(content.strip()) > 0
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:65:5
   |
63 |             ), f"JavaScript file {js_file.name} should not be empty"
64 |
65 |     def test_js_syntax_validity(self, js_files):
   |     ^
66 |         """Test JavaScript syntax validity using Node.js syntax check"""
67 |         for js_file in js_files:
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:68:9
   |
66 |         """Test JavaScript syntax validity using Node.js syntax check"""
67 |         for js_file in js_files:
68 |         pass
   |         ^^^^
69 |             try:
70 |                 # Use Node.js to check syntax
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:69:1
   |
67 |         for js_file in js_files:
68 |         pass
69 |             try:
   | ^^^^^^^^^^^^
70 |                 # Use Node.js to check syntax
71 |                 result = subprocess.run(
   |

invalid-syntax: Expected an indented block after `except` clause
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:81:13
   |
79 |                 ), f"JavaScript file {js_file.name} has syntax errors: {result.stderr}"
80 |             except FileNotFoundError:
81 |             pass
   |             ^^^^
82 |                 # Skip if Node.js is not available
83 |                 pytest.skip("Node.js not available for syntax checking")
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:83:1
   |
81 |             pass
82 |                 # Skip if Node.js is not available
83 |                 pytest.skip("Node.js not available for syntax checking")
   | ^^^^^^^^^^^^^^^^
84 |
85 |     def test_indentation_consistency(self, js_files):
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:85:5
   |
83 |                 pytest.skip("Node.js not available for syntax checking")
84 |
85 |     def test_indentation_consistency(self, js_files):
   |     ^
86 |         pass
87 |         """Test that JavaScript files use consistent 4-space indentation"""
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:89:9
   |
87 |         """Test that JavaScript files use consistent 4-space indentation"""
88 |         for js_file in js_files:
89 |         pass
   |         ^^^^
90 |             content = js_file.read_text(encoding="utf-8")
91 |             lines = content.split("\n")
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:90:1
   |
88 |         for js_file in js_files:
89 |         pass
90 |             content = js_file.read_text(encoding="utf-8")
   | ^^^^^^^^^^^^
91 |             lines = content.split("\n")
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:94:13
   |
93 |             for line_num, line in enumerate(lines, 1):
94 |             pass
   |             ^^^^
95 |                 if line.strip():  # Skip empty lines
96 |                     # Check for tabs (should be converted to spaces)
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_js_code_quality.py:95:1
   |
93 |             for line_num, line in enumerate(lines, 1):
94 |             pass
95 |                 if line.strip():  # Skip empty lines
   | ^^^^^^^^^^^^^^^^
96 |                     # Check for tabs (should be converted to spaces)
97 |                     assert (
   |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:103:43
    |
101 |                     # Check for consistent indentation (multiples of 4 spaces)
102 |                     leading_spaces = len(line) - len(line.lstrip())
103 |                     if leading_spaces > 0:
    |                                           ^
104 |                 pass
105 |                         assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:105:1
    |
103 |                     if leading_spaces > 0:
104 |                 pass
105 |                         assert (
    | ^^^^^^^^^^^^^^^^^^^^^^^^
106 |                             leading_spaces % 4 == 0
107 |                         ), f"File {js_file.name} line {line_num} has inconsistent indentation ({leading_spaces} spaces)"
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:109:5
    |
107 |                         ), f"File {js_file.name} line {line_num} has inconsistent indentation ({leading_spaces} spaces)"
108 |
109 |     def test_no_trailing_whitespace(self, js_files):
    |     ^
110 |         """Test that JavaScript files have no trailing whitespace"""
111 |         for js_file in js_files:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:112:9
    |
110 |         """Test that JavaScript files have no trailing whitespace"""
111 |         for js_file in js_files:
112 |         pass
    |         ^^^^
113 |             content = js_file.read_text(encoding="utf-8")
114 |             lines = content.split("\n")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:113:1
    |
111 |         for js_file in js_files:
112 |         pass
113 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
114 |             lines = content.split("\n")
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:117:13
    |
116 |             for line_num, line in enumerate(lines, 1):
117 |             pass
    |             ^^^^
118 |                 if line:  # Skip completely empty lines
119 |                     assert not line.endswith(" ") and not line.endswith(
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:118:1
    |
116 |             for line_num, line in enumerate(lines, 1):
117 |             pass
118 |                 if line:  # Skip completely empty lines
    | ^^^^^^^^^^^^^^^^
119 |                     assert not line.endswith(" ") and not line.endswith(
120 |                         "\t"
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:123:5
    |
121 |                     ), f"File {js_file.name} line {line_num} has trailing whitespace"
122 |
123 |     def test_consistent_quotes(self, js_files):
    |     ^
124 |         pass
125 |         """Test for quote usage patterns (informational)"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:127:9
    |
125 |         """Test for quote usage patterns (informational)"""
126 |         for js_file in js_files:
127 |         pass
    |         ^^^^
128 |             content = js_file.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:128:1
    |
126 |         for js_file in js_files:
127 |         pass
128 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
129 |
130 |             # Count single vs double quotes (excluding those in strings)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:136:13
    |
134 |             # Just report the ratio, don't fail the test
135 |             if single_quotes > 0 or double_quotes > 0:
136 |             pass
    |             ^^^^
137 |                 total = single_quotes + double_quotes
138 |                 single_ratio = single_quotes / total if total > 0 else 0
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:137:1
    |
135 |             if single_quotes > 0 or double_quotes > 0:
136 |             pass
137 |                 total = single_quotes + double_quotes
    | ^^^^^^^^^^^^^^^^
138 |                 single_ratio = single_quotes / total if total > 0 else 0
139 |                 print(
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:146:5
    |
144 |             assert True
145 |
146 |     def test_class_definitions(self, js_files):
    |     ^
147 |         pass
148 |         """Test that classes are properly defined"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:150:9
    |
148 |         """Test that classes are properly defined"""
149 |         for js_file in js_files:
150 |         pass
    |         ^^^^
151 |             content = js_file.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:151:1
    |
149 |         for js_file in js_files:
150 |         pass
151 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
152 |
153 |             # Find class definitions
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:159:13
    |
158 |             for class_name in class_matches:
159 |             pass
    |             ^^^^
160 |                 # Class names should be PascalCase
161 |                 assert class_name[
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:161:1
    |
159 |             pass
160 |                 # Class names should be PascalCase
161 |                 assert class_name[
    | ^^^^^^^^^^^^^^^^
162 |                     0
163 |                 ].isupper(), (
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:170:5
    |
168 |                 ), f"Class {class_name} in {js_file.name} should be PascalCase"
169 |
170 |     def test_function_definitions(self, js_files):
    |     ^
171 |         pass
172 |         """Test that functions are properly defined"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:174:9
    |
172 |         """Test that functions are properly defined"""
173 |         for js_file in js_files:
174 |         pass
    |         ^^^^
175 |             content = js_file.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:175:1
    |
173 |         for js_file in js_files:
174 |         pass
175 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
176 |
177 |             # Find function definitions (both function declarations and methods)
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:183:13
    |
182 |             for func_name in function_matches:
183 |             pass
    |             ^^^^
184 |                 # Skip constructors and special methods
185 |                 if func_name in ["constructor", "require", "module", "exports"]:
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:185:1
    |
183 |             pass
184 |                 # Skip constructors and special methods
185 |                 if func_name in ["constructor", "require", "module", "exports"]:
    | ^^^^^^^^^^^^^^^^
186 |             pass
187 |                     continue
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:185:81
    |
183 |             pass
184 |                 # Skip constructors and special methods
185 |                 if func_name in ["constructor", "require", "module", "exports"]:
    |                                                                                 ^
186 |             pass
187 |                     continue
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:187:1
    |
185 |                 if func_name in ["constructor", "require", "module", "exports"]:
186 |             pass
187 |                     continue
    | ^^^^^^^^^^^^^^^^^^^^
188 |
189 |                 # Function names should be camelCase
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:190:1
    |
189 |                 # Function names should be camelCase
190 |                 if func_name[0].isupper():
    | ^^^^^^^^^^^^^^^^
191 |             pass
192 |                     # This might be a class name, skip
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:191:13
    |
189 |                 # Function names should be camelCase
190 |                 if func_name[0].isupper():
191 |             pass
    |             ^^^^
192 |                     # This might be a class name, skip
193 |                     continue
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:193:1
    |
191 |             pass
192 |                     # This might be a class name, skip
193 |                     continue
    | ^^^^^^^^^^^^^^^^^^^^
194 |
195 |                 assert func_name[
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:195:1
    |
193 |                     continue
194 |
195 |                 assert func_name[
    | ^^^^^^^^^^^^^^^^
196 |                     0
197 |                 ].islower(), f"Function {func_name} in {js_file.name} should start with lowercase"
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:199:5
    |
197 |                 ].islower(), f"Function {func_name} in {js_file.name} should start with lowercase"
198 |
199 |     def test_console_log_usage(self, js_files):
    |     ^
200 |         pass
201 |         """Test that console.log usage is reasonable (not excessive)"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:203:9
    |
201 |         """Test that console.log usage is reasonable (not excessive)"""
202 |         for js_file in js_files:
203 |         pass
    |         ^^^^
204 |             content = js_file.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:204:1
    |
202 |         for js_file in js_files:
203 |         pass
204 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
205 |
206 |             console_logs = len(re.findall(r"console\.log\s*\(", content))
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:216:5
    |
214 |                 ), f"File {js_file.name} has too many console.log statements ({console_logs} in {lines_count} lines)"
215 |
216 |     def test_error_handling(self, js_files):
    |     ^
217 |         pass
218 |         """Test that files contain proper error handling"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:220:9
    |
218 |         """Test that files contain proper error handling"""
219 |         for js_file in js_files:
220 |         pass
    |         ^^^^
221 |             content = js_file.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:221:1
    |
219 |         for js_file in js_files:
220 |         pass
221 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
222 |
223 |             # Check for try-catch blocks in substantial files
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:230:41
    |
228 |                 try_catch_count = len(re.findall(r"try\s*{", content))
229 |                 # More lenient - just warn if no error handling
230 |                 if try_catch_count == 0:
    |                                         ^
231 |             pass
232 |                     print(
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:232:1
    |
230 |                 if try_catch_count == 0:
231 |             pass
232 |                     print(
    | ^^^^^^^^^^^^^^^^^^^^
233 |                         f"Warning: {js_file.name} might benefit from error handling (try-catch blocks)"
234 |                     )
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:236:1
    |
234 |                     )
235 |                 # Don't fail the test, just check that we can detect error handling patterns
236 |                 assert True  # Always pass but still run the check
    | ^^^^^^^^^^^^^^^^
237 |
238 |     def test_module_exports(self, js_files):
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:238:5
    |
236 |                 assert True  # Always pass but still run the check
237 |
238 |     def test_module_exports(self, js_files):
    |     ^
239 |         pass
240 |         """Test that files properly export modules"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:242:9
    |
240 |         """Test that files properly export modules"""
241 |         for js_file in js_files:
242 |         pass
    |         ^^^^
243 |             content = js_file.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:243:1
    |
241 |         for js_file in js_files:
242 |         pass
243 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
244 |
245 |             # Skip main.js and other entry files
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:247:13
    |
245 |             # Skip main.js and other entry files
246 |             if js_file.name in ["main.js", "main_new.js", "main_old.js"]:
247 |             pass
    |             ^^^^
248 |                 continue
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:248:1
    |
246 |             if js_file.name in ["main.js", "main_new.js", "main_old.js"]:
247 |             pass
248 |                 continue
    | ^^^^^^^^^^^^^^^^
249 |
250 |             # Check for module.exports
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:258:13
    |
257 |             if has_classes or has_functions:
258 |             pass
    |             ^^^^
259 |                 assert (
260 |                     has_exports
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:259:1
    |
257 |             if has_classes or has_functions:
258 |             pass
259 |                 assert (
    | ^^^^^^^^^^^^^^^^
260 |                     has_exports
261 |                 ), f"File {js_file.name} defines classes/functions but doesn't export them"
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:264:1
    |
264 | class TestJavaScriptFunctionality:
    | ^
265 |     """Test JavaScript functionality and structure"""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:278:9
    |
277 |         with open(manifest_path, "r", encoding="utf-8") as f:
278 |         pass
    |         ^^^^
279 |             manifest = json.load(f)
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:279:1
    |
277 |         with open(manifest_path, "r", encoding="utf-8") as f:
278 |         pass
279 |             manifest = json.load(f)
    | ^^^^^^^^^^^^
280 |
281 |         required_fields = ["id", "name", "version", "description", "main"]
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:283:9
    |
281 |         required_fields = ["id", "name", "version", "description", "main"]
282 |         for field in required_fields:
283 |         pass
    |         ^^^^
284 |             assert field in manifest, f"manifest.json should contain '{field}' field"
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:284:1
    |
282 |         for field in required_fields:
283 |         pass
284 |             assert field in manifest, f"manifest.json should contain '{field}' field"
    | ^^^^^^^^^^^^
285 |
286 |         assert manifest["main"] == "main.js", "manifest should point to main.js"
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:288:5
    |
286 |         assert manifest["main"] == "main.js", "manifest should point to main.js"
287 |
288 |     def test_main_js_structure(self, plugin_dir):
    |     ^
289 |         pass
290 |         """Test main.js file structure"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:323:9
    |
322 |         for file_name in enterprise_files:
323 |         pass
    |         ^^^^
324 |             file_path = plugin_dir / file_name
325 |             content = file_path.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:324:1
    |
322 |         for file_name in enterprise_files:
323 |         pass
324 |             file_path = plugin_dir / file_name
    | ^^^^^^^^^^^^
325 |             content = file_path.read_text(encoding="utf-8")
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:334:5
    |
332 |             assert "module.exports" in content, f"{file_name} should export its class"
333 |
334 |     def test_voice_functionality(self, plugin_dir):
    |     ^
335 |         """Test voice-related functionality"""
336 |         voice_files = ["voice.js", "voiceInput.js"]
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:339:9
    |
338 |         for file_name in voice_files:
339 |         pass
    |         ^^^^
340 |             file_path = plugin_dir / file_name
341 |             content = file_path.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:340:1
    |
338 |         for file_name in voice_files:
339 |         pass
340 |             file_path = plugin_dir / file_name
    | ^^^^^^^^^^^^
341 |             content = file_path.read_text(encoding="utf-8")
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:345:13
    |
343 |             # Should handle media/audio
344 |             if "voice.js" in file_name:
345 |             pass
    |             ^^^^
346 |                 assert (
347 |                     "mediaRecorder" in content or "MediaRecorder" in content
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:346:1
    |
344 |             if "voice.js" in file_name:
345 |             pass
346 |                 assert (
    | ^^^^^^^^^^^^^^^^
347 |                     "mediaRecorder" in content or "MediaRecorder" in content
348 |                 ), "voice.js should handle media recording"
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:364:1
    |
364 | class TestJavaScriptSecurity:
    | ^
365 |     pass
366 |     """Test JavaScript security practices"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:387:9
    |
386 |         for js_file in js_files:
387 |         pass
    |         ^^^^
388 |             content = js_file.read_text(encoding="utf-8").lower()
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:388:1
    |
386 |         for js_file in js_files:
387 |         pass
388 |             content = js_file.read_text(encoding="utf-8").lower()
    | ^^^^^^^^^^^^
389 |
390 |             for pattern in secret_patterns:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:391:13
    |
390 |             for pattern in secret_patterns:
391 |             pass
    |             ^^^^
392 |                 matches = re.findall(pattern, content)
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:392:1
    |
390 |             for pattern in secret_patterns:
391 |             pass
392 |                 matches = re.findall(pattern, content)
    | ^^^^^^^^^^^^^^^^
393 |
394 |                 for match in matches:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:394:38
    |
392 |                 matches = re.findall(pattern, content)
393 |
394 |                 for match in matches:
    |                                      ^
395 |             pass
396 |                     # More sophisticated check - exclude common false positives
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:397:1
    |
395 |             pass
396 |                     # More sophisticated check - exclude common false positives
397 |                     if any(
    | ^^^^^^^^^^^^^^^^^^^^
398 |                         word in match
399 |                         for word in ["error", "console", "log", "message", "debug"]
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:401:1
    |
399 |                         for word in ["error", "console", "log", "message", "debug"]
400 |                     ):
401 |                 pass
    | ^^^^^^^^^^^^^^^^
402 |                         continue  # Skip error handling patterns
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:402:1
    |
400 |                     ):
401 |                 pass
402 |                         continue  # Skip error handling patterns
    | ^^^^^^^^^^^^^^^^^^^^^^^^
403 |
404 |                     print(
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:404:1
    |
402 |                         continue  # Skip error handling patterns
403 |
404 |                     print(
    | ^^^^^^^^^^^^^^^^^^^^
405 |                         f"Warning: Potential hardcoded credential in {js_file.name}: {match[:50]}..."
406 |                     )
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:410:5
    |
408 |                     # assert False, f"Possible hardcoded secret in {js_file.name}: {match}"
409 |
410 |     def test_safe_eval_usage(self, js_files):
    |     ^
411 |         """Test that eval() is not used unsafely"""
412 |         for js_file in js_files:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:413:9
    |
411 |         """Test that eval() is not used unsafely"""
412 |         for js_file in js_files:
413 |         pass
    |         ^^^^
414 |             content = js_file.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:414:1
    |
412 |         for js_file in js_files:
413 |         pass
414 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
415 |
416 |             # Check for eval usage
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:422:5
    |
420 |             ), f"File {js_file.name} uses eval() which is unsafe"
421 |
422 |     def test_dom_manipulation_safety(self, js_files):
    |     ^
423 |         pass
424 |         """Test that DOM manipulation is done safely"""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:426:9
    |
424 |         """Test that DOM manipulation is done safely"""
425 |         for js_file in js_files:
426 |         pass
    |         ^^^^
427 |             content = js_file.read_text(encoding="utf-8")
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:427:1
    |
425 |         for js_file in js_files:
426 |         pass
427 |             content = js_file.read_text(encoding="utf-8")
    | ^^^^^^^^^^^^
428 |
429 |             # Check for innerHTML usage (potentially unsafe)
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:432:13
    |
430 |             innerHTML_matches = re.findall(r"\.innerHTML\s*=", content)
431 |             if innerHTML_matches:
432 |             pass
    |             ^^^^
433 |                 # Should use textContent or proper sanitization
434 |                 assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:434:1
    |
432 |             pass
433 |                 # Should use textContent or proper sanitization
434 |                 assert (
    | ^^^^^^^^^^^^^^^^
435 |                     "createEl" in content or "textContent" in content
436 |                 ), f"File {js_file.name} uses innerHTML without proper sanitization"
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:439:1
    |
439 | def run_js_tests():
    | ^
440 |     pass
441 |     """Run all JavaScript tests"""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_js_code_quality.py:450:30
    |
448 |                 ["pytest", test_file, "-v"], capture_output=True, text=True
449 |             )
450 |             if result.stderr:
    |                              ^
451 |     pass
452 | if __name__ == "__main__":
    |

E902 stream did not contain valid UTF-8
--> tests\obsidian-ai-assistant\test_plugin_functionality.py:1:1

E902 stream did not contain valid UTF-8
--> tests\obsidian-ai-assistant\test_plugin_python.py:1:1

invalid-syntax: Expected an indented block after `with` statement
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:34:9
   |
33 |         with open(manifest_path, "r") as f:
34 |         pass
   |         ^^^^
35 |             manifest = json.load(f)
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:35:1
   |
33 |         with open(manifest_path, "r") as f:
34 |         pass
35 |             manifest = json.load(f)
   | ^^^^^^^^^^^^
36 |
37 |         # Check required manifest fields
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:47:9
   |
45 |         ]
46 |         for field in required_fields:
47 |         pass
   |         ^^^^
48 |             assert field in manifest, f"manifest.json missing required field: {field}"
49 |             assert manifest[field], f"manifest.json field {field} should not be empty"
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:48:1
   |
46 |         for field in required_fields:
47 |         pass
48 |             assert field in manifest, f"manifest.json missing required field: {field}"
   | ^^^^^^^^^^^^
49 |             assert manifest[field], f"manifest.json field {field} should not be empty"
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:58:5
   |
56 |         ), "Version should follow semantic versioning"
57 |
58 |     def test_main_js_exists(self):
   |     ^
59 |         pass
60 |         """Test that main.js exists and has basic structure."""
   |

invalid-syntax: Expected an indented block after `with` statement
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:65:9
   |
64 |         with open(main_path, "r", encoding="utf-8") as f:
65 |         pass
   |         ^^^^
66 |             content = f.read()
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:66:1
   |
64 |         with open(main_path, "r", encoding="utf-8") as f:
65 |         pass
66 |             content = f.read()
   | ^^^^^^^^^^^^
67 |
68 |         assert len(content) > 1000, "main.js should contain substantial code"
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:75:5
   |
75 |     def test_essential_plugin_files_exist(self):
   |     ^
76 |         """Test that all essential plugin files exist."""
77 |         essential_files = [
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:90:9
   |
88 |         missing_files = []
89 |         for filename in essential_files:
90 |         pass
   |         ^^^^
91 |             file_path = self.plugin_dir / filename
92 |             if not file_path.exists():
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:91:1
   |
89 |         for filename in essential_files:
90 |         pass
91 |             file_path = self.plugin_dir / filename
   | ^^^^^^^^^^^^
92 |             if not file_path.exists():
93 |             pass
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:93:13
   |
91 |             file_path = self.plugin_dir / filename
92 |             if not file_path.exists():
93 |             pass
   |             ^^^^
94 |                 missing_files.append(filename)
   |

invalid-syntax: Unexpected indentation
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:94:1
   |
92 |             if not file_path.exists():
93 |             pass
94 |                 missing_files.append(filename)
   | ^^^^^^^^^^^^^^^^
95 |
96 |         assert not missing_files, f"Missing essential plugin files: {missing_files}"
   |

invalid-syntax: Expected a statement
  --> tests\obsidian-ai-assistant\test_plugin_structure.py:96:9
   |
94 |                 missing_files.append(filename)
95 |
96 |         assert not missing_files, f"Missing essential plugin files: {missing_files}"
   |         ^
   |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:99:1
    |
 99 | class TestMainPluginFile:
    | ^
100 |     """Test the main plugin file structure and key classes."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:106:9
    |
104 |         main_path = Path(".obsidian/plugins/obsidian-ai-assistant/main.js")
105 |         with open(main_path, "r", encoding="utf-8") as f:
106 |         pass
    |         ^^^^
107 |             return f.read()
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:107:1
    |
105 |         with open(main_path, "r", encoding="utf-8") as f:
106 |         pass
107 |             return f.read()
    | ^^^^^^^^^^^^
108 |
109 |     def test_plugin_class_structure(self):
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:172:9
    |
170 |         essential_settings = ["backendUrl", "features"]
171 |         for setting in essential_settings:
172 |         pass
    |         ^^^^
173 |             # Look for property name in JavaScript object (can be with or without quotes)
174 |             pattern = rf'["\']?{setting}["\']?\s*:'
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:174:1
    |
172 |         pass
173 |             # Look for property name in JavaScript object (can be with or without quotes)
174 |             pattern = rf'["\']?{setting}["\']?\s*:'
    | ^^^^^^^^^^^^
175 |             assert re.search(
176 |                 pattern, content
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:180:5
    |
180 |     def test_backend_communication_setup(self):
    |     ^
181 |         """Test that backend communication is set up."""
182 |         content = self.main_js_content
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:193:9
    |
191 |         found_patterns = []
192 |         for pattern in communication_patterns:
193 |         pass
    |         ^^^^
194 |             if re.search(pattern, content, re.IGNORECASE):
195 |                 found_patterns.append(pattern)
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:194:1
    |
192 |         for pattern in communication_patterns:
193 |         pass
194 |             if re.search(pattern, content, re.IGNORECASE):
    | ^^^^^^^^^^^^
195 |                 found_patterns.append(pattern)
196 |         assert (
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:201:1
    |
201 | class TestPluginModules:
    | ^
202 |     """Test individual plugin module files."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:214:9
    |
213 |         with open(file_path, "r", encoding="utf-8") as f:
214 |         pass
    |         ^^^^
215 |             content = f.read()
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:215:1
    |
213 |         with open(file_path, "r", encoding="utf-8") as f:
214 |         pass
215 |             content = f.read()
    | ^^^^^^^^^^^^
216 |
217 |         # Check for class or function definitions
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:237:9
    |
236 |         with open(file_path, "r", encoding="utf-8") as f:
237 |         pass
    |         ^^^^
238 |             content = f.read()
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:238:1
    |
236 |         with open(file_path, "r", encoding="utf-8") as f:
237 |         pass
238 |             content = f.read()
    | ^^^^^^^^^^^^
239 |
240 |         # Look for queue-related functionality
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:254:5
    |
254 |     def test_voice_modules_structure(self):
    |     ^
255 |         pass
256 |         """Test voice.js and voiceInput.js structure."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:259:9
    |
257 |         voice_files = ["voice.js", "voiceInput.js"]
258 |         for filename in voice_files:
259 |         pass
    |         ^^^^
260 |             file_path = Path(f".obsidian/plugins/obsidian-ai-assistant/{filename}")
261 |             assert file_path.exists(), f"{filename} should exist"
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:260:1
    |
258 |         for filename in voice_files:
259 |         pass
260 |             file_path = Path(f".obsidian/plugins/obsidian-ai-assistant/{filename}")
    | ^^^^^^^^^^^^
261 |             assert file_path.exists(), f"{filename} should exist"
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:264:13
    |
263 |             with open(file_path, "r", encoding="utf-8") as f:
264 |             pass
    |             ^^^^
265 |                 content = f.read()
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:265:1
    |
263 |             with open(file_path, "r", encoding="utf-8") as f:
264 |             pass
265 |                 content = f.read()
    | ^^^^^^^^^^^^^^^^
266 |
267 |             # Look for voice-related functionality
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:281:5
    |
281 |     def test_styles_css_exists(self):
    |     ^
282 |         pass
283 |         """Test that styles.css exists and contains CSS."""
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:288:9
    |
287 |         with open(file_path, "r", encoding="utf-8") as f:
288 |         pass
    |         ^^^^
289 |             content = f.read()
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:289:1
    |
287 |         with open(file_path, "r", encoding="utf-8") as f:
288 |         pass
289 |             content = f.read()
    | ^^^^^^^^^^^^
290 |
291 |         # Check for basic CSS structure
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:305:1
    |
305 | class TestPluginConfiguration:
    | ^
306 |     pass
307 |     """Test plugin configuration and setup."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:317:9
    |
315 |         template_path = self.plugin_dir / "config.template.json"
316 |         if template_path.exists():
317 |         pass
    |         ^^^^
318 |             with open(template_path, "r") as f:
319 |                 config = json.load(f)
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:318:1
    |
316 |         if template_path.exists():
317 |         pass
318 |             with open(template_path, "r") as f:
    | ^^^^^^^^^^^^
319 |                 config = json.load(f)
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:325:9
    |
323 |                 config, dict
324 |             ), "config.template.json should be a JSON object"
325 |         else:
    |         ^^^^
326 |     pass
327 |     def test_no_sensitive_data_in_files(self):
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:325:13
    |
323 |                 config, dict
324 |             ), "config.template.json should be a JSON object"
325 |         else:
    |             ^
326 |     pass
327 |     def test_no_sensitive_data_in_files(self):
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:325:14
    |
323 |                 config, dict
324 |             ), "config.template.json should be a JSON object"
325 |         else:
    |              ^
326 |     pass
327 |     def test_no_sensitive_data_in_files(self):
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:339:9
    |
338 |         for js_file in js_files:
339 |         pass
    |         ^^^^
340 |             with open(js_file, "r", encoding="utf-8") as f:
341 |                 content = f.read()
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:340:1
    |
338 |         for js_file in js_files:
339 |         pass
340 |             with open(js_file, "r", encoding="utf-8") as f:
    | ^^^^^^^^^^^^
341 |                 content = f.read()
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:344:13
    |
343 |             for pattern in sensitive_patterns:
344 |             pass
    |             ^^^^
345 |                 matches = re.findall(pattern, content, re.IGNORECASE)
346 |                 assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:345:1
    |
343 |             for pattern in sensitive_patterns:
344 |             pass
345 |                 matches = re.findall(pattern, content, re.IGNORECASE)
    | ^^^^^^^^^^^^^^^^
346 |                 assert (
347 |                     not matches
    |

invalid-syntax: Expected a statement
   --> tests\obsidian-ai-assistant\test_plugin_structure.py:352:1
    |
352 | if __name__ == "__main__":
    | ^
353 |     pass
354 |     # Run tests individually for debugging
    |

E902 stream did not contain valid UTF-8
--> tests\test_final.py:1:1

invalid-syntax: Expected an indented block after `if` statement
  --> tests\test_openspec_changes.py:33:9
   |
31 |         """Clean up test fixtures."""
32 |         if self.temp_dir.exists():
33 |         pass
   |         ^^^^
34 |             shutil.rmtree(self.temp_dir)
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_changes.py:34:1
   |
32 |         if self.temp_dir.exists():
33 |         pass
34 |             shutil.rmtree(self.temp_dir)
   | ^^^^^^^^^^^^
35 |
36 |     def test_change_id_generation(self):
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\test_openspec_changes.py:56:9
   |
55 |         for input_path, expected in test_cases:
56 |         pass
   |         ^^^^
57 |             # Create full path from repo root for the function
58 |             full_path = REPO_ROOT / input_path
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_changes.py:58:1
   |
56 |         pass
57 |             # Create full path from repo root for the function
58 |             full_path = REPO_ROOT / input_path
   | ^^^^^^^^^^^^
59 |             result = to_change_id(full_path)
60 |             assert result == expected
   |

invalid-syntax: Expected a statement
  --> tests\test_openspec_changes.py:62:5
   |
60 |             assert result == expected
61 |
62 |     def test_proposal_md_generation(self):
   |     ^
63 |         pass
64 |         """Test that proposal.md files are generated with correct structure."""
   |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:141:1
    |
141 | class TestOpenSpecRepairFunctionality:
    | ^
142 |     pass
143 |     """Test the OpenSpec repair and archival functionality."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_changes.py:156:9
    |
154 |         """Clean up test fixtures."""
155 |         if self.temp_dir.exists():
156 |         pass
    |         ^^^^
157 |             shutil.rmtree(self.temp_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:157:1
    |
155 |         if self.temp_dir.exists():
156 |         pass
157 |             shutil.rmtree(self.temp_dir)
    | ^^^^^^^^^^^^
158 |
159 |     def test_duplicate_detection(self):
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\test_openspec_changes.py:211:9
    |
209 |         # Mock datetime for consistent testing
210 |         with patch("repair_openspec_changes.datetime") as mock_datetime:
211 |         pass
    |         ^^^^
212 |             mock_datetime.now.return_value.strftime.return_value = "2025-10-12"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:212:1
    |
210 |         with patch("repair_openspec_changes.datetime") as mock_datetime:
211 |         pass
212 |             mock_datetime.now.return_value.strftime.return_value = "2025-10-12"
    | ^^^^^^^^^^^^
213 |
214 |             # Create a test structure
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:225:5
    |
223 |             assert expected_archive_subdir.name.startswith("2025-10-12-")
224 |
225 |     def test_canonical_change_regeneration(self):
    |     ^
226 |         pass
227 |         """Test that canonical changes are regenerated with correct structure."""
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:256:1
    |
256 | class TestOpenSpecValidation:
    | ^
257 |     """Test OpenSpec format validation and compliance."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_changes.py:277:9
    |
275 |         h2_indices = [i for i, line in enumerate(lines) if line.startswith("## ")]
276 |         for idx in h2_indices:
277 |         pass
    |         ^^^^
278 |             if idx > 0:
279 |                 assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:278:1
    |
276 |         for idx in h2_indices:
277 |         pass
278 |             if idx > 0:
    | ^^^^^^^^^^^^
279 |                 assert (
280 |                     lines[idx - 1] == ""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_changes.py:283:13
    |
281 |                 ), f"Missing blank line before heading at line {idx + 1}"
282 |             if idx < len(lines) - 1:
283 |             pass
    |             ^^^^
284 |                 assert (
285 |                     lines[idx + 1] == ""
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:284:1
    |
282 |             if idx < len(lines) - 1:
283 |             pass
284 |                 assert (
    | ^^^^^^^^^^^^^^^^
285 |                     lines[idx + 1] == ""
286 |                 ), f"Missing blank line after heading at line {idx + 1}"
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:288:5
    |
286 |                 ), f"Missing blank line after heading at line {idx + 1}"
287 |
288 |     def test_spec_delta_openspec_compliance(self):
    |     ^
289 |         """Test that spec deltas comply with OpenSpec format requirements."""
290 |         import sys
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_changes.py:336:9
    |
334 |         # Check naming convention
335 |         for change_id in change_ids:
336 |         pass
    |         ^^^^
337 |             assert change_id.startswith("update-doc-")
338 |             assert all(c.isalnum() or c == "-" for c in change_id)
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:337:1
    |
335 |         for change_id in change_ids:
336 |         pass
337 |             assert change_id.startswith("update-doc-")
    | ^^^^^^^^^^^^
338 |             assert all(c.isalnum() or c == "-" for c in change_id)
339 |             assert not change_id.endswith("-")
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:343:1
    |
343 | class TestOpenSpecIntegration:
    | ^
344 |     pass
345 |     """Test integration with the actual OpenSpec change files."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_changes.py:363:9
    |
362 |         for change_name in expected_changes:
363 |         pass
    |         ^^^^
364 |             change_dir = changes_dir / change_name
365 |             assert change_dir.exists(), f"Change {change_name} does not exist"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:364:1
    |
362 |         for change_name in expected_changes:
363 |         pass
364 |             change_dir = changes_dir / change_name
    | ^^^^^^^^^^^^
365 |             assert change_dir.exists(), f"Change {change_name} does not exist"
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_changes.py:382:9
    |
381 |         for change_name in test_changes:
382 |         pass
    |         ^^^^
383 |             spec_file = (
384 |                 changes_dir
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:383:1
    |
381 |         for change_name in test_changes:
382 |         pass
383 |             spec_file = (
    | ^^^^^^^^^^^^
384 |                 changes_dir
385 |                 / change_name
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_changes.py:391:13
    |
389 |             )
390 |             if spec_file.exists():
391 |             pass
    |             ^^^^
392 |                 content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:392:1
    |
390 |             if spec_file.exists():
391 |             pass
392 |                 content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^
393 |
394 |                 # Check OpenSpec format
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:404:5
    |
402 |                 assert "- **THEN**" in content
403 |
404 |     def test_archive_functionality(self):
    |     ^
405 |         pass
406 |         """Test that archive directory exists and has proper structure."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_changes.py:411:9
    |
410 |         if archive_dir.exists():
411 |         pass
    |         ^^^^
412 |             # Check for timestamped subdirectories
413 |             subdirs = [d for d in archive_dir.iterdir() if d.is_dir()]
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:413:1
    |
411 |         pass
412 |             # Check for timestamped subdirectories
413 |             subdirs = [d for d in archive_dir.iterdir() if d.is_dir()]
    | ^^^^^^^^^^^^
414 |
415 |             for subdir in subdirs:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_changes.py:416:13
    |
415 |             for subdir in subdirs:
416 |             pass
    |             ^^^^
417 |                 # Should follow YYYY-MM-DD pattern
418 |                 name_parts = subdir.name.split("-")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:418:1
    |
416 |             pass
417 |                 # Should follow YYYY-MM-DD pattern
418 |                 name_parts = subdir.name.split("-")
    | ^^^^^^^^^^^^^^^^
419 |                 if len(name_parts) >= 3:
420 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_changes.py:419:41
    |
417 |                 # Should follow YYYY-MM-DD pattern
418 |                 name_parts = subdir.name.split("-")
419 |                 if len(name_parts) >= 3:
    |                                         ^
420 |             pass
421 |                     year, month, day = name_parts[:3]
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:421:1
    |
419 |                 if len(name_parts) >= 3:
420 |             pass
421 |                     year, month, day = name_parts[:3]
    | ^^^^^^^^^^^^^^^^^^^^
422 |                     assert year.isdigit() and len(year) == 4
423 |                     assert month.isdigit() and 1 <= int(month) <= 12
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:426:5
    |
424 |                     assert day.isdigit() and 1 <= int(day) <= 31
425 |
426 |     def test_capability_consistency(self):
    |     ^
427 |         """Test that all changes use the same capability consistently."""
428 |         repo_root = Path(__file__).parent.parent
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_changes.py:434:9
    |
433 |         for change_dir in changes_dir.iterdir():
434 |         pass
    |         ^^^^
435 |             if change_dir.is_dir() and change_dir.name != "archive":
436 |                 spec_dir = change_dir / "specs" / capability_name
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:435:1
    |
433 |         for change_dir in changes_dir.iterdir():
434 |         pass
435 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
436 |                 spec_dir = change_dir / "specs" / capability_name
437 |                 spec_file = spec_dir / "spec.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_changes.py:439:39
    |
437 |                 spec_file = spec_dir / "spec.md"
438 |
439 |                 if spec_file.exists():
    |                                       ^
440 |             pass
441 |                     content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:441:1
    |
439 |                 if spec_file.exists():
440 |             pass
441 |                     content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
442 |                     assert f"project-documentation / {change_dir.name}" in content
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_changes.py:447:1
    |
445 |                     proposal_file = change_dir / "proposal.md"
446 |                     if proposal_file.exists():
447 |                 pass
    | ^^^^^^^^^^^^^^^^
448 |                         proposal_content = proposal_file.read_text()
449 |                         assert capability_name in proposal_content
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:448:1
    |
446 |                     if proposal_file.exists():
447 |                 pass
448 |                         proposal_content = proposal_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^^^^^
449 |                         assert capability_name in proposal_content
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:452:1
    |
452 | class TestOpenSpecScriptExecution:
    | ^
453 |     """Test the actual script execution and error handling."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_changes.py:506:9
    |
505 |         for exclusion in expected_exclusions:
506 |         pass
    |         ^^^^
507 |             assert exclusion in EXCLUDED_PARTS
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:507:1
    |
505 |         for exclusion in expected_exclusions:
506 |         pass
507 |             assert exclusion in EXCLUDED_PARTS
    | ^^^^^^^^^^^^
508 |
509 |         # Test exclusion logic - need to match the actual exclusion format (with slashes)
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_changes.py:518:9
    |
517 |         for path in test_paths:
518 |         pass
    |         ^^^^
519 |             excluded = any(part in path for part in EXCLUDED_PARTS)
520 |             if "/openspec/changes" in path or "/.git" in path:
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:519:1
    |
517 |         for path in test_paths:
518 |         pass
519 |             excluded = any(part in path for part in EXCLUDED_PARTS)
    | ^^^^^^^^^^^^
520 |             if "/openspec/changes" in path or "/.git" in path:
521 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_changes.py:521:13
    |
519 |             excluded = any(part in path for part in EXCLUDED_PARTS)
520 |             if "/openspec/changes" in path or "/.git" in path:
521 |             pass
    |             ^^^^
522 |                 assert excluded, f"Path {path} should be excluded"
523 |             elif "docs/" in path or path == "README.md":
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:522:1
    |
520 |             if "/openspec/changes" in path or "/.git" in path:
521 |             pass
522 |                 assert excluded, f"Path {path} should be excluded"
    | ^^^^^^^^^^^^^^^^
523 |             elif "docs/" in path or path == "README.md":
524 |             pass
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:523:13
    |
521 |             pass
522 |                 assert excluded, f"Path {path} should be excluded"
523 |             elif "docs/" in path or path == "README.md":
    |             ^^^^
524 |             pass
525 |                 assert not excluded, f"Path {path} should not be excluded"
    |

invalid-syntax: Invalid annotated assignment target
   --> tests\test_openspec_changes.py:523:18
    |
521 |             pass
522 |                 assert excluded, f"Path {path} should be excluded"
523 |             elif "docs/" in path or path == "README.md":
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
524 |             pass
525 |                 assert not excluded, f"Path {path} should not be excluded"
    |

invalid-syntax: Expected an expression
   --> tests\test_openspec_changes.py:523:57
    |
521 |             pass
522 |                 assert excluded, f"Path {path} should be excluded"
523 |             elif "docs/" in path or path == "README.md":
    |                                                         ^
524 |             pass
525 |                 assert not excluded, f"Path {path} should not be excluded"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_changes.py:525:1
    |
523 |             elif "docs/" in path or path == "README.md":
524 |             pass
525 |                 assert not excluded, f"Path {path} should not be excluded"
    | ^^^^^^^^^^^^^^^^
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_changes.py:526:1
    |
524 |             pass
525 |                 assert not excluded, f"Path {path} should not be excluded"
    |                                                                           ^
    |

invalid-syntax: Expected an indented block after `try` statement
  --> tests\test_openspec_cli.py:79:9
   |
77 |         # Test scripts have proper Python syntax
78 |         try:
79 |         pass
   |         ^^^^
80 |             compile(generate_script.read_text(), str(generate_script), "exec")
81 |         except SyntaxError as e:
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_cli.py:80:1
   |
78 |         try:
79 |         pass
80 |             compile(generate_script.read_text(), str(generate_script), "exec")
   | ^^^^^^^^^^^^
81 |         except SyntaxError as e:
82 |         pass
   |

invalid-syntax: Expected a statement
  --> tests\test_openspec_cli.py:81:9
   |
79 |         pass
80 |             compile(generate_script.read_text(), str(generate_script), "exec")
81 |         except SyntaxError as e:
   |         ^^^^^^
82 |         pass
83 |             pytest.fail(f"Generate script has syntax errors: {e}")
   |

invalid-syntax: Expected a statement
  --> tests\test_openspec_cli.py:81:28
   |
79 |         pass
80 |             compile(generate_script.read_text(), str(generate_script), "exec")
81 |         except SyntaxError as e:
   |                            ^^
82 |         pass
83 |             pytest.fail(f"Generate script has syntax errors: {e}")
   |

invalid-syntax: Expected an expression
  --> tests\test_openspec_cli.py:81:33
   |
79 |         pass
80 |             compile(generate_script.read_text(), str(generate_script), "exec")
81 |         except SyntaxError as e:
   |                                 ^
82 |         pass
83 |             pytest.fail(f"Generate script has syntax errors: {e}")
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_cli.py:83:1
   |
81 |         except SyntaxError as e:
82 |         pass
83 |             pytest.fail(f"Generate script has syntax errors: {e}")
   | ^^^^^^^^^^^^
84 |
85 |         try:
   |

invalid-syntax: Expected an indented block after `try` statement
  --> tests\test_openspec_cli.py:86:9
   |
85 |         try:
86 |         pass
   |         ^^^^
87 |             compile(repair_script.read_text(), str(repair_script), "exec")
88 |         except SyntaxError as e:
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_cli.py:87:1
   |
85 |         try:
86 |         pass
87 |             compile(repair_script.read_text(), str(repair_script), "exec")
   | ^^^^^^^^^^^^
88 |         except SyntaxError as e:
89 |         pass
   |

invalid-syntax: Expected a statement
  --> tests\test_openspec_cli.py:88:9
   |
86 |         pass
87 |             compile(repair_script.read_text(), str(repair_script), "exec")
88 |         except SyntaxError as e:
   |         ^
89 |         pass
90 |             pytest.fail(f"Repair script has syntax errors: {e}")
   |

invalid-syntax: Expected a statement
  --> tests\test_openspec_cli.py:88:28
   |
86 |         pass
87 |             compile(repair_script.read_text(), str(repair_script), "exec")
88 |         except SyntaxError as e:
   |                            ^^
89 |         pass
90 |             pytest.fail(f"Repair script has syntax errors: {e}")
   |

invalid-syntax: Expected an expression
  --> tests\test_openspec_cli.py:88:33
   |
86 |         pass
87 |             compile(repair_script.read_text(), str(repair_script), "exec")
88 |         except SyntaxError as e:
   |                                 ^
89 |         pass
90 |             pytest.fail(f"Repair script has syntax errors: {e}")
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_cli.py:90:1
   |
88 |         except SyntaxError as e:
89 |         pass
90 |             pytest.fail(f"Repair script has syntax errors: {e}")
   | ^^^^^^^^^^^^
   |

invalid-syntax: Expected a statement
  --> tests\test_openspec_cli.py:93:1
   |
93 | class TestOpenSpecValidationUtilities:
   | ^
94 |     """Test validation utilities for OpenSpec compliance."""
   |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_cli.py:117:9
    |
116 |         for input_path, _ in test_cases:
117 |         pass
    |         ^^^^
118 |             if input_path.exists():
119 |                 result = module.to_change_id(input_path)
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:118:1
    |
116 |         for input_path, _ in test_cases:
117 |         pass
118 |             if input_path.exists():
    | ^^^^^^^^^^^^
119 |                 result = module.to_change_id(input_path)
120 |                 assert result.startswith(
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_cli.py:149:9
    |
147 |         required_sections = ["## Why", "## What Changes", "## Impact"]
148 |         for section in required_sections:
149 |         pass
    |         ^^^^
150 |             assert section in proposal_content, f"Missing section {section}"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:150:1
    |
148 |         for section in required_sections:
149 |         pass
150 |             assert section in proposal_content, f"Missing section {section}"
    | ^^^^^^^^^^^^
151 |
152 |         # Should mention the target file
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_cli.py:160:5
    |
158 |         assert h1_count == 1, "Should have exactly one H1 heading"
159 |
160 |     def test_tasks_template_validation(self):
    |     ^
161 |         pass
162 |         """Test that tasks templates produce valid checklists."""
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_cli.py:224:1
    |
224 | class TestOpenSpecFileOperations:
    | ^
225 |     """Test file operations and safety measures."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_cli.py:277:9
    |
276 |         if script_path.exists():
277 |         pass
    |         ^^^^
278 |             script_content = script_path.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:278:1
    |
276 |         if script_path.exists():
277 |         pass
278 |             script_content = script_path.read_text()
    | ^^^^^^^^^^^^
279 |
280 |             # Should have archive functionality
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_cli.py:289:1
    |
289 | class TestOpenSpecErrorHandling:
    | ^
290 |     pass
291 |     """Test error handling in OpenSpec operations."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_cli.py:305:9
    |
304 |         for script_path in scripts:
305 |         pass
    |         ^^^^
306 |             if script_path.exists():
307 |                 # Test that script can be loaded without syntax errors
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:306:1
    |
304 |         for script_path in scripts:
305 |         pass
306 |             if script_path.exists():
    | ^^^^^^^^^^^^
307 |                 # Test that script can be loaded without syntax errors
308 |                 spec = importlib.util.spec_from_file_location(
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_cli.py:331:9
    |
330 |         if script_path.exists():
331 |         pass
    |         ^^^^
332 |             spec = importlib.util.spec_from_file_location(
333 |                 "generate_openspec_changes", script_path
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:332:1
    |
330 |         if script_path.exists():
331 |         pass
332 |             spec = importlib.util.spec_from_file_location(
    | ^^^^^^^^^^^^
333 |                 "generate_openspec_changes", script_path
334 |             )
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_cli.py:346:13
    |
345 |             for edge_case in edge_cases:
346 |             pass
    |             ^^^^
347 |                 try:
348 |                     result = module.to_change_id(edge_case)
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:347:1
    |
345 |             for edge_case in edge_cases:
346 |             pass
347 |                 try:
    | ^^^^^^^^^^^^^^^^
348 |                     result = module.to_change_id(edge_case)
349 |                     # Should produce some result (not necessarily valid, but not crash)
    |

invalid-syntax: Expected an indented block after `except` clause
   --> tests\test_openspec_cli.py:353:39
    |
351 |                         result, str
352 |                     ), f"Should return string for {edge_case}"
353 |                 except Exception as e:
    |                                       ^
354 |         pass
355 |             pass
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_cli.py:354:9
    |
352 |                     ), f"Should return string for {edge_case}"
353 |                 except Exception as e:
354 |         pass
    |         ^
355 |             pass
356 |                     # If it throws, should be a reasonable exception
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:355:1
    |
353 |                 except Exception as e:
354 |         pass
355 |             pass
    | ^^^^^^^^^^^^
356 |                     # If it throws, should be a reasonable exception
357 |                     assert isinstance(
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:357:1
    |
355 |             pass
356 |                     # If it throws, should be a reasonable exception
357 |                     assert isinstance(
    | ^^^^^^^^^^^^^^^^^^^^
358 |                         e, (ValueError, TypeError)
359 |                     ), f"Unexpected exception type for {edge_case}: {type(e)}"
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_cli.py:362:1
    |
362 | class TestOpenSpecIntegrationCompliance:
    | ^
363 |     """Test compliance with OpenSpec integration requirements."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_cli.py:377:9
    |
376 |         for required_dir in required_dirs:
377 |         pass
    |         ^^^^
378 |             dir_path = openspec_dir / required_dir
379 |             assert dir_path.exists(), f"Required directory {required_dir} missing"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:378:1
    |
376 |         for required_dir in required_dirs:
377 |         pass
378 |             dir_path = openspec_dir / required_dir
    | ^^^^^^^^^^^^
379 |             assert dir_path.exists(), f"Required directory {required_dir} missing"
380 |             assert dir_path.is_dir(), f"{required_dir} should be a directory"
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_cli.py:408:9
    |
407 |         for change_dir in changes_dir.iterdir():
408 |         pass
    |         ^^^^
409 |             if change_dir.is_dir() and change_dir.name != "archive":
410 |                 # Should have spec in correct location
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:409:1
    |
407 |         for change_dir in changes_dir.iterdir():
408 |         pass
409 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
410 |                 # Should have spec in correct location
411 |                 expected_spec_path = (
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_cli.py:415:48
    |
413 |                 )
414 |
415 |                 if expected_spec_path.exists():
    |                                                ^
416 |             pass
417 |                     # Verify it references the capability correctly
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:418:1
    |
416 |             pass
417 |                     # Verify it references the capability correctly
418 |                     content = expected_spec_path.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
419 |                     assert (
420 |                         "project-documentation" in content
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_cli.py:423:5
    |
421 |                     ), f"Change {change_dir.name} should reference project-documentation capability"
422 |
423 |     def test_generated_changes_completeness(self):
    |     ^
424 |         pass
425 |         """Test that generated changes are complete and follow patterns."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_cli.py:442:9
    |
441 |         for change_dir in sample_changes:
442 |         pass
    |         ^^^^
443 |             # Check basic file structure
444 |             required_files = ["proposal.md", "tasks.md"]
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:444:1
    |
442 |         pass
443 |             # Check basic file structure
444 |             required_files = ["proposal.md", "tasks.md"]
    | ^^^^^^^^^^^^
445 |
446 |             for required_file in required_files:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_cli.py:447:13
    |
446 |             for required_file in required_files:
447 |             pass
    |             ^^^^
448 |                 file_path = change_dir / required_file
449 |                 assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_cli.py:448:1
    |
446 |             for required_file in required_files:
447 |             pass
448 |                 file_path = change_dir / required_file
    | ^^^^^^^^^^^^^^^^
449 |                 assert (
450 |                     file_path.exists()
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_cli.py:457:1
    |
455 |                     len(content.strip()) > 50
456 |                 ), f"File {required_file} too short in {change_dir.name}"
    |                                                                          ^
    |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\test_openspec_integration.py:43:9
   |
42 |         if not changes_dir.exists():
43 |         pass
   |         ^^^^
44 |             pytest.skip("OpenSpec changes directory doesn't exist")
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_integration.py:44:1
   |
42 |         if not changes_dir.exists():
43 |         pass
44 |             pytest.skip("OpenSpec changes directory doesn't exist")
   | ^^^^^^^^^^^^
45 |
46 |         # Should have some changes
   |

invalid-syntax: Expected an indented block after `if` statement
  --> tests\test_openspec_integration.py:79:9
   |
78 |         if not changes_dir.exists():
79 |         pass
   |         ^^^^
80 |             pytest.skip("OpenSpec changes directory doesn't exist")
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_integration.py:80:1
   |
78 |         if not changes_dir.exists():
79 |         pass
80 |             pytest.skip("OpenSpec changes directory doesn't exist")
   | ^^^^^^^^^^^^
81 |
82 |         for change_dir in changes_dir.iterdir():
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\test_openspec_integration.py:83:9
   |
82 |         for change_dir in changes_dir.iterdir():
83 |         pass
   |         ^^^^
84 |             if change_dir.is_dir() and change_dir.name != "archive":
85 |                 change_id = change_dir.name
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_integration.py:84:1
   |
82 |         for change_dir in changes_dir.iterdir():
83 |         pass
84 |             if change_dir.is_dir() and change_dir.name != "archive":
   | ^^^^^^^^^^^^
85 |                 change_id = change_dir.name
   |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:107:5
    |
105 |                 ), f"Change ID {change_id} ends with hyphen"
106 |
107 |     def test_proposal_format_compliance(self):
    |     ^
108 |         pass
109 |         """Test that proposals follow the required format."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:114:9
    |
113 |         if not changes_dir.exists():
114 |         pass
    |         ^^^^
115 |             pytest.skip("OpenSpec changes directory doesn't exist")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:115:1
    |
113 |         if not changes_dir.exists():
114 |         pass
115 |             pytest.skip("OpenSpec changes directory doesn't exist")
    | ^^^^^^^^^^^^
116 |
117 |         # Test first few proposals
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:126:13
    |
124 |             proposal_file = change_dir / "proposal.md"
125 |             if proposal_file.exists():
126 |             pass
    |             ^^^^
127 |                 content = proposal_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:127:1
    |
125 |             if proposal_file.exists():
126 |             pass
127 |                 content = proposal_file.read_text()
    | ^^^^^^^^^^^^^^^^
128 |
129 |                 # Should have H1 title with change ID
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:148:5
    |
146 |                 ), f"Missing capability reference in {change_dir.name}"
147 |
148 |     def test_spec_delta_format_compliance(self):
    |     ^
149 |         pass
150 |         """Test that spec deltas follow OpenSpec format."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:155:9
    |
154 |         if not changes_dir.exists():
155 |         pass
    |         ^^^^
156 |             pytest.skip("OpenSpec changes directory doesn't exist")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:156:1
    |
154 |         if not changes_dir.exists():
155 |         pass
156 |             pytest.skip("OpenSpec changes directory doesn't exist")
    | ^^^^^^^^^^^^
157 |
158 |         spec_deltas_tested = 0
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_integration.py:160:9
    |
158 |         spec_deltas_tested = 0
159 |         for change_dir in changes_dir.iterdir():
160 |         pass
    |         ^^^^
161 |             if change_dir.is_dir() and change_dir.name != "archive":
162 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:161:1
    |
159 |         for change_dir in changes_dir.iterdir():
160 |         pass
161 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
162 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:164:39
    |
162 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
163 |
164 |                 if spec_file.exists():
    |                                       ^
165 |             pass
166 |                     content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:166:1
    |
164 |                 if spec_file.exists():
165 |             pass
166 |                     content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
167 |
168 |                     # Should have proper title format
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:203:5
    |
201 |                         break
202 |
203 |     def test_tasks_format_compliance(self):
    |     ^
204 |         pass
205 |         """Test that tasks follow the required checklist format."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:210:9
    |
209 |         if not changes_dir.exists():
210 |         pass
    |         ^^^^
211 |             pytest.skip("OpenSpec changes directory doesn't exist")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:211:1
    |
209 |         if not changes_dir.exists():
210 |         pass
211 |             pytest.skip("OpenSpec changes directory doesn't exist")
    | ^^^^^^^^^^^^
212 |
213 |         # Test first few tasks files
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:222:13
    |
220 |             tasks_file = change_dir / "tasks.md"
221 |             if tasks_file.exists():
222 |             pass
    |             ^^^^
223 |                 content = tasks_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:223:1
    |
221 |             if tasks_file.exists():
222 |             pass
223 |                 content = tasks_file.read_text()
    | ^^^^^^^^^^^^^^^^
224 |
225 |                 # Should have proper title
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:246:5
    |
244 |                 ), f"Missing validation command in {change_dir.name}"
245 |
246 |     def test_capability_consistency(self):
    |     ^
247 |         """Test that all changes use the project-documentation capability consistently."""
248 |         repo_root = Path(__file__).parent.parent
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:252:9
    |
251 |         if not changes_dir.exists():
252 |         pass
    |         ^^^^
253 |             pytest.skip("OpenSpec changes directory doesn't exist")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:253:1
    |
251 |         if not changes_dir.exists():
252 |         pass
253 |             pytest.skip("OpenSpec changes directory doesn't exist")
    | ^^^^^^^^^^^^
254 |
255 |         capability_name = "project-documentation"
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_integration.py:258:9
    |
257 |         for change_dir in changes_dir.iterdir():
258 |         pass
    |         ^^^^
259 |             if change_dir.is_dir() and change_dir.name != "archive":
260 |                 # Check if spec exists in correct location
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:259:1
    |
257 |         for change_dir in changes_dir.iterdir():
258 |         pass
259 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
260 |                 # Check if spec exists in correct location
261 |                 spec_dir = change_dir / "specs" / capability_name
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:262:38
    |
260 |                 # Check if spec exists in correct location
261 |                 spec_dir = change_dir / "specs" / capability_name
262 |                 if spec_dir.exists():
    |                                      ^
263 |             pass
264 |                     spec_file = spec_dir / "spec.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:264:1
    |
262 |                 if spec_dir.exists():
263 |             pass
264 |                     spec_file = spec_dir / "spec.md"
    | ^^^^^^^^^^^^^^^^^^^^
265 |                     if spec_file.exists():
266 |                 pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_integration.py:266:1
    |
264 |                     spec_file = spec_dir / "spec.md"
265 |                     if spec_file.exists():
266 |                 pass
    | ^^^^^^^^^^^^^^^^
267 |                         content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:267:1
    |
265 |                     if spec_file.exists():
266 |                 pass
267 |                         content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^^^^^
268 |
269 |                         # Should reference the capability in title
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:277:5
    |
275 |                         break
276 |
277 |     def test_archive_functionality_structure(self):
    |     ^
278 |         pass
279 |         """Test that archive functionality has proper structure if it exists."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:285:9
    |
283 |         # Archive directory may not exist, which is fine
284 |         if archive_dir.exists():
285 |         pass
    |         ^^^^
286 |             # If it exists, should have proper structure
287 |             subdirs = [d for d in archive_dir.iterdir() if d.is_dir()]
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:287:1
    |
285 |         pass
286 |             # If it exists, should have proper structure
287 |             subdirs = [d for d in archive_dir.iterdir() if d.is_dir()]
    | ^^^^^^^^^^^^
288 |
289 |             for subdir in subdirs:
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_integration.py:290:13
    |
289 |             for subdir in subdirs:
290 |             pass
    |             ^^^^
291 |                 # Should follow date naming pattern (YYYY-MM-DD-description)
292 |                 name_parts = subdir.name.split("-")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:292:1
    |
290 |             pass
291 |                 # Should follow date naming pattern (YYYY-MM-DD-description)
292 |                 name_parts = subdir.name.split("-")
    | ^^^^^^^^^^^^^^^^
293 |                 assert (
294 |                     len(name_parts) >= 3
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:311:37
    |
309 |                 # Should contain archived changes
310 |                 archived_changes = [d for d in subdir.iterdir() if d.is_dir()]
311 |                 if archived_changes:
    |                                     ^
312 |             pass
313 |                     # Test first archived change has some content
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:314:1
    |
312 |             pass
313 |                     # Test first archived change has some content
314 |                     sample_archived = archived_changes[0]
    | ^^^^^^^^^^^^^^^^^^^^
315 |                     archived_files = [
316 |                         f for f in sample_archived.iterdir() if f.is_file()
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:322:5
    |
320 |                     ), f"Archived change {sample_archived.name} should have files"
321 |
322 |     def test_project_documentation_capability_exists(self):
    |     ^
323 |         pass
324 |         """Test that the project-documentation capability spec exists."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:348:9
    |
347 |         if not changes_dir.exists():
348 |         pass
    |         ^^^^
349 |             pytest.skip("OpenSpec changes directory doesn't exist")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:349:1
    |
347 |         if not changes_dir.exists():
348 |         pass
349 |             pytest.skip("OpenSpec changes directory doesn't exist")
    | ^^^^^^^^^^^^
350 |
351 |         # Key files that should likely have changes
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_integration.py:363:9
    |
361 |         # Check if we have changes for at least some important docs
362 |         for doc in important_docs:
363 |         pass
    |         ^^^^
364 |             # Multiple possible change IDs for the same doc
365 |             possible_change_ids = [
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:365:1
    |
363 |         pass
364 |             # Multiple possible change IDs for the same doc
365 |             possible_change_ids = [
    | ^^^^^^^^^^^^
366 |                 f"update-doc-{doc.lower().replace('.md', '')}",
367 |                 f"update-doc-{doc.lower().replace('.md', '').replace('_', '-')}",
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:374:13
    |
372 |             )
373 |             if has_change:
374 |             pass
    |             ^^^^
375 |                 # Found at least one - that's good enough for this test
376 |                 break
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:376:1
    |
374 |             pass
375 |                 # Found at least one - that's good enough for this test
376 |                 break
    | ^^^^^^^^^^^^^^^^
377 |         else:
378 |         pass
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:377:9
    |
375 |                 # Found at least one - that's good enough for this test
376 |                 break
377 |         else:
    |         ^
378 |         pass
379 |             # Didn't find any important doc changes - might be worth noting but not failing
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:377:13
    |
375 |                 # Found at least one - that's good enough for this test
376 |                 break
377 |         else:
    |             ^
378 |         pass
379 |             # Didn't find any important doc changes - might be worth noting but not failing
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:377:14
    |
375 |                 # Found at least one - that's good enough for this test
376 |                 break
377 |         else:
    |              ^
378 |         pass
379 |             # Didn't find any important doc changes - might be worth noting but not failing
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:380:1
    |
378 |         pass
379 |             # Didn't find any important doc changes - might be worth noting but not failing
380 |             pytest.skip(
    | ^^^^^^^^^^^^
381 |                 "No changes found for tested important docs (might be expected)"
382 |             )
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:385:1
    |
385 | class TestOpenSpecWorkflowValidation:
    | ^
386 |     pass
387 |     """Test OpenSpec workflow and validation patterns."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:395:9
    |
394 |         if not changes_dir.exists():
395 |         pass
    |         ^^^^
396 |             pytest.skip("OpenSpec changes directory doesn't exist")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:396:1
    |
394 |         if not changes_dir.exists():
395 |         pass
396 |             pytest.skip("OpenSpec changes directory doesn't exist")
    | ^^^^^^^^^^^^
397 |
398 |         # Test first few changes for actionability
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:407:13
    |
405 |             proposal_file = change_dir / "proposal.md"
406 |             if proposal_file.exists():
407 |             pass
    |             ^^^^
408 |                 content = proposal_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:408:1
    |
406 |             if proposal_file.exists():
407 |             pass
408 |                 content = proposal_file.read_text()
    | ^^^^^^^^^^^^^^^^
409 |
410 |                 # Should be substantial (more than just template)
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:421:5
    |
419 |                 ), f"Proposal in {change_dir.name} should mention specific files/components"
420 |
421 |     def test_spec_deltas_follow_openspec_pattern(self):
    |     ^
422 |         pass
423 |         """Test that spec deltas follow the OpenSpec delta pattern exactly."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:428:9
    |
427 |         if not changes_dir.exists():
428 |         pass
    |         ^^^^
429 |             pytest.skip("OpenSpec changes directory doesn't exist")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:429:1
    |
427 |         if not changes_dir.exists():
428 |         pass
429 |             pytest.skip("OpenSpec changes directory doesn't exist")
    | ^^^^^^^^^^^^
430 |
431 |         for change_dir in changes_dir.iterdir():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_integration.py:432:9
    |
431 |         for change_dir in changes_dir.iterdir():
432 |         pass
    |         ^^^^
433 |             if change_dir.is_dir() and change_dir.name != "archive":
434 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:433:1
    |
431 |         for change_dir in changes_dir.iterdir():
432 |         pass
433 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
434 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:436:39
    |
434 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
435 |
436 |                 if spec_file.exists():
    |                                       ^
437 |             pass
438 |                     content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:438:1
    |
436 |                 if spec_file.exists():
437 |             pass
438 |                     content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
439 |                     lines = content.split("\n")
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_integration.py:449:1
    |
448 |                     for scenario_line_idx in scenario_lines:
449 |                 pass
    | ^^^^^^^^^^^^^^^^
450 |                         # Check that scenario has content in following lines
451 |                         if scenario_line_idx < len(lines) - 2:
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:451:1
    |
449 |                 pass
450 |                         # Check that scenario has content in following lines
451 |                         if scenario_line_idx < len(lines) - 2:
    | ^^^^^^^^^^^^^^^^^^^^^^^^
452 |                 pass
453 |                             # Look for WHEN/THEN in following lines
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_integration.py:452:1
    |
450 |                         # Check that scenario has content in following lines
451 |                         if scenario_line_idx < len(lines) - 2:
452 |                 pass
    | ^^^^^^^^^^^^^^^^
453 |                             # Look for WHEN/THEN in following lines
454 |                             scenario_content = "\n".join(
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:454:1
    |
452 |                 pass
453 |                             # Look for WHEN/THEN in following lines
454 |                             scenario_content = "\n".join(
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
455 |                                 lines[scenario_line_idx : scenario_line_idx + 10]
456 |                             )
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_integration.py:465:1
    |
464 |                     # Should not have MODIFIED or REMOVED (we're only adding governance)
465 |                     assert (
    | ^^^^^^^^^^^^^^^^^^^^
466 |                         "## MODIFIED Requirements" not in content
467 |                     ), f"Should not have MODIFIED in {change_dir.name}"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:468:1
    |
466 |                         "## MODIFIED Requirements" not in content
467 |                     ), f"Should not have MODIFIED in {change_dir.name}"
468 |                     assert (
    | ^^^^^^^^^^^^^^^^^^^^
469 |                         "## REMOVED Requirements" not in content
470 |                     ), f"Should not have REMOVED in {change_dir.name}"
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:475:5
    |
473 |                     break
474 |
475 |     def test_governance_language_consistency(self):
    |     ^
476 |         """Test that governance language is consistent across changes."""
477 |         repo_root = Path(__file__).parent.parent
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:481:9
    |
480 |         if not changes_dir.exists():
481 |         pass
    |         ^^^^
482 |             pytest.skip("OpenSpec changes directory doesn't exist")
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:482:1
    |
480 |         if not changes_dir.exists():
481 |         pass
482 |             pytest.skip("OpenSpec changes directory doesn't exist")
    | ^^^^^^^^^^^^
483 |
484 |         governance_keywords = ["govern", "OpenSpec", "material", "proposal"]
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_integration.py:488:9
    |
486 |         changes_tested = 0
487 |         for change_dir in changes_dir.iterdir():
488 |         pass
    |         ^^^^
489 |             if change_dir.is_dir() and change_dir.name != "archive":
490 |                 proposal_file = change_dir / "proposal.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:489:1
    |
487 |         for change_dir in changes_dir.iterdir():
488 |         pass
489 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
490 |                 proposal_file = change_dir / "proposal.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_integration.py:492:43
    |
490 |                 proposal_file = change_dir / "proposal.md"
491 |
492 |                 if proposal_file.exists():
    |                                           ^
493 |             pass
494 |                     content = proposal_file.read_text().lower()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_integration.py:494:1
    |
492 |                 if proposal_file.exists():
493 |             pass
494 |                     content = proposal_file.read_text().lower()
    | ^^^^^^^^^^^^^^^^^^^^
495 |
496 |                     # Should mention governance concepts
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_integration.py:509:1
    |
507 |                     if changes_tested >= 3:  # Test first 3 changes
508 |                         break
    |                              ^
    |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\test_openspec_workflow.py:30:9
   |
28 |         test_changes = []
29 |         for change_dir in changes_dir.iterdir():
30 |         pass
   |         ^^^^
31 |             if change_dir.is_dir() and change_dir.name != "archive":
32 |                 test_changes.append(change_dir)
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_workflow.py:31:1
   |
29 |         for change_dir in changes_dir.iterdir():
30 |         pass
31 |             if change_dir.is_dir() and change_dir.name != "archive":
   | ^^^^^^^^^^^^
32 |                 test_changes.append(change_dir)
33 |                 if len(test_changes) >= 5:  # Test first 5 changes
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\test_openspec_workflow.py:37:9
   |
36 |         for change_dir in test_changes:
37 |         pass
   |         ^^^^
38 |             proposal_file = change_dir / "proposal.md"
39 |             assert proposal_file.exists(), f"Missing proposal.md in {change_dir.name}"
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_workflow.py:38:1
   |
36 |         for change_dir in test_changes:
37 |         pass
38 |             proposal_file = change_dir / "proposal.md"
   | ^^^^^^^^^^^^
39 |             assert proposal_file.exists(), f"Missing proposal.md in {change_dir.name}"
   |

invalid-syntax: Expected a statement
  --> tests\test_openspec_workflow.py:63:5
   |
61 |             ), f"Missing OpenSpec reference in {change_dir.name}"
62 |
63 |     def test_tasks_checklist_format(self):
   |     ^
64 |         pass
65 |         """Test that tasks.md files follow proper checklist format."""
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\test_openspec_workflow.py:72:9
   |
70 |         test_changes = []
71 |         for change_dir in changes_dir.iterdir():
72 |         pass
   |         ^^^^
73 |             if change_dir.is_dir() and change_dir.name != "archive":
74 |                 test_changes.append(change_dir)
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_workflow.py:73:1
   |
71 |         for change_dir in changes_dir.iterdir():
72 |         pass
73 |             if change_dir.is_dir() and change_dir.name != "archive":
   | ^^^^^^^^^^^^
74 |                 test_changes.append(change_dir)
75 |                 if len(test_changes) >= 3:  # Test first 3 changes
   |

invalid-syntax: Expected an indented block after `for` statement
  --> tests\test_openspec_workflow.py:79:9
   |
78 |         for change_dir in test_changes:
79 |         pass
   |         ^^^^
80 |             tasks_file = change_dir / "tasks.md"
81 |             assert tasks_file.exists(), f"Missing tasks.md in {change_dir.name}"
   |

invalid-syntax: Unexpected indentation
  --> tests\test_openspec_workflow.py:80:1
   |
78 |         for change_dir in test_changes:
79 |         pass
80 |             tasks_file = change_dir / "tasks.md"
   | ^^^^^^^^^^^^
81 |             assert tasks_file.exists(), f"Missing tasks.md in {change_dir.name}"
   |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:98:5
    |
 96 |             assert f"openspec validate {change_dir.name} --strict" in content
 97 |
 98 |     def test_spec_delta_openspec_format(self):
    |     ^
 99 |         pass
100 |         """Test that spec deltas follow OpenSpec delta format exactly."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:106:9
    |
104 |         # Test all changes with spec deltas
105 |         for change_dir in changes_dir.iterdir():
106 |         pass
    |         ^^^^
107 |             if change_dir.is_dir() and change_dir.name != "archive":
108 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:107:1
    |
105 |         for change_dir in changes_dir.iterdir():
106 |         pass
107 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
108 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:110:39
    |
108 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
109 |
110 |                 if spec_file.exists():
    |                                       ^
111 |             pass
112 |                     content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:112:1
    |
110 |                 if spec_file.exists():
111 |             pass
112 |                     content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
113 |
114 |                     # Check H1 title format exactly
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:152:1
    |
152 | class TestOpenSpecValidationRules:
    | ^
153 |     pass
154 |     """Test OpenSpec validation rules and constraints."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:162:9
    |
161 |         for change_dir in changes_dir.iterdir():
162 |         pass
    |         ^^^^
163 |             if change_dir.is_dir() and change_dir.name != "archive":
164 |                 change_id = change_dir.name
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:163:1
    |
161 |         for change_dir in changes_dir.iterdir():
162 |         pass
163 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
164 |                 change_id = change_dir.name
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:197:9
    |
195 |         # Test specific scenario format requirements
196 |         for change_dir in changes_dir.iterdir():
197 |         pass
    |         ^^^^
198 |             if change_dir.is_dir() and change_dir.name != "archive":
199 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:198:1
    |
196 |         for change_dir in changes_dir.iterdir():
197 |         pass
198 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
199 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:201:39
    |
199 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
200 |
201 |                 if spec_file.exists():
    |                                       ^
202 |             pass
203 |                     content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:203:1
    |
201 |                 if spec_file.exists():
202 |             pass
203 |                     content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
204 |                     lines = content.split("\n")
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_workflow.py:214:1
    |
213 |                     for scenario_line_idx in scenario_lines:
214 |                 pass
    | ^^^^^^^^^^^^^^^^
215 |                         # Check that scenario has content
216 |                         assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:216:1
    |
214 |                 pass
215 |                         # Check that scenario has content
216 |                         assert (
    | ^^^^^^^^^^^^^^^^^^^^^^^^
217 |                             scenario_line_idx < len(lines) - 2
218 |                         ), f"Scenario has no content in {change_dir.name}"
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:231:5
    |
229 |                         ), f"Scenario missing THEN in {change_dir.name}"
230 |
231 |     def test_capability_consistency(self):
    |     ^
232 |         """Test that all changes use the project-documentation capability consistently."""
233 |         repo_root = Path(__file__).parent.parent
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:239:9
    |
238 |         for change_dir in changes_dir.iterdir():
239 |         pass
    |         ^^^^
240 |             if change_dir.is_dir() and change_dir.name != "archive":
241 |                 # Check spec location
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:240:1
    |
238 |         for change_dir in changes_dir.iterdir():
239 |         pass
240 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
241 |                 # Check spec location
242 |                 spec_dir = change_dir / "specs" / expected_capability
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:249:39
    |
247 |                 # Check spec title
248 |                 spec_file = spec_dir / "spec.md"
249 |                 if spec_file.exists():
    |                                       ^
250 |             pass
251 |                     content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:251:1
    |
249 |                 if spec_file.exists():
250 |             pass
251 |                     content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
252 |                     expected_title_part = f"project-documentation / {change_dir.name}"
253 |                     assert (
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_workflow.py:258:1
    |
257 |                 # Check proposal mentions capability
258 |                 proposal_file = change_dir / "proposal.md"
    | ^^^^^^^^^^^^^^^^
259 |                 if proposal_file.exists():
260 |             pass
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:259:1
    |
257 |                 # Check proposal mentions capability
258 |                 proposal_file = change_dir / "proposal.md"
259 |                 if proposal_file.exists():
    | ^^^^^^^^^^^^^^^^
260 |             pass
261 |                     proposal_content = proposal_file.read_text()
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:259:43
    |
257 |                 # Check proposal mentions capability
258 |                 proposal_file = change_dir / "proposal.md"
259 |                 if proposal_file.exists():
    |                                           ^
260 |             pass
261 |                     proposal_content = proposal_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:261:1
    |
259 |                 if proposal_file.exists():
260 |             pass
261 |                     proposal_content = proposal_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
262 |                     assert (
263 |                         expected_capability in proposal_content
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:267:1
    |
267 | class TestOpenSpecArchiveValidation:
    | ^
268 |     pass
269 |     """Test OpenSpec archive functionality and compliance."""
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:277:9
    |
276 |         if archive_dir.exists():
277 |         pass
    |         ^^^^
278 |             # Check timestamped subdirectories
279 |             for subdir in archive_dir.iterdir():
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:279:1
    |
277 |         pass
278 |             # Check timestamped subdirectories
279 |             for subdir in archive_dir.iterdir():
    | ^^^^^^^^^^^^
280 |             pass
281 |                 if subdir.is_dir():
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:280:13
    |
278 |             # Check timestamped subdirectories
279 |             for subdir in archive_dir.iterdir():
280 |             pass
    |             ^^^^
281 |                 if subdir.is_dir():
282 |                     # Should follow date pattern
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:281:1
    |
279 |             for subdir in archive_dir.iterdir():
280 |             pass
281 |                 if subdir.is_dir():
    | ^^^^^^^^^^^^^^^^
282 |                     # Should follow date pattern
283 |                     name_parts = subdir.name.split("-")
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:300:5
    |
298 |                     ), f"Invalid day in {subdir.name}"
299 |
300 |     def test_archived_changes_preserve_structure(self):
    |     ^
301 |         """Test that archived changes preserve the original structure."""
302 |         repo_root = Path(__file__).parent.parent
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:306:9
    |
305 |         if archive_dir.exists():
306 |         pass
    |         ^^^^
307 |             for date_subdir in archive_dir.iterdir():
308 |                 if date_subdir.is_dir():
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:307:1
    |
305 |         if archive_dir.exists():
306 |         pass
307 |             for date_subdir in archive_dir.iterdir():
    | ^^^^^^^^^^^^
308 |                 if date_subdir.is_dir():
309 |             pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:308:41
    |
306 |         pass
307 |             for date_subdir in archive_dir.iterdir():
308 |                 if date_subdir.is_dir():
    |                                         ^
309 |             pass
310 |                     for archived_change in date_subdir.iterdir():
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:310:1
    |
308 |                 if date_subdir.is_dir():
309 |             pass
310 |                     for archived_change in date_subdir.iterdir():
    | ^^^^^^^^^^^^^^^^^^^^
311 |                         if archived_change.is_dir():
312 |                 pass
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:311:53
    |
309 |             pass
310 |                     for archived_change in date_subdir.iterdir():
311 |                         if archived_change.is_dir():
    |                                                     ^
312 |                 pass
313 |                             # Should have the basic change structure
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_workflow.py:312:17
    |
310 |                     for archived_change in date_subdir.iterdir():
311 |                         if archived_change.is_dir():
312 |                 pass
    |                 ^
313 |                             # Should have the basic change structure
314 |                             expected_files = ["proposal.md", "tasks.md"]
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:314:1
    |
312 |                 pass
313 |                             # Should have the basic change structure
314 |                             expected_files = ["proposal.md", "tasks.md"]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
315 |                             for expected_file in expected_files:
316 |                     pass
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_workflow.py:316:1
    |
314 |                             expected_files = ["proposal.md", "tasks.md"]
315 |                             for expected_file in expected_files:
316 |                     pass
    | ^^^^^^^^^^^^^^^^^^^^
317 |                                 file_path = archived_change / expected_file
318 |                                 # Not all archived changes may have all files, but check if any exist
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:317:1
    |
315 |                             for expected_file in expected_files:
316 |                     pass
317 |                                 file_path = archived_change / expected_file
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
318 |                                 # Not all archived changes may have all files, but check if any exist
319 |                                 if file_path.exists():
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_workflow.py:320:1
    |
318 |                                 # Not all archived changes may have all files, but check if any exist
319 |                                 if file_path.exists():
320 |                     pass
    | ^^^^^^^^^^^^^^^^^^^^
321 |                                     content = file_path.read_text()
322 |                                     assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:321:1
    |
319 |                                 if file_path.exists():
320 |                     pass
321 |                                     content = file_path.read_text()
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
322 |                                     assert (
323 |                                         len(content.strip()) > 0
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:327:1
    |
327 | class TestOpenSpecIntegrationPatterns:
    | ^
328 |     """Test integration patterns and best practices."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:349:9
    |
348 |         for doc in important_docs:
349 |         pass
    |         ^^^^
350 |             # Convert to expected change ID
351 |             import sys
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:351:1
    |
349 |         pass
350 |             # Convert to expected change ID
351 |             import sys
    | ^^^^^^^^^^^^
352 |
353 |             sys.path.append(str(repo_root / "scripts"))
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:370:9
    |
368 |         test_changes = []
369 |         for change_dir in changes_dir.iterdir():
370 |         pass
    |         ^^^^
371 |             if change_dir.is_dir() and change_dir.name != "archive":
372 |                 test_changes.append(change_dir)
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:371:1
    |
369 |         for change_dir in changes_dir.iterdir():
370 |         pass
371 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
372 |                 test_changes.append(change_dir)
373 |                 if len(test_changes) >= 5:
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:373:43
    |
371 |             if change_dir.is_dir() and change_dir.name != "archive":
372 |                 test_changes.append(change_dir)
373 |                 if len(test_changes) >= 5:
    |                                           ^
374 |             pass
375 |                     break
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:375:1
    |
373 |                 if len(test_changes) >= 5:
374 |             pass
375 |                     break
    | ^^^^^^^^^^^^^^^^^^^^
376 |
377 |         for change_dir in test_changes:
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:377:9
    |
375 |                     break
376 |
377 |         for change_dir in test_changes:
    |         ^
378 |         pass
379 |             # Check all required files exist
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:378:9
    |
377 |         for change_dir in test_changes:
378 |         pass
    |         ^^^^
379 |             # Check all required files exist
380 |             required_files = [
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:380:1
    |
378 |         pass
379 |             # Check all required files exist
380 |             required_files = [
    | ^^^^^^^^^^^^
381 |                 "proposal.md",
382 |                 "tasks.md",
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:387:13
    |
386 |             for required_file in required_files:
387 |             pass
    |             ^^^^
388 |                 file_path = change_dir / required_file
389 |                 assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:388:1
    |
386 |             for required_file in required_files:
387 |             pass
388 |                 file_path = change_dir / required_file
    | ^^^^^^^^^^^^^^^^
389 |                 assert (
390 |                     file_path.exists()
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:398:5
    |
396 |                 ), f"File {required_file} too short in {change_dir.name}"
397 |
398 |     def test_governance_requirement_pattern(self):
    |     ^
399 |         """Test that governance requirements follow consistent patterns."""
400 |         repo_root = Path(__file__).parent.parent
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:406:9
    |
405 |         for change_dir in changes_dir.iterdir():
406 |         pass
    |         ^^^^
407 |             if change_dir.is_dir() and change_dir.name != "archive":
408 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:407:1
    |
405 |         for change_dir in changes_dir.iterdir():
406 |         pass
407 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
408 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:410:39
    |
408 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
409 |
410 |                 if spec_file.exists():
    |                                       ^
411 |             pass
412 |                     content = spec_file.read_text().lower()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:412:1
    |
410 |                 if spec_file.exists():
411 |             pass
412 |                     content = spec_file.read_text().lower()
    | ^^^^^^^^^^^^^^^^^^^^
413 |
414 |                     # Should mention governance concepts
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_workflow.py:427:1
    |
425 |                     proposal_file = change_dir / "proposal.md"
426 |                     if proposal_file.exists():
427 |                 pass
    | ^^^^^^^^^^^^^^^^
428 |                         proposal_content = proposal_file.read_text()
429 |                         # Extract the target file from backticks
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:428:1
    |
426 |                     if proposal_file.exists():
427 |                 pass
428 |                         proposal_content = proposal_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^^^^^
429 |                         # Extract the target file from backticks
430 |                         file_mentions = re.findall(r"`([^`]+\.md)`", proposal_content)
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_workflow.py:432:1
    |
430 |                         file_mentions = re.findall(r"`([^`]+\.md)`", proposal_content)
431 |                         if file_mentions:
432 |                 pass
    | ^^^^^^^^^^^^^^^^
433 |                             target_file = file_mentions[0]
434 |                             assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:433:1
    |
431 |                         if file_mentions:
432 |                 pass
433 |                             target_file = file_mentions[0]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
434 |                             assert (
435 |                                 target_file.split("/")[-1].lower() in content
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:439:1
    |
439 | class TestOpenSpecMetadata:
    | ^
440 |     pass
441 |     """Test OpenSpec metadata and consistency."""
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:449:9
    |
448 |         for change_dir in changes_dir.iterdir():
449 |         pass
    |         ^^^^
450 |             if change_dir.is_dir() and change_dir.name != "archive":
451 |                 proposal_file = change_dir / "proposal.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:450:1
    |
448 |         for change_dir in changes_dir.iterdir():
449 |         pass
450 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
451 |                 proposal_file = change_dir / "proposal.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:453:43
    |
451 |                 proposal_file = change_dir / "proposal.md"
452 |
453 |                 if proposal_file.exists():
    |                                           ^
454 |             pass
455 |                     content = proposal_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:455:1
    |
453 |                 if proposal_file.exists():
454 |             pass
455 |                     content = proposal_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
456 |
457 |                     # Check if the proposal title matches the directory name
    |

invalid-syntax: unindent does not match any outer indentation level
   --> tests\test_openspec_workflow.py:460:1
    |
458 |                     title_match = re.search(r"# Change Proposal: (.+)", content)
459 |                     if title_match:
460 |                 pass
    | ^^^^^^^^^^^^^^^^
461 |                         proposal_title = title_match.group(1).strip()
462 |                         assert (
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:461:1
    |
459 |                     if title_match:
460 |                 pass
461 |                         proposal_title = title_match.group(1).strip()
    | ^^^^^^^^^^^^^^^^^^^^^^^^
462 |                         assert (
463 |                             proposal_title == change_dir.name
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:466:5
    |
464 |                         ), f"Title mismatch in {change_dir.name}: expected {change_dir.name}, got {proposal_title}"
465 |
466 |     def test_spec_delta_titles_match_directories(self):
    |     ^
467 |         """Test that spec delta titles match their directory structure."""
468 |         repo_root = Path(__file__).parent.parent
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:472:9
    |
471 |         for change_dir in changes_dir.iterdir():
472 |         pass
    |         ^^^^
473 |             if change_dir.is_dir() and change_dir.name != "archive":
474 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:473:1
    |
471 |         for change_dir in changes_dir.iterdir():
472 |         pass
473 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
474 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:476:39
    |
474 |                 spec_file = change_dir / "specs" / "project-documentation" / "spec.md"
475 |
476 |                 if spec_file.exists():
    |                                       ^
477 |             pass
478 |                     content = spec_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:478:1
    |
476 |                 if spec_file.exists():
477 |             pass
478 |                     content = spec_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
479 |
480 |                     # Check title format
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:488:5
    |
486 |                     ), f"Spec delta title mismatch in {change_dir.name}"
487 |
488 |     def test_tasks_reference_correct_change(self):
    |     ^
489 |         """Test that tasks.md references the correct change ID for validation."""
490 |         repo_root = Path(__file__).parent.parent
    |

invalid-syntax: Expected an indented block after `for` statement
   --> tests\test_openspec_workflow.py:494:9
    |
493 |         for change_dir in changes_dir.iterdir():
494 |         pass
    |         ^^^^
495 |             if change_dir.is_dir() and change_dir.name != "archive":
496 |                 tasks_file = change_dir / "tasks.md"
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:495:1
    |
493 |         for change_dir in changes_dir.iterdir():
494 |         pass
495 |             if change_dir.is_dir() and change_dir.name != "archive":
    | ^^^^^^^^^^^^
496 |                 tasks_file = change_dir / "tasks.md"
    |

invalid-syntax: Expected an indented block after `if` statement
   --> tests\test_openspec_workflow.py:498:40
    |
496 |                 tasks_file = change_dir / "tasks.md"
497 |
498 |                 if tasks_file.exists():
    |                                        ^
499 |             pass
500 |                     content = tasks_file.read_text()
    |

invalid-syntax: Unexpected indentation
   --> tests\test_openspec_workflow.py:500:1
    |
498 |                 if tasks_file.exists():
499 |             pass
500 |                     content = tasks_file.read_text()
    | ^^^^^^^^^^^^^^^^^^^^
501 |
502 |                     # Should reference the correct change ID in validation command
    |

invalid-syntax: Expected a statement
   --> tests\test_openspec_workflow.py:515:1
    |
513 |                         expected_title in content
514 |                     ), f"Wrong tasks title in {change_dir.name}"
    |                                                                 ^
    |

invalid-syntax: Expected an indented block after `with` statement
   --> tests\test_performance.py:158:9
    |
156 |         # Should raise error when exhausted
157 |         with pytest.raises(RuntimeError, match="Connection pool exhausted"):
158 |         pass
    |         ^^^^
159 |             pool.get_connection()
160 |         # Return one and try again
    |

invalid-syntax: Unexpected indentation
   --> tests\test_performance.py:159:1
    |
157 |         with pytest.raises(RuntimeError, match="Connection pool exhausted"):
158 |         pass
159 |             pool.get_connection()
    | ^^^^^^^^^^^^
160 |         # Return one and try again
161 |         pool.return_connection(conn1)
    |

invalid-syntax: Expected a statement
   --> tests\test_performance.py:185:1
    |
185 | @pytest.mark.asyncio
    | ^
186 | class TestAsyncTaskQueue:
187 |     """Test async task queue implementation"""
    |

invalid-syntax: Expected an indented block after function definition
   --> tests\test_performance.py:230:9
    |
228 |         # Submit a task
229 |         async def dummy_task():
230 |         pass
    |         ^^^^
231 |             await asyncio.sleep(0.01)
    |

invalid-syntax: Unexpected indentation
   --> tests\test_performance.py:231:1
    |
229 |         async def dummy_task():
230 |         pass
231 |             await asyncio.sleep(0.01)
    | ^^^^^^^^^^^^
232 |
233 |         await queue.submit_task(dummy_task())
    |

invalid-syntax: Expected a statement
   --> tests\test_performance.py:242:1
    |
242 | class TestCachedDecorator:
    | ^
243 |     """Test the @cached decorator"""
    |

Found 4069 errors.
[*] 14 fixable with the `--fix` option (2 hidden fixes can be enabled with the `--unsafe-fixes` option).
