[pytest]

# Enable pytest-asyncio auto mode so async tests run without explicit markers
asyncio_mode = auto

# Pytest configuration for Obsidian AI Agent


# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Output configuration  
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    # Coverage settings - enabled by default
    --cov=backend
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-context=test

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (slower, requires external services)
    slow: Slow tests (model loading, large file processing)
    security: Security-related tests
    voice: Voice processing tests
    llm: LLM-related tests requiring models
    cache: Cache-related tests
    embeddings: Embedding and vector database tests
    api: API endpoint tests
    setup: Setup script tests

# Minimum Python version
minversion = 3.10

# Test timeout removed (requires pytest-timeout plugin); re-enable if plugin is installed

# Filter warnings
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*huggingface.*:UserWarning
    ignore:.*torch.*:UserWarning
    ignore:.*transformers.*:UserWarning

# Asyncio configuration handled above

# Coverage configuration
[coverage:run]
source = backend/
dynamic_context = test_function
omit = 
    tests/*
    */.venv/*
    */env/*
    */__pycache__/*
    */migrations/*
    */node_modules/*
    setup.py
    conftest.py
    # Omit optional/enterprise and infrastructure modules from coverage
    backend/enterprise_*.py
    backend/security_management.py
    backend/cache_management.py
    backend/enhanced_caching.py
    backend/rate_limiting.py
    backend/csrf_middleware.py
    backend/performance.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml
