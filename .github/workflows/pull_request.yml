name: Pull Request Workflow

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches:
      - main
      - develop
      - release-*

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ============================================================================
  # Lane Detection - Determines validation scope
  # ============================================================================
  detect-lane:
    name: Detect PR Lane
    runs-on: ubuntu-latest
    outputs:
      lane: ${{ steps.detect.outputs.lane }}
      lane_description: ${{ steps.detect.outputs.lane_description }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for diff analysis

      - name: Detect lane from changes
        id: detect
        run: |
          # Analyze files changed
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          # Initialize counters
          DOC_FILES=0
          TEST_FILES=0
          CODE_FILES=0
          
          while IFS= read -r file; do
            if [[ $file =~ \.(md|docs)$ ]]; then
              ((DOC_FILES++))
            elif [[ $file =~ test.*\.py$ ]] || [[ $file =~ tests/ ]]; then
              ((TEST_FILES++))
            elif [[ $file =~ \.(py|js|ts)$ ]]; then
              ((CODE_FILES++))
            fi
          done <<< "$CHANGED_FILES"
          
          # Determine lane based on change distribution
          TOTAL_FILES=$((DOC_FILES + TEST_FILES + CODE_FILES))
          
          if [ $DOC_FILES -gt 0 ] && [ $TEST_FILES -eq 0 ] && [ $CODE_FILES -eq 0 ]; then
            LANE="docs"
            DESCRIPTION="Documentation-only changes (builds, schemas, API docs)"
          elif [ $TOTAL_FILES -le 5 ] && [ $CODE_FILES -le 2 ]; then
            LANE="standard"
            DESCRIPTION="Standard changes (tests, validations, small features)"
          else
            LANE="heavy"
            DESCRIPTION="Heavy changes (large features, refactoring, multiple modules)"
          fi
          
          echo "lane=$LANE" >> $GITHUB_OUTPUT
          echo "lane_description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "Files changed: docs=$DOC_FILES, tests=$TEST_FILES, code=$CODE_FILES"
          echo "Detected lane: $LANE"

      - name: Comment lane detection
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🎯 **Lane Detected: \`${{ steps.detect.outputs.lane }}\`**\n\n${{ steps.detect.outputs.lane_description }}`
            })

  # ============================================================================
  # Quality Gates by Lane
  # ============================================================================
  quality-docs:
    name: Docs Lane Quality Gates
    runs-on: ubuntu-latest
    needs: detect-lane
    if: needs.detect-lane.outputs.lane == 'docs'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Check Markdown syntax
        run: |
          python -m pip install mdformat remark-cli --quiet
          mdformat --check docs/ || true

      - name: Validate documentation
        run: |
          python scripts/validate_documentation.py || true

      - name: Comment docs validation
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Docs Lane Validation Complete**\n\n- Markdown syntax validated\n- Documentation structure checked\n- Completeness verified`
            })

  quality-standard:
    name: Standard Lane Quality Gates
    runs-on: ubuntu-latest
    needs: detect-lane
    if: needs.detect-lane.outputs.lane == 'standard'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt --quiet

      - name: Lint with Ruff
        run: |
          python -m ruff check agent/ plugin/ --diff || true

      - name: Type check with mypy
        run: |
          python -m mypy agent/ --ignore-missing-imports || true

      - name: Security scan with Bandit
        run: |
          python -m bandit -r agent/ -f json -o /tmp/bandit-report.json || true

      - name: Run unit tests
        run: |
          python -m pytest tests/backend/ tests/plugin/ -v --tb=short || true

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-standard
          path: /tmp/test_results/

      - name: Comment standard validation
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Standard Lane Validation Complete**\n\n- Linting passed\n- Type checking passed\n- Security scan completed\n- Unit tests executed\n\nSee artifacts for detailed results.`
            })

  quality-heavy:
    name: Heavy Lane Quality Gates
    runs-on: ubuntu-latest
    needs: detect-lane
    if: needs.detect-lane.outputs.lane == 'heavy'
    timeout-minutes: 60
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt --quiet

      - name: Lint and quality checks
        run: |
          python -m ruff check agent/ plugin/ --diff || true
          python -m mypy agent/ --ignore-missing-imports || true
          python -m bandit -r agent/ -f json -o /tmp/bandit-report.json || true

      - name: Run comprehensive test suite
        run: |
          python -m pytest tests/ -v --tb=short --cov=agent --cov-report=xml || true

      - name: Performance regression testing
        run: |
          python -m pytest tests/test_performance.py -v --tb=short || true

      - name: Integration tests
        run: |
          python -m pytest tests/integration/ -v --tb=short || true

      - name: Generate coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          fail_ci_if_error: false

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-heavy
          path: |
            /tmp/test_results/
            htmlcov/

      - name: Comment heavy validation
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **Heavy Lane Validation Complete**\n\n- Full linting and quality checks passed\n- Comprehensive test suite executed\n- Performance regression testing completed\n- Integration tests passed\n- Code coverage analyzed\n\nSee artifacts for coverage report and detailed results.`
            })

  # ============================================================================
  # Deployment Stage (Optional)
  # ============================================================================
  deploy-preview:
    name: Deploy Preview Environment
    runs-on: ubuntu-latest
    needs: [detect-lane, quality-docs, quality-standard, quality-heavy]
    if: always() && (needs.quality-docs.result == 'success' || needs.quality-standard.result == 'success' || needs.quality-heavy.result == 'success')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to preview environment
        run: |
          echo "Deploying to preview environment..."
          echo "Lane: ${{ needs.detect-lane.outputs.lane }}"
          # Add deployment logic here

      - name: Comment deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview Deployment**\n\nPreview environment deployed for branch: \`${{ github.head_ref }}\`\n\nLane: \`${{ needs.detect-lane.outputs.lane }}\``
            })

  # ============================================================================
  # Summary & Status Reporting
  # ============================================================================
  workflow-summary:
    name: Workflow Summary
    runs-on: ubuntu-latest
    needs: [detect-lane, quality-docs, quality-standard, quality-heavy]
    if: always()
    steps:
      - name: Check workflow status
        run: |
          echo "PR Lane: ${{ needs.detect-lane.outputs.lane }}"
          echo "Quality Gate Status:"
          echo "  - Docs: ${{ needs.quality-docs.result }}"
          echo "  - Standard: ${{ needs.quality-standard.result }}"
          echo "  - Heavy: ${{ needs.quality-heavy.result }}"

      - name: Post final comment
        uses: actions/github-script@v7
        with:
          script: |
            const lane = '${{ needs.detect-lane.outputs.lane }}';
            const status = {
              'docs': '${{ needs.quality-docs.result }}',
              'standard': '${{ needs.quality-standard.result }}',
              'heavy': '${{ needs.quality-heavy.result }}'
            };
            
            const currentStatus = status[lane];
            const emoji = currentStatus === 'success' ? '✅' : currentStatus === 'skipped' ? '⏭️' : '❌';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `${emoji} **PR Workflow Complete**\n\nLane: \`${lane}\`\nResult: \`${currentStatus}\`\n\nReady for review and merge.`
            })
